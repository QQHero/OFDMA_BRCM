cmake_minimum_required (VERSION 3.6)

project ("start_router_accgw")
if (WIN32)
    set(platform win32)
    add_definitions(-DOS_WIN)
    if(MSVC)
        add_compile_options(/utf-8)
        add_definitions(-D_CRT_SECURE_NO_WARNINGS)
        add_definitions(-D_WINSOCK_DEPRECATED_NO_WARNINGS)
        set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Zi")
        set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
        set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG /OPT:REF /OPT:ICF")
    endif()
elseif (APPLE)
	set(platform apple)
    add_definitions(-DOS_MACOSX)
elseif (ANDROID)
    set(platform android)
    add_definitions(-DOS_ANDROID)
elseif (UNIX)
    set(platform linux)
    add_definitions(-D_LINUX)
    add_definitions(-DOS_LINUX)
else()
    message(FATAL_ERROR "unsupported platform")
endif()
message("Built on ${platform} platform")
message("Build type: ${CMAKE_BUILD_TYPE}")
# 增加DEBUG参数
if (CMAKE_BUILD_TYPE MATCHES Debug)
    add_definitions(-DDEBUG)
endif()


# 去掉优化
if (_BUILD_O0)
    message("Build -O0")
    add_compile_options(-fno-elide-constructors)
endif()

if(NOT WIN32)
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-std=c++11 -pthread")
message("Build with -pthread ")

endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(LIB_OUTPUT_DIR ${PROJECT_SOURCE_DIR}/lib)

if(_BUILD_LINUX_SERVER)
    message("Build linux server")
    set(exe_name router_accgw)
    add_executable(${exe_name} src/main.c src/router_server.c)
endif()
