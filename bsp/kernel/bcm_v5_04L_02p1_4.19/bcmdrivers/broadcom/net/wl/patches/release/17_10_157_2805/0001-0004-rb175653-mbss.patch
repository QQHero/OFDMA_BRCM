diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/apps/wldm/Makefile ./main/components/apps/wldm/Makefile
--- ./main/components/apps/wldm/Makefile	2021-04-17 01:01:03.323464237 +0300
+++ ./main/components/apps/wldm/Makefile	2021-04-17 01:03:09.261980746 +0300
@@ -101,6 +101,10 @@
 
 LDFLAGS		+= -L$(INSTDIR)/lib $(EXTRA_LDFLAGS)
 
+ifneq ($(BUILD_RDKWIFI),)
+CFLAGS += -DBCA_CPEROUTER_RDK
+endif
+
 ifneq ("","$(DEBUG)")
 CFLAGS		+= -DDEBUG -g
 endif
diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/apps/wldm/wldm_lib.c ./main/components/apps/wldm/wldm_lib.c
--- ./main/components/apps/wldm/wldm_lib.c	2021-04-17 01:01:03.477469760 +0300
+++ ./main/components/apps/wldm/wldm_lib.c	2021-04-17 01:03:09.422986521 +0300
@@ -2226,8 +2226,14 @@
 			len = sizeof(pObj->Ap.Enable);
 			if (wldm_AccessPoint_Enable(CMD_SET_NVRAM, index,
 				&pObj->Ap.Enable, &len, NULL, NULL) == 0) {
-				if (HAPD_DISABLED())
+				if (HAPD_DISABLED()) {
 					ioctl_map |= AccessPoint_Enable_MASK;
+				}
+#ifdef BCA_CPEROUTER_RDK
+				if (BSS_IDX(apIndex))
+					action |= ACTION_APP_NVRAM_COMMIT | ACTION_SYS_RESTART;
+				else
+#endif // endif
 				action |= ACTION_APP_NVRAM_COMMIT | ACTION_APP_HOSTAPD;
 			}
 		}
diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/apps/wldm/wldm_lib_wifi.c ./main/components/apps/wldm/wldm_lib_wifi.c
--- ./main/components/apps/wldm/wldm_lib_wifi.c	2021-04-17 01:01:03.058454733 +0300
+++ ./main/components/apps/wldm/wldm_lib_wifi.c	2021-04-17 01:03:09.028972390 +0300
@@ -6714,9 +6714,10 @@
 	boolean *pvalue, int *plen, char *pbuf, int *pbufsz)
 {
 	char *parameter = "ObssCoexistenceEnable";
+	char nvram_name[NVRAM_NAME_SIZE];
 	char *osifname;
 
-	IGNORE_CMD_WARNING(cmd, CMD_ADD | CMD_DEL | CMD_SET_NVRAM |CMD_SET);
+	IGNORE_CMD_WARNING(cmd, CMD_ADD | CMD_DEL | CMD_SET);
 
 	if (cmd == CMD_LIST) {
 		/* List the name only. */
@@ -6739,6 +6740,12 @@
 			PRINT_BUF(pbuf, *pbufsz, "%s=%s\n", parameter, *pvalue ? "true" : "false");
 	}
 
+	if (cmd & CMD_SET_NVRAM)
+	{
+		snprintf(nvram_name, sizeof(nvram_name), "%s_obss_coex", wldm_get_nvifname(apIndex));
+		NVRAM_SET(nvram_name, (*pvalue != 0) ? "1" : "0");
+	}
+
 	if (cmd & CMD_SET_IOCTL) {
 		/* 1=enable, 0=disable -1=Auto mode */
 		if (wl_iovar_setint(osifname, "obss_coex", *pvalue)) {
@@ -9194,7 +9201,7 @@
 		char *nvram_value = NULL;
 
 		nvram_value = wlcsm_nvram_get("wps_config_method");
-		if (nvram_value)
+		if (nvram_value && nvram_value[0] != '\0')
 			iwpsmethods = strtoul(nvram_value, NULL, 16);
 		else
 			iwpsmethods =
diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_api.c ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_api.c
--- ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_api.c	2021-04-17 01:01:05.461540914 +0300
+++ ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_api.c	2021-04-17 01:03:11.361056025 +0300
@@ -115,50 +115,50 @@
 
 BOOL print_compact = FALSE;
 #define PRINT_FMT(NAME, TAG, FMT, VALUE) \
-    do {\
-        if (print_compact) { \
-            char tmp[256]; \
-            snprintf(tmp, sizeof(tmp), FMT, VALUE); \
-            printf("%-4s ", tmp); \
-        } else { \
-            printf("  %-30s %s = ", NAME, TAG); \
-            printf(FMT, VALUE); \
-            printf("\n"); \
-        } \
-    } while (0)
+	do {\
+		if (print_compact) { \
+			char tmp[256]; \
+			snprintf(tmp, sizeof(tmp), FMT, VALUE); \
+			printf("%-4s ", tmp); \
+		} else { \
+			printf("  %-30s %s = ", NAME, TAG); \
+			printf(FMT, VALUE); \
+			printf("\n"); \
+		} \
+	} while (0)
 
 #define PRINT_STR(A, B) PRINT_FMT(#B, "(str)", "'%s'", A->B)
 
 #define PRINT_INT2(N, V) \
-    do { \
-        if (sizeof(V) == sizeof(int64_t)) { \
-            if ( (typeof(V))-1 < 1 ) { \
-                PRINT_FMT(N, "(i64)", "%"PRId64, (int64_t)V); \
-            } else { \
-                PRINT_FMT(N, "(u64)", "%"PRIu64, (uint64_t)V); \
-            } \
-        } else { \
-            if ( (typeof(V))-1 < 1 ) { \
-                PRINT_FMT(N, "(i32)", "%"PRId32, (int32_t)V); \
-            } else { \
-                PRINT_FMT(N, "(u32)", "%"PRIu32, (uint32_t)V); \
-            } \
-        } \
-        fflush(stdout); \
-    } while (0)
+	do { \
+		if (sizeof(V) == sizeof(int64_t)) { \
+			if ( (typeof(V))-1 < 1 ) { \
+				PRINT_FMT(N, "(i64)", "%"PRId64, (int64_t)V); \
+			} else { \
+				PRINT_FMT(N, "(u64)", "%"PRIu64, (uint64_t)V); \
+			} \
+		} else { \
+			if ( (typeof(V))-1 < 1 ) { \
+				PRINT_FMT(N, "(i32)", "%"PRId32, (int32_t)V); \
+			} else { \
+				PRINT_FMT(N, "(u32)", "%"PRIu32, (uint32_t)V); \
+			} \
+		} \
+		fflush(stdout); \
+	} while (0)
 
 #define PRINT_INT1(V) PRINT_INT2(#V, V)
 
 #define PRINT_INT(A, B) PRINT_INT2(#B, A->B)
 
 #define PRINT_HEX2(N, V) \
-    do { \
-        if (sizeof(V) == sizeof(int64_t)) { \
-            PRINT_FMT(N, "(x64)", "0x%"PRIx64, (uint64_t)V); \
-        } else { \
-            PRINT_FMT(N, "(x32)", "0x%"PRIx32, (uint32_t)V); \
-        } \
-    } while (0)
+	do { \
+		if (sizeof(V) == sizeof(int64_t)) { \
+			PRINT_FMT(N, "(x64)", "0x%"PRIx64, (uint64_t)V); \
+		} else { \
+			PRINT_FMT(N, "(x32)", "0x%"PRIx32, (uint32_t)V); \
+		} \
+	} while (0)
 
 #define PRINT_HEX1(V) PRINT_HEX2(#V, V)
 
@@ -169,7 +169,7 @@
 
 #ifndef MAC_TO_MACF
 #define MACF	"%02x:%02x:%02x:%02x:%02x:%02x"
-#define MAC_TO_MACF(addr)	addr[0], \
+#define MAC_TO_MACF(addr)				addr[0], \
 							addr[1], \
 							addr[2], \
 							addr[3], \
@@ -178,345 +178,384 @@
 #endif // endif
 
 typedef struct {
-    char *api_name;
-    int num_args;
-    char *usage;
+	char *api_name;
+	int num_args;
+	char *usage;
 } usage_t;
 
 /* Wifi HAL API's list */
 /*Add at the end for any new API's in this table - api name, min number of arguments, argument list */
 usage_t hal_cmd_table[] =
 {
-    { "wifi_getBandSteeringEnable",                     0, "" },
-    { "wifi_down",	                                    0, "" },
-    { "wifi_getHalVersion",	                            0, "" },
-    { "wifi_setWldmMsglevel",	                        1,
+	{ "wifi_getBandSteeringEnable",			0, "" },
+	{ "wifi_down",					0, "" },
+	{ "wifi_getHalVersion",				0, "" },
+	{ "wifi_setWldmMsglevel",			1,
 		"<msglevel Debug(0x08)|Info(0x04)|Warning(0x02)|Error(0x01)>"},
-    { "wifi_getRadioNumberOfEntries",	                0, "" },
-    { "wifi_getSSIDNumberOfEntries",	                0, "" },
-    { "wifi_getBandSteeringApGroup",	                0, "" },
-    { "wifi_factoryReset",                              2, "<commit 0/1> <restart 0/1>" },
-    { "wifi_factoryResetRadios",                        2, "<commit 0/1> <restart 0/1>" },
-    { "wifi_factoryResetRadio",                         3, "<RadioIndex> <commit 0/1> <restart 0/1>" },
-    { "wifi_factoryResetAP",                            3, "<AP Index> <commit 0/1> <restart 0/1>" },
-    { "wifi_reset",	                                    0, "" },
-    { "wifi_getRadioEnable",	                        1, "<RadioIndex>" },
-    { "wifi_getRadioUpTime",	                        1, "<RadioIndex>" },
-    { "wifi_getRadioStatus",	                        1, "<RadioIndex>" },
-    { "wifi_getSSIDRadioIndex",	                        1, "<RadioIndex>" },
-    { "wifi_getRadioResetCount",	                    1, "<RadioIndex>" },
-    { "wifi_getApIsolationEnable",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioIfName",	                        1, "<RadioIndex>" },
-    { "wifi_getRadioMaxBitRate",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioSupportedFrequencyBands",           1, "<RadioIndex>" },
-    { "wifi_getRadioOperatingFrequencyBand",	        1, "<RadioIndex>" },
-    { "wifi_getRadioSupportedStandards",	            1, "<RadioIndex>" },
-    { "wifi_getRadioStandard",	                        1, "<RadioIndex>" },
-    { "wifi_getSSIDEnable",	                            1, "<AP Index>" },
-    { "wifi_getSSIDStatus",	                            1, "<AP Index>" },
-    { "wifi_getSSIDName",	                            1, "<AP Index>" },
-    { "wifi_getRadioChannelStats",	                    1, "<RadioIndex>" },
-    { "wifi_getApAssociatedDeviceRxStatsResult",	    2, "<AP Index> <Client MAC>" },
-    { "wifi_getApAssociatedDeviceTxStatsResult",	    2, "<AP Index> <Client MAC>" },
-    { "wifi_getApAssociatedDeviceStats",	            2, "<AP Index> <Client MAC>" },
-    { "wifi_getBaseBSSID",	                            1, "<SSID>" },
-    { "wifi_getApEnable",	                            1, "<AP Index>" },
-    { "wifi_getApStatus",	                            1, "<AP Index>" },
-    { "wifi_getSSIDTrafficStats2",	                    1, "<SSID>" },
-    { "wifi_getApAssociatedDeviceDiagnosticResult",     1, "<AP Index>" },
-    { "wifi_getApAssociatedDeviceDiagnosticResult2",	1, "<AP Index>" },
-    { "wifi_getApAssociatedDeviceDiagnosticResult3",	1, "<AP Index>" },
-    { "wifi_getRadioBandUtilization",	                1, "<RadioIndex>" },
-    { "wifi_getApAssociatedDevice",	                    1, "<AP Index>" },
-    { "wifi_getApBeaconRate",	                            1, "<AP Index>" },
-    { "wifi_getApTxBeaconFrameCount",                       1, "<AP Index>" },
-    { "wifi_getRadioOperationalDataTransmitRates",	    1, "<RadioIndex>" },
-    { "wifi_getATMCapable",	                            0, "" },
-    { "wifi_getRadioDcsDwelltime",	                    1, "<RadioIndex>" },
-    { "wifi_setRadioDcsDwelltime",			    2, "<RadioIndex>" "<timeMillisec>" },
-    { "wifi_getRadioGuardInterval",	                    1, "<RadioIndex>" },
-    { "wifi_getApManagementFramePowerControl",	        1, "<AP Index>" },
-    { "wifi_getRadioDcsScanning",	                    1, "<RadioIndex>" },
-    { "wifi_deleteAp",	                                1, "<AP Index>" },
-    { "wifi_getSSIDNameStatus",	                        1, "<SSID>" },
-    { "wifi_getApMacAddressControlMode",	            1, "<AP Index>" },
-    { "wifi_getRadioCountryCode",	                    1, "<RadioIndex>" },
-    { "wifi_getApBasicAuthenticationMode",	            1, "<AP Index>" },
-    { "wifi_getApWpaEncryptionMode",	                1, "<AP Index>" },
-    { "wifi_getApWpsDevicePIN",	                        1, "<AP Index>" },
-    { "wifi_getBandSteeringCapability",	                1, "<AP Index>" },
-    { "wifi_getRadio11nGreenfieldEnable",	            1, "<AP Index>" },
-    { "wifi_getRadio11nGreenfieldSupported",		    1, "<AP Index>" },
-    { "wifi_getApWpsEnable",	                        1, "<AP Index>" },
-    { "wifi_getApSecuritySecondaryRadiusServer",	    1, "<AP Index>" },
-    { "wifi_getApSecurityRadiusServer",	                1, "<AP Index>" },
-    { "wifi_getApSecurityRadiusSettings",	            1, "<AP Index>" },
-    { "wifi_setApSecurityRadiusSettings",	            10, "<AP Index> <RadiusServerRetries> <RadiusServerRequestTimeout> <PMKCaching> <PMKCacheInterval> <PMKLifetime> <MaxAuthenticationAttempts> <BlacklistTableTimeout> <IdentityRequestRetryInterval> <QuietPeriodAfterFailedAuthentication>" },
-    { "wifi_getApBridgeInfo",	                        1, "<AP Index>" },
-    { "wifi_getRadioDCSChannelPool",	                1, "<RadioIndex>" },
-    { "wifi_getRadioBasicDataTransmitRates",	        1, "<RadioIndex>" },
-    { "wifi_getApSecurityModesSupported",	            1, "<AP Index>" },
-    { "wifi_getApSecurityModeEnabled",	                1, "<AP Index>" },
-    { "wifi_getApSecurityKeyPassphrase",	            1, "<AP Index>" },
-    { "wifi_getRadioOperatingChannelBandwidth",	        1, "<RadioIndex>" },
-    { "wifi_getApWpsConfigMethodsEnabled",	            1, "<AP Index>" },
-    { "wifi_getRadioChannel",	                        1, "<RadioIndex>" },
-    { "wifi_getRadioAutoChannelEnable",	                1, "<RadioIndex>" },
-    { "wifi_getRadioAutoChannelSupported",              1, "<RadioIndex>" },
-    { "wifi_getRadioPossibleChannels",	                1, "<RadioIndex>" },
-    { "wifi_getRadioTransmitPower",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioAMSDUEnable",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioTxChainMask",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioRxChainMask",	                    1, "<RadioIndex>" },
-    { "wifi_getApName",	                                1, "<AP Index>" },
-    { "wifi_getRadioChannelsInUse",	                    1, "<RadioIndex>" },
-    { "wifi_getApSsidAdvertisementEnable",	            1, "<AP Index>" },
-    { "wifi_getApBeaconType",	                        1, "<AP Index>" },
-    { "wifi_getBasicTrafficStats",	                    1, "<AP Index>" },
-    { "wifi_getWifiTrafficStats",	                    1, "<AP Index>" },
-    { "wifi_getApNumDevicesAssociated",	                1, "<AP Index>" },
-    { "wifi_getAllAssociatedDeviceDetail",	            1, "<AP Index>" },
-    { "wifi_getApAclDevices",	                        1, "<AP Index>" },
-    { "wifi_getApSecurityPreSharedKey",	                1, "<AP Index>" },
-    { "wifi_getApWpsConfigurationState",	            1, "<AP Index>" },
-    { "wifi_getRadioSupportedDataTransmitRates",	    1, "<RadioIndex>" },
-    { "wifi_getRadioExtChannel",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioTransmitPowerSupported",	        1, "<RadioIndex>" },
-    { "wifi_getApWpsConfigMethodsSupported",	        1, "<AP Index>" },
-    { "wifi_getBandSteeringBandUtilizationThreshold",	1, "<RadioIndex>" },
-    { "wifi_getApRadioIndex",	                        1, "<AP Index>" },
-    { "wifi_getRadioDCSScanTime",	                    1, "<RadioIndex>" },
-    { "wifi_getBandSteeringRSSIThreshold",	            1, "<RadioIndex>" },
-    { "wifi_getBandSteeringPhyRateThreshold",	        1, "<RadioIndex>" },
-    { "wifi_getRadioChannelStats2",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioTrafficStats2",	                    1, "<RadioIndex>" },
-    { "wifi_getApSecurityMFPConfig",	                1, "<AP Index>" },
+	{ "wifi_getRadioNumberOfEntries",		0, "" },
+	{ "wifi_getApAclDeviceNum",			1, "<AP Index>" },
+	{ "wifi_getSSIDNumberOfEntries",		0, "" },
+	{ "wifi_getBandSteeringApGroup",		0, "" },
+	{ "wifi_factoryReset",				2, "<commit 0/1> <restart 0/1>" },
+	{ "wifi_factoryResetRadios",			2, "<commit 0/1> <restart 0/1>" },
+	{ "wifi_factoryResetRadio",			3, "<RadioIndex> <commit 0/1> \
+		<restart 0/1>" },
+	{ "wifi_factoryResetAP",			3, "<AP Index> <commit 0/1> <restart 0/1>"
+		},
+	{ "wifi_reset",					0, "" },
+	{ "wifi_getRadioEnable",			1, "<RadioIndex>" },
+	{ "wifi_getRadioUpTime",			1, "<RadioIndex>" },
+	{ "wifi_getRadioStatus",			1, "<RadioIndex>" },
+	{ "wifi_getSSIDRadioIndex",			1, "<RadioIndex>" },
+	{ "wifi_getRadioResetCount",			1, "<RadioIndex>" },
+	{ "wifi_getApIsolationEnable",			1, "<RadioIndex>" },
+	{ "wifi_getRadioIfName",			1, "<RadioIndex>" },
+	{ "wifi_getRadioMaxBitRate",			1, "<RadioIndex>" },
+	{ "wifi_getRadioSupportedFrequencyBands",	1, "<RadioIndex>" },
+	{ "wifi_getRadioOperatingFrequencyBand",	1, "<RadioIndex>" },
+	{ "wifi_getRadioSupportedStandards",		1, "<RadioIndex>" },
+	{ "wifi_getRadioStandard",			1, "<RadioIndex>" },
+	{ "wifi_getSSIDEnable",				1, "<AP Index>" },
+	{ "wifi_getSSIDStatus",				1, "<AP Index>" },
+	{ "wifi_getSSIDName",				1, "<AP Index>" },
+	{ "wifi_getRadioChannelStats",			1, "<RadioIndex>" },
+	{ "wifi_getApAssociatedDeviceRxStatsResult",	2, "<AP Index> <Client MAC>" },
+	{ "wifi_getApAssociatedDeviceTxStatsResult",	2, "<AP Index> <Client MAC>" },
+	{ "wifi_getApAssociatedDeviceStats",		2, "<AP Index> <Client MAC>" },
+	{ "wifi_getBaseBSSID",				1, "<SSID>" },
+	{ "wifi_getApEnable",				1, "<AP Index>" },
+	{ "wifi_getApStatus",				1, "<AP Index>" },
+	{ "wifi_getSSIDTrafficStats2",			1, "<SSID>" },
+	{ "wifi_getApAssociatedDeviceDiagnosticResult",	1, "<AP Index>" },
+	{ "wifi_getApAssociatedDeviceDiagnosticResult2",1, "<AP Index>" },
+	{ "wifi_getApAssociatedDeviceDiagnosticResult3",1, "<AP Index>" },
+	{ "wifi_getRadioBandUtilization",		1, "<RadioIndex>" },
+	{ "wifi_getApAssociatedDevice",			1, "<AP Index>" },
+	{ "wifi_getApBeaconRate",			1, "<AP Index>" },
+	{ "wifi_getApTxBeaconFrameCount",		1, "<AP Index>" },
+	{ "wifi_getRadioOperationalDataTransmitRates",	1, "<RadioIndex>" },
+	{ "wifi_getATMCapable",				0, "" },
+	{ "wifi_getRadioDcsDwelltime",			1, "<RadioIndex>" },
+	{ "wifi_setRadioDcsDwelltime",			2, "<RadioIndex>" "<timeMillisec>" },
+	{ "wifi_getRadioGuardInterval",			1, "<RadioIndex>" },
+	{ "wifi_getApManagementFramePowerControl",	1, "<AP Index>" },
+	{ "wifi_getRadioDcsScanning",			1, "<RadioIndex>" },
+	{ "wifi_deleteAp",				1, "<AP Index>" },
+	{ "wifi_getSSIDNameStatus",			1, "<SSID>" },
+	{ "wifi_getApMacAddressControlMode",		1, "<AP Index>" },
+	{ "wifi_getRadioCountryCode",			1, "<RadioIndex>" },
+	{ "wifi_getApBasicAuthenticationMode",		1, "<AP Index>" },
+	{ "wifi_getApWpaEncryptionMode",		1, "<AP Index>" },
+	{ "wifi_getApWpsDevicePIN",			1, "<AP Index>" },
+	{ "wifi_getBandSteeringCapability",		1, "<AP Index>" },
+	{ "wifi_getRadio11nGreenfieldEnable",		1, "<AP Index>" },
+	{ "wifi_getRadio11nGreenfieldSupported",	1, "<AP Index>" },
+	{ "wifi_getApWpsEnable",			1, "<AP Index>" },
+	{ "wifi_getApSecuritySecondaryRadiusServer",	1, "<AP Index>" },
+	{ "wifi_getApSecurityRadiusServer",		1, "<AP Index>" },
+	{ "wifi_getApSecurityRadiusSettings",		1, "<AP Index>" },
+	{ "wifi_setApSecurityRadiusSettings",		10, "<AP Index> <RadiusServerRetries> \
+		<RadiusServerRequestTimeout> <PMKCaching> <PMKCacheInterval> <PMKLifetime> \
+		<MaxAuthenticationAttempts> <BlacklistTableTimeout> <IdentityRequestRetryInterval> \
+		<QuietPeriodAfterFailedAuthentication>" },
+	{ "wifi_getApBridgeInfo",			1, "<AP Index>" },
+	{ "wifi_getRadioDCSChannelPool",		1, "<RadioIndex>" },
+	{ "wifi_getRadioBasicDataTransmitRates",	1, "<RadioIndex>" },
+	{ "wifi_getApSecurityModesSupported",		1, "<AP Index>" },
+	{ "wifi_getApSecurityModeEnabled",		1, "<AP Index>" },
+	{ "wifi_getApSecurityKeyPassphrase",		1, "<AP Index>" },
+	{ "wifi_getRadioOperatingChannelBandwidth",	1, "<RadioIndex>" },
+	{ "wifi_getApWpsConfigMethodsEnabled",		1, "<AP Index>" },
+	{ "wifi_getRadioChannel",			1, "<RadioIndex>" },
+	{ "wifi_getRadioAutoChannelEnable",		1, "<RadioIndex>" },
+	{ "wifi_getRadioAutoChannelSupported",		1, "<RadioIndex>" },
+	{ "wifi_getRadioPossibleChannels",		1, "<RadioIndex>" },
+	{ "wifi_getRadioTransmitPower",			1, "<RadioIndex>" },
+	{ "wifi_getRadioAMSDUEnable",			1, "<RadioIndex>" },
+	{ "wifi_getRadioTxChainMask",			1, "<RadioIndex>" },
+	{ "wifi_getRadioRxChainMask",			1, "<RadioIndex>" },
+	{ "wifi_getApName",				1, "<AP Index>" },
+	{ "wifi_getRadioChannelsInUse",			1, "<RadioIndex>" },
+	{ "wifi_getApSsidAdvertisementEnable",		1, "<AP Index>" },
+	{ "wifi_getApBeaconType",			1, "<AP Index>" },
+	{ "wifi_getBasicTrafficStats",			1, "<AP Index>" },
+	{ "wifi_getWifiTrafficStats",			1, "<AP Index>" },
+	{ "wifi_getApNumDevicesAssociated",		1, "<AP Index>" },
+	{ "wifi_getAllAssociatedDeviceDetail",		1, "<AP Index>" },
+	{ "wifi_getApAclDevices",			1, "<AP Index>" },
+	{ "wifi_getApSecurityPreSharedKey",		1, "<AP Index>" },
+	{ "wifi_getApWpsConfigurationState",		1, "<AP Index>" },
+	{ "wifi_getRadioSupportedDataTransmitRates",	1, "<RadioIndex>" },
+	{ "wifi_getRadioExtChannel",			1, "<RadioIndex>" },
+	{ "wifi_getRadioTransmitPowerSupported",	1, "<RadioIndex>" },
+	{ "wifi_getApWpsConfigMethodsSupported",	1, "<AP Index>" },
+	{ "wifi_getBandSteeringBandUtilizationThreshold",	1, "<RadioIndex>" },
+	{ "wifi_getApRadioIndex",			1, "<AP Index>" },
+	{ "wifi_getRadioDCSScanTime",			1, "<RadioIndex>" },
+	{ "wifi_getBandSteeringRSSIThreshold",		1, "<RadioIndex>" },
+	{ "wifi_getBandSteeringPhyRateThreshold",	1, "<RadioIndex>" },
+	{ "wifi_getRadioChannelStats2",			1, "<RadioIndex>" },
+	{ "wifi_getRadioTrafficStats2",			1, "<RadioIndex>" },
+	{ "wifi_getApSecurityMFPConfig",		1, "<AP Index>" },
 #ifdef MAX_KEY_HOLDERS
-    { "wifi_testApFBTFeature",	                        1, "<AP Index>" },
-    { "wifi_setFastBSSTransitionActivated",	            2, "<AP Index> <activate>" },
-    { "wifi_getBSSTransitionActivated",	                1, "<AP Index>" },
-    { "wifi_getFTOverDSActivated",                      1, "<AP Index>" },
-    { "wifi_setFTOverDSActivated",	                    2, "<AP Index> <activate>" },
-    { "wifi_getFTMobilityDomainID",	                    1, "<AP Index>" },
-    { "wifi_setFTMobilityDomainID",	                    2, "<AP Index> <domain>" },
-    { "wifi_getFTResourceRequestSupported",	            1, "<AP Index>" },
-    { "wifi_setFTResourceRequestSupported",	            2, "<AP Index> <supported>" },
-    { "wifi_getFTR0KeyLifetime",	                    1, "<AP Index>" },
-    { "wifi_setFTR0KeyLifetime",	                    2, "<AP Index> <key_lifetime>" },
-    { "wifi_getFTR0KeyHolderID",                        1, "<AP Index>" },
-    { "wifi_setFTR0KeyHolderID",	                    2, "<AP Index> <keyHolderID>" },
-    { "wifi_getFTR1KeyHolderID",                        1, "<AP Index>" },
-    { "wifi_setFTR1KeyHolderID",	                    2, "<AP Index> <keyHolderID>" },
-    { "wifi_pushApFastTransitionConfig",	            4, "<support> <mobilityDomain> <overDS> <r0KeyLifeTime>" },
+	{ "wifi_testApFBTFeature",			1, "<AP Index>" },
+	{ "wifi_setFastBSSTransitionActivated",		2, "<AP Index> <activate>" },
+	{ "wifi_getBSSTransitionActivated",		1, "<AP Index>" },
+	{ "wifi_getFTOverDSActivated",			1, "<AP Index>" },
+	{ "wifi_setFTOverDSActivated",			2, "<AP Index> <activate>" },
+	{ "wifi_getFTMobilityDomainID",			1, "<AP Index>" },
+	{ "wifi_setFTMobilityDomainID",			2, "<AP Index> <domain>" },
+	{ "wifi_getFTResourceRequestSupported",		1, "<AP Index>" },
+	{ "wifi_setFTResourceRequestSupported",		2, "<AP Index> <supported>" },
+	{ "wifi_getFTR0KeyLifetime",			1, "<AP Index>" },
+	{ "wifi_setFTR0KeyLifetime",			2, "<AP Index> <key_lifetime>" },
+	{ "wifi_getFTR0KeyHolderID",			1, "<AP Index>" },
+	{ "wifi_setFTR0KeyHolderID",			2, "<AP Index> <keyHolderID>" },
+	{ "wifi_getFTR1KeyHolderID",			1, "<AP Index>" },
+	{ "wifi_setFTR1KeyHolderID",			2, "<AP Index> <keyHolderID>" },
+	{ "wifi_pushApFastTransitionConfig",		4, "<support> <mobilityDomain> <overDS> \
+		<r0KeyLifeTime>" },
 #endif // endif
-    { "wifi_setBandSteeringEnable",	                    1, "<Enable/Disable(0/1)>" },
-    { "wifi_removeApSecVaribles",	                    1, "<AP Index>" },
-    { "wifi_disableApEncryption",	                    1, "<AP Index>" },
-    { "wifi_setApWpsButtonPush",	                    1, "<AP Index>" },
-    { "wifi_cancelApWPS",	                            1, "<AP Index>" },
-    { "wifi_applyRadioSettings",	                    1, "<RadioIndex>" },
-    { "wifi_delApAclDevices",	                        1, "<AP Index>" },
-    { "wifi_setBandSteeringApGroup",	                1, "<AP Indexes(E.g: 0,2,5)>" },
-    { "wifi_getNeighboringWiFiDiagnosticResult2",	    1, "<RadioIndex>" },
-    { "wifi_getNeighboringWiFiStatus",	                1, "<AP Index>" },
-    { "wifi_setApSecurityReset",                        3, "<AP Index> <commit 0/1> <restart 0/1>" },
-    { "wifi_applySSIDSettings",	                        1, "<SSID>" },
-    { "wifi_apAssociatedDevice_callback_register",	    0, "" },
-    { "wifi_newApAssociatedDevice_callback_register",   0, "" },
-    { "wifi_apAuthEvent_callback_register",             0, "" },
-    { "wifi_apDisassociatedDevice_callback_register",   0, "" },
-    { "wifi_apDeAuthEvent_callback_register",	        0, "" },
-    { "wifi_steering_event_callback_register",	        0, "" },
-    { "wifi_steering_setGroup",	                        11, "<groupIndex> <AP Index> <utilCheckInteval> ... (total 11 arguments)" },
-    { "wifi_steering_clientSet",	                    11, "<groupIndex> <AP Index> <client mac> <rssiProbeHWM etc. 8 parameters>" },
-    { "wifi_steering_clientRemove",	                    3, "<groupIndex> <AP Index> <client mac>" },
-    { "wifi_steering_clientMeasure",	                3, "<groupIndex> <AP Index> <client mac>" },
-    { "wifi_steering_clientDisconnect",	                5, "<groupIndex> <AP Index> <client mac> <type> <reason>" },
-    { "wifi_getRadioClientInactivityTimeout",	        1, "<RadioIndex>" },
+	{ "wifi_setBandSteeringEnable",			1, "<Enable/Disable(0/1)>" },
+	{ "wifi_removeApSecVaribles",			1, "<AP Index>" },
+	{ "wifi_disableApEncryption",			1, "<AP Index>" },
+	{ "wifi_setApWpsButtonPush",			1, "<AP Index>" },
+	{ "wifi_cancelApWPS",				1, "<AP Index>" },
+	{ "wifi_applyRadioSettings",			1, "<RadioIndex>" },
+	{ "wifi_delApAclDevices",			1, "<AP Index>" },
+	{ "wifi_setBandSteeringApGroup",		1, "<AP Indexes(E.g: 0,2,5)>" },
+	{ "wifi_getNeighboringWiFiDiagnosticResult2",	1, "<RadioIndex>" },
+	{ "wifi_getNeighboringWiFiStatus",		1, "<AP Index>" },
+	{ "wifi_setApSecurityReset",			3, "<AP Index> <commit 0/1> <restart 0/1>"
+		},
+	{ "wifi_applySSIDSettings",			1, "<SSID>" },
+	{ "wifi_apAssociatedDevice_callback_register",	0, "" },
+	{ "wifi_newApAssociatedDevice_callback_register",	0, "" },
+	{ "wifi_apAuthEvent_callback_register",		0, "" },
+	{ "wifi_apDisassociatedDevice_callback_register",	0, "" },
+	{ "wifi_apDeAuthEvent_callback_register",	0, "" },
+	{ "wifi_steering_event_callback_register",	0, "" },
+	{ "wifi_steering_setGroup",			11, "<groupIndex> <AP Index> <utilCheckInteval> ... (total 11 arguments)" },
+	{ "wifi_steering_clientSet",			11, "<groupIndex> <AP Index> <client mac> \
+		<rssiProbeHWM etc. 8 parameters>" },
+	{ "wifi_steering_clientRemove",			3, "<groupIndex> <AP Index> <client mac>" },
+	{ "wifi_steering_clientMeasure",		3, "<groupIndex> <AP Index> <client mac>" },
+	{ "wifi_steering_clientDisconnect",		5, "<groupIndex> <AP Index> <client mac> \
+		<type> <reason>" },
+	{ "wifi_getRadioClientInactivityTimeout",	1, "<RadioIndex>" },
 #if WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12
-    /* 802.11K api */       /* 802.11K api */
-    { "wifi_RMBeaconRequest_callback_register",	        0, "" },
-    { "wifi_RMBeaconRequest_callback_unregister",       0, "" },
-    { "wifi_setRMBeaconRequest",	                    7, "<AP Index> <PeerMACAddress> <opClass> <Channel> <RandomizationInterval> <Duration> <req_MeasurementMode> [<bssid> <numRepetitions>]" },
-    { "wifi_cancelRMBeaconRequest",	                    2, "<AP Index> <Dialog Token>" },
-    { "wifi_getRMCapabilities",	                        1, "<Peer mac>" },
-    { "wifi_setNeighborReports",	                    2, "<AP Index> <cnt> [<bssid1> <bssid1 info> <regulatory1> <channel1> <phytype1>] cnt times" },
-    { "wifi_setNeighborReportActivation",	            2, "<AP Index> <Activate(0/1)>" },
-    { "wifi_getNeighborReportActivation",	            1, "<AP Index>" },
+	/* 802.11K api */
+	{ "wifi_RMBeaconRequest_callback_register",	0, "" },
+	{ "wifi_RMBeaconRequest_callback_unregister",	0, "" },
+	{ "wifi_setRMBeaconRequest",			7, "<AP Index> <PeerMACAddress> <opClass> \
+		<Channel> <RandomizationInterval> <Duration> <req_MeasurementMode> \
+		[<bssid> <numRepetitions>]" },
+	{ "wifi_cancelRMBeaconRequest",			2, "<AP Index> <Dialog Token>" },
+	{ "wifi_getRMCapabilities",			1, "<Peer mac>" },
+	{ "wifi_setNeighborReports",			2, "<AP Index> <cnt> [<bssid1> \
+		<bssid1 info> <regulatory1> <channel1> <phytype1>] cnt times" },
+	{ "wifi_setNeighborReportActivation",		2, "<AP Index> <Activate(0/1)>" },
+	{ "wifi_getNeighborReportActivation",		1, "<AP Index>" },
 #endif /* WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12 */
-    { "wifi_getRadioDCSSupported",	                    1, "<RadioIndex>" },
-    { "wifi_getRadioDCSEnable",	                        1, "<RadioIndex>" },
-    { "wifi_BTMQueryRequest_callback_register",	        0, "" },
-    { "wifi_setBTMRequest",	                            4, "<AP Index> <PeerMACAddress> <Token> mode [<url_len> <url>] <num-candidate> <len1> <candidate1 like 00904C1DA06100000000162400> [<len2> <candidate2>...]" },
-    { "wifi_getBSSTransitionImplemented",	            1, "<RadioIndex>" },
-    { "wifi_setBSSTransitionActivation",	            2, "<AP Index> <0|1>" },
-    { "wifi_getBSSTransitionActivation",	            1, "<AP Index>" },
-    { "wifi_getBTMClientCapabilityList",	            2, "<AP Index> <MAC 1> [<MAC 2> ...]" },
-    { "wifi_getApInterworkingElement",	                    1, "<AP Index>" },
-    { "wifi_getInterworkingAccessNetworkType",	        1, "<AP Index>" },
-    { "wifi_getApInterworkingServiceCapability",	    1, "<AP Index>" },
-    { "wifi_getApInterworkingServiceEnable",	        1, "<AP Index>" },
+	{ "wifi_getRadioDCSSupported",			1, "<RadioIndex>" },
+	{ "wifi_getRadioDCSEnable",			1, "<RadioIndex>" },
+	{ "wifi_BTMQueryRequest_callback_register",	0, "" },
+	{ "wifi_setBTMRequest",				4, "<AP Index> <PeerMACAddress> <Token> \
+		mode [<url_len> <url>] <num-candidate> <len1> <candidate1 like \
+		00904C1DA06100000000162400> [<len2> <candidate2>...]" },
+	{ "wifi_getBSSTransitionImplemented",		1, "<RadioIndex>" },
+	{ "wifi_setBSSTransitionActivation",		2, "<AP Index> <0|1>" },
+	{ "wifi_getBSSTransitionActivation",		1, "<AP Index>" },
+	{ "wifi_getBTMClientCapabilityList",		2, "<AP Index> <MAC 1> [<MAC 2> ...]" },
+	{ "wifi_getApInterworkingElement",		1, "<AP Index>" },
+	{ "wifi_getInterworkingAccessNetworkType",	1, "<AP Index>" },
+	{ "wifi_getApInterworkingServiceCapability",	1, "<AP Index>" },
+	{ "wifi_getApInterworkingServiceEnable",	1, "<AP Index>" },
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 19)
-    { "wifi_pushApHotspotElement",	                    2, "<AP Index> <0|1>" },
-    { "wifi_getApHotspotElement",	                    1, "<AP Index>" },
-    { "wifi_pushApRoamingConsortiumElement",	        2, "<AP Index> <ouilist>" },
-    { "wifi_getApRoamingConsortiumElement",	            1, "<AP Index>" },
+	{ "wifi_pushApHotspotElement",			2, "<AP Index> <0|1>" },
+	{ "wifi_getApHotspotElement",			1, "<AP Index>" },
+	{ "wifi_pushApRoamingConsortiumElement",	2, "<AP Index> <ouilist>" },
+	{ "wifi_getApRoamingConsortiumElement",		1, "<AP Index>" },
 #endif /* WIFI_HAL_MINOR_VERSION >= 19 */
 #if WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION >= 16
 #if WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION >= 19
-    { "wifi_mgmt_frame_callbacks_register",	            1, "<AP Index>" },
+	{ "wifi_mgmt_frame_callbacks_register",		1, "<AP Index>" },
 #else
-    { "wifi_dpp_frame_received_callbacks_register",	    1, "<AP Index>" },
+	{ "wifi_dpp_frame_received_callbacks_register",	1, "<AP Index>" },
 #endif /* WIFI_HAL_MINOR_VERSION >= 19 */
-    { "wifi_sendActionFrame",	                        4, "<AP Index> <PeerMACAddress> <Channel> <Action Frame Hex String>" },
+	{ "wifi_sendActionFrame",			4, "<AP Index> <PeerMACAddress> <Channel> \
+		<Action Frame Hex String>" },
 #endif // endif
 #if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
 	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
-    { "wifi_getRadioMode",	                            1, "<RadioIndex>" },
-    { "wifi_setRadioMode",	                            3, "<RadioIndex> <channel mode> <pure mode>" },
-    { "wifi_setDownlinkDataAckType",	                    2, "<RadioIndex> <ack_type>" },
-    { "wifi_setDownlinkMuType",	                            2, "<RadioIndex> <ack_type>" },
-    { "wifi_getDownlinkMuType",	                            1, "<RadioIndex>" },
-    { "wifi_setUplinkMuType",	                            2, "<RadioIndex> <ack_type>" },
-    { "wifi_getUplinkMuType",	                            1, "<RadioIndex>" },
-    { "wifi_setGuardInterval",	                            2, "<RadioIndex> <guard interval>" },
-    { "wifi_getGuardInterval",	                            1, "<RadioIndex>" },
-    { "wifi_setBSSColorEnabled",	                    2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_getBSSColorEnabled",	                    1, "<AP Index>" },
-    { "wifi_getBSSColor",	                            1, "<AP Index>" },
-    { "wifi_getTWTParams",	                            1, "<AP Index>" },
-    { "wifi_get80211axDefaultParameters",               1, "<AP Index>" },
+	{ "wifi_getRadioMode",				1, "<RadioIndex>" },
+	{ "wifi_setRadioMode",				3, "<RadioIndex> <channel mode> \
+		<pure mode>" },
+	{ "wifi_setDownlinkDataAckType",		2, "<RadioIndex> <ack_type>" },
+	{ "wifi_setDownlinkMuType",			2, "<RadioIndex> <ack_type>" },
+	{ "wifi_getDownlinkMuType",			1, "<RadioIndex>" },
+	{ "wifi_setUplinkMuType",			2, "<RadioIndex> <ack_type>" },
+	{ "wifi_getUplinkMuType",			1, "<RadioIndex>" },
+	{ "wifi_setGuardInterval",			2, "<RadioIndex> <guard interval>" },
+	{ "wifi_getGuardInterval",			1, "<RadioIndex>" },
+	{ "wifi_setBSSColorEnabled",			2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_getBSSColorEnabled",			1, "<AP Index>" },
+	{ "wifi_getBSSColor",				1, "<AP Index>" },
+	{ "wifi_getTWTParams",				1, "<AP Index>" },
+	{ "wifi_get80211axDefaultParameters",		1, "<AP Index>" },
 #endif // endif
-    { "wifi_setApEnable",	                            2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_pushRadioChannel",	                        2, "<RadioIndex> <Channel>" },
-    { "wifi_setRadioDcsScanning",	                    2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setApBasicAuthenticationMode",	            2, "<AP Index> <Authentication Mode>" },
-    { "wifi_setApWpaEncryptionMode",	                2, "<AP Index> <Encryption Mode>" },
-    { "wifi_setApWpsDevicePIN",	                        2, "<AP Index> <PIN>" },
-    { "wifi_setRadio11nGreenfieldEnable",	            2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setApWpsEnable",	                        2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioBasicDataTransmitRates",	        2, "<RadioIndex> <TransmitRates(E.g: 6,54)>" },
-    { "wifi_setRadioOperatingChannelBandwidth",	        2, "<RadioIndex> <Bandwidth(E.g: 20MHz)>" },
-    { "wifi_setApWpsConfigMethodsEnabled",	            2, "<AP Index> <ConfigMethodsEnabled (E.g: PushButton/PIN)>" },
-    { "wifi_setRadioChannel",	                        2, "<RadioIndex> <Channel>" },
-    { "wifi_setRadioAutoChannelEnable",	                2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioEnable",	                        2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioTransmitPower",	                    2, "<RadioIndex> <TransmitPower>" },
-    { "wifi_setApDTIMInterval",	                        2, "<AP Index> <DTIM-Interval>" },
-    { "wifi_setRadioCtsProtectionEnable",	            2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioObssCoexistenceEnable",	            2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioFragmentationThreshold",	        2, "<AP Index> <Threshold>" },
-    { "wifi_setRadioSTBCEnable",	                    2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioAMSDUEnable",	                    2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setRadioGuardInterval",	                    2, "<RadioIndex> <Guard-Interval(E.g:auto/400/800)>" },
-    { "wifi_setRadioTxChainMask",	                    2, "<RadioIndex> <NumberStreams>" },
-    { "wifi_setRadioRxChainMask",	                    2, "<RadioIndex> <NumberStreams>" },
-    { "wifi_setSSIDName",	                            2, "<AP Index> <SSID String>" },
-    { "wifi_pushSSID",	                                2, "<AP Index> <SSID String>" },
-    { "wifi_setApSsidAdvertisementEnable",	            2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_pushSsidAdvertisementEnable",	            2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setApSecurityPreSharedKey",	                2, "<AP Index> <PreSharedKey>" },
-    { "wifi_setApWpsEnrolleePin",	                    2, "<AP Index> <WPS PIN>" },
-    { "wifi_setApWmmEnable",	                        2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setApWmmUapsdEnable",	                    2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setApBeaconInterval",	                    2, "<AP Index> <Beacon Interval>" },
-    { "wifi_setRadioExtChannel",	                    2, "<RadioIndex> <Extension Channel String>" },
-    { "wifi_addApAclDevice",	                        2, "<AP Index> <MAC Address>" },
-    { "wifi_setBandSteeringBandUtilizationThreshold",	2, "<RadioIndex> <BUThreshold>" },
-    { "wifi_setRadioDCSChannelPool",	                2, "<RadioIndex> <Channel-Pool>" },
-    { "wifi_setSSIDEnable",	                            2, "<SSID> <Enable/Disable(0/1)>" },
-    { "wifi_setApSecurityModeEnabled",	                2, "<AP Index> <SecurityMode>" },
-    { "wifi_setApSecurityKeyPassphrase",	            2, "<AP Index> <PassPhrase>" },
-    { "wifi_setApIsolationEnable",	                    2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setApRadioIndex",	                        2, "<AP Index> <RadioIndex>" },
-    { "wifi_setBandSteeringRSSIThreshold",	            2, "<RadioIndex> <BandSteeringRSSIThreshold>" },
-    { "wifi_setBandSteeringPhyRateThreshold",	        2, "<RadioIndex> <PhyRateThreshold>" },
-    { "wifi_setApSecurityMFPConfig",	                2, "<AP Index> <MFP config(E.g: Disabled/Optional/Required)>" },
-    { "wifi_delApAclDevice",	                        2, "<AP Index> <MAC Address>" },
-    { "wifi_setInterworkingAccessNetworkType",	        2, "<AP Index> <Network Type>" },
-    { "wifi_setApInterworkingServiceEnable",	        2, "<AP Index> <Enable/Disable(0/1)>" },
-    { "wifi_setApMacAddressControlMode",	            2, "<AP Index> <FilterMode>" },
-    { "wifi_getApDeviceRSSI",	                        2, "<AP Index> <MAC Address of STA>" },
-    { "wifi_getApDeviceRxrate",	                        2, "<AP Index> <MAC Address of STA>" },
-    { "wifi_getApDeviceTxrate",	                        2, "<AP Index> <MAC Address of STA>" },
-    { "wifi_getRadioDcsChannelMetrics",	                1, "<RadioIndex>" },
-    { "wifi_setApManagementFramePowerControl",	        2, "<AP Index> <Power in dBM>" },
-    { "wifi_setApBeaconRate",	                        2, "<AP Index> <Beacon Rate>" },
-    { "wifi_setApBeaconType",	                        2, "<AP Index> <Beacon String (None/Basic/WPA/11i/WPAand11i)>" },
-    { "wifi_getApAssociatedDeviceRxTxStatsResult",	    2, "<AP Index> <Client MAC>" },
-    { "wifi_setApScanFilter",	                        3, "<AP Index> <Mode> <ESS-ID>" },
-    { "wifi_setApCsaDeauth",	                        2, "<AP Index> <Mode>" },
-    { "wifi_kickApAssociatedDevice",	                2, "<AP Index> <Client MAC>" },
-    { "wifi_setRadioDCSEnable",                         2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setApWmmOgAckPolicy",	                    3, "<AP Index> <Class> <AckPolicy>" },
-    { "wifi_setRadioDCSScanTime",	                    3, "<RadioIndex> <interval in secs> <dwell in ms>" },
-    { "wifi_setApSecuritySecondaryRadiusServer",	    4, "<AP Index> <IPAddress> <Port> <Radius SecretKey>" },
-    { "wifi_setApSecurityRadiusServer",	                4, "<AP Index> <IPAddress> <Port> <Radius SecretKey>" },
-    { "wifi_createAp",	                                4, "<AP Index> <radioIndex> <E-SSID> <Hide-SSID> " },
-    { "wifi_pushRadioChannel2",	                        4, "<RadioIndex> <Channel> <Channel-Width> <CSA Beacon Count>" },
-    { "wifi_setRadioChannelMode",	                    5, "<RadioIndex> <Channel Mode> <802.11g> <802.11n> <802.11a,c>(E.g: wifi_setRadioChannelMode 0 11A 1 1 0)" },
-    { "wifi_startNeighborScan",	                        5, "<AP Index> <Scan Mode> <Dwell Time> <Channel Number> <list of channels>" },
-    { "wifi_pushApInterworkingElement",	                11, "<AP Index> <InterworkingEnabled> <Access N/W Type> <Internet Available> <asra> <esr> <uesa> <venueOptionPresent> <venueGroup> <venueType> <HESSID OptionPresent> <HESSID>" },
-    { "wifi_setRadioTrafficStatsMeasure",	            3, "<RadioIndex> <Radio Statistics Measuring Rate> <Radio Statistics Measuring Interval>" },
-    { "wifi_setRadioTrafficStatsRadioStatisticsEnable", 2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_getRadioStatsReceivedSignalLevel",	        2, "<RadioIndex> <Signal Index>" },
-    { "wifi_getRadioWifiTrafficStats",	                1, "<RadioIndex>" },
-    { "wifi_getSSIDTrafficStats",                       1, "<AP Index>" },
-    { "wifi_setRadioStatsEnable",                       2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_getRadioStatsEnable",	                1, "<RadioIndex>" },
-    { "wifi_stopHostApd",                               0, "" },
-    { "wifi_startHostApd",                              0, "" },
-    { "wifi_getApWmmEnable",                            1, "<AP Index>" },
-    { "wifi_setLED",                                    2, "<RadioIndex> <Enable/Disable(0/1)>" },
-    { "wifi_setApAuthMode",                             2, "<RadioIndex> <Mode>" },
-    { "wifi_setRadioCountryCode",                       2, "<RadioIndex> <coutry code>" },
-    { "wifi_getRadioAutoChannelRefreshPeriodSupported", 1, "<RadioIndex>" },
-    { "wifi_getRadioAutoChannelRefreshPeriod",          1, "<RadioIndex>" },
-    { "wifi_setRadioAutoChannelRefreshPeriod",          2, "<RadioIndex> <RefreshPeriod" },
-    { "wifi_setRadioMCS",                               2, "<RadioIndex> <MCS index>" },
-    { "wifi_getRadioMCS",                               1, "<RadioIndex>" },
-    { "wifi_getRadioIEEE80211hSupported",               1, "<RadioIndex>" },
-    { "wifi_getRadioIEEE80211hEnabled",                 1, "<RadioIndex" },
-    { "wifi_setRadioIEEE80211hEnabled",                 2, "<RadioIndex> <Enable/Disable(0/1)" },
-    { "wifi_getRadioBeaconPeriod",                      1, "<RadioIndex>" },
-    { "wifi_setRadioBeaconPeriod",                      2, "<RadioIndex> <BeaconPerios in ms>" },
-    { "wifi_getSSIDMACAddress",                         1, "<RadioIndex>" },
-    { "wifi_getApRtsThresholdSupported",                1, "<AP Index>" },
-    { "wifi_kickApAclAssociatedDevices",                1, "<AP Index>" },
-    { "wifi_getApRetryLimit",                           1, "<AP Index" },
-    { "wifi_setApRetryLimit",                           2, "<AP Index> <Retry number>" },
-    { "wifi_getApWMMCapability",                        1, "<AP Index>" },
-    { "wifi_getApUAPSDCapability",                      1, "<AP Index>" },
-    { "wifi_getApWmmUapsdEnable",                       1, "<AP Index>" },
-    { "wifi_getApMaxAssociatedDevices",                 1, "<AP Index>" },
-    { "wifi_setApMaxAssociatedDevices",                 2, "<AP Index> <maxDevices>" },
-    { "wifi_setApBridgeInfo",                           4, "<AP Index> <BridgeName> <IP> <Subnet>" },
-    { "wifi_getIndexFromName",                          1, "<SSID>" },
-    { "wifi_initRadio",                                 1, "<RadioIndex>" },
-    { "wifi_setApRtsThreshold",                         2, "<RadioIndex> <Threshold>" },
-    { "wifi_getRadioDfsSupport",                        1, "<RadioIndex>" },
-    { "wifi_getRadioDfsEnable",                         1, "<RadioIndex>" },
-    { "wifi_setRadioDfsEnable",                         2, "<RadioIndex> <Enable/Disable(0/1)" },
-    { "wifi_setRadioDfsRefreshPeriod",			2, "<RadioIndex> <RefreshPeriod(seconds)" },
-    { "wifi_setApAssociatedDevicesHighWatermarkThreshold", 2, "<AP Index> <Threshold>" },
-    { "wifi_getRadioDfsMoveBackEnable",                 1, "<RadioIndex>" },
-    { "wifi_setRadioDfsMoveBackEnable",                 2, "<RadioIndex> <Enable/Disable(0/1)" },
+	{ "wifi_setApEnable",				2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_pushRadioChannel",			2, "<RadioIndex> <Channel>" },
+	{ "wifi_setRadioDcsScanning",			2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setApBasicAuthenticationMode",		2, "<AP Index> <Authentication Mode>" },
+	{ "wifi_setApWpaEncryptionMode",		2, "<AP Index> <Encryption Mode>" },
+	{ "wifi_setApWpsDevicePIN",			2, "<AP Index> <PIN>" },
+	{ "wifi_setRadio11nGreenfieldEnable",		2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setApWpsEnable",			2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioBasicDataTransmitRates",	2, "<RadioIndex> \
+		<TransmitRates(E.g: 6,54)>" },
+	{ "wifi_setRadioOperatingChannelBandwidth",	2, "<RadioIndex> <Bandwidth(E.g: 20MHz)>" },
+	{ "wifi_setApWpsConfigMethodsEnabled",		2, "<AP Index> <ConfigMethodsEnabled \
+		(E.g: PushButton/PIN)>" },
+	{ "wifi_setRadioChannel",			2, "<RadioIndex> <Channel>" },
+	{ "wifi_setRadioAutoChannelEnable",		2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioEnable",			2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioTransmitPower",			2, "<RadioIndex> <TransmitPower>" },
+	{ "wifi_setApDTIMInterval",			2, "<AP Index> <DTIM-Interval>" },
+	{ "wifi_setRadioCtsProtectionEnable",		2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioObssCoexistenceEnable",		2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioFragmentationThreshold",	2, "<AP Index> <Threshold>" },
+	{ "wifi_setRadioSTBCEnable",			2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioAMSDUEnable",			2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setRadioGuardInterval",			2, "<RadioIndex> <Guard-Interval \
+		(E.g:auto/400/800)>" },
+	{ "wifi_setRadioTxChainMask",			2, "<RadioIndex> <NumberStreams>" },
+	{ "wifi_setRadioRxChainMask",			2, "<RadioIndex> <NumberStreams>" },
+	{ "wifi_setSSIDName",				2, "<AP Index> <SSID String>" },
+	{ "wifi_pushSSID",				2, "<AP Index> <SSID String>" },
+	{ "wifi_setApSsidAdvertisementEnable",		2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_pushSsidAdvertisementEnable",		2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setApSecurityPreSharedKey",		2, "<AP Index> <PreSharedKey>" },
+	{ "wifi_setApWpsEnrolleePin",			2, "<AP Index> <WPS PIN>" },
+	{ "wifi_setApWmmEnable",			2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setApWmmUapsdEnable",			2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setApBeaconInterval",			2, "<AP Index> <Beacon Interval>" },
+	{ "wifi_setRadioExtChannel",			2, "<RadioIndex> \
+		<Extension Channel String>" },
+	{ "wifi_addApAclDevice",			2, "<AP Index> <MAC Address>" },
+	{ "wifi_setBandSteeringBandUtilizationThreshold",	2, "<RadioIndex> <BUThreshold>" },
+	{ "wifi_setRadioDCSChannelPool",		2, "<RadioIndex> <Channel-Pool>" },
+	{ "wifi_setSSIDEnable",				2, "<SSID> <Enable/Disable(0/1)>" },
+	{ "wifi_setApSecurityModeEnabled",		2, "<AP Index> <SecurityMode>" },
+	{ "wifi_setApSecurityKeyPassphrase",		2, "<AP Index> <PassPhrase>" },
+	{ "wifi_setApIsolationEnable",			2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setApRadioIndex",			2, "<AP Index> <RadioIndex>" },
+	{ "wifi_setBandSteeringRSSIThreshold",		2, "<RadioIndex> \
+		<BandSteeringRSSIThreshold>" },
+	{ "wifi_setBandSteeringPhyRateThreshold",	2, "<RadioIndex> <PhyRateThreshold>" },
+	{ "wifi_setApSecurityMFPConfig",		2, "<AP Index> <MFP config(E.g: Disabled/\
+		Optional/Required)>" },
+	{ "wifi_delApAclDevice",			2, "<AP Index> <MAC Address>" },
+	{ "wifi_setInterworkingAccessNetworkType",	2, "<AP Index> <Network Type>" },
+	{ "wifi_setApInterworkingServiceEnable",	2, "<AP Index> <Enable/Disable(0/1)>" },
+	{ "wifi_setApMacAddressControlMode",		2, "<AP Index> <FilterMode>" },
+	{ "wifi_getApDeviceRSSI",			2, "<AP Index> <MAC Address of STA>" },
+	{ "wifi_getApDeviceRxrate",			2, "<AP Index> <MAC Address of STA>" },
+	{ "wifi_getApDeviceTxrate",			2, "<AP Index> <MAC Address of STA>" },
+	{ "wifi_getRadioDcsChannelMetrics",		1, "<RadioIndex>" },
+	{ "wifi_setApManagementFramePowerControl",	2, "<AP Index> <Power in dBM>" },
+	{ "wifi_setApBeaconRate",			2, "<AP Index> <Beacon Rate>" },
+	{ "wifi_setApBeaconType",			2, "<AP Index> <Beacon String (None/Basic/\
+		WPA/11i/WPAand11i)>" },
+	{ "wifi_getApAssociatedDeviceRxTxStatsResult",	2, "<AP Index> <Client MAC>" },
+	{ "wifi_setApScanFilter",			3, "<AP Index> <Mode> <ESS-ID>" },
+	{ "wifi_setApCsaDeauth",			2, "<AP Index> <Mode>" },
+	{ "wifi_kickApAssociatedDevice",		2, "<AP Index> <Client MAC>" },
+	{ "wifi_setRadioDCSEnable",			2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setApWmmOgAckPolicy",			3, "<AP Index> <Class> <AckPolicy>" },
+	{ "wifi_setRadioDCSScanTime",			3, "<RadioIndex> <interval in secs> <dwell\
+		in ms>" },
+	{ "wifi_setApSecuritySecondaryRadiusServer",	4, "<AP Index> <IPAddress> <Port> <Radius\
+		SecretKey>" },
+	{ "wifi_setApSecurityRadiusServer",		4, "<AP Index> <IPAddress> <Port> <Radius\
+		SecretKey>" },
+	{ "wifi_createAp",				4, "<AP Index> <radioIndex> <E-SSID> <Hide\
+		-SSID> " },
+	{ "wifi_pushRadioChannel2",			4, "<RadioIndex> <Channel> <Channel-Width>\
+		<CSA Beacon Count>" },
+	{ "wifi_setRadioChannelMode",			5, "<RadioIndex> <Channel Mode> <802.11g>\
+		<802.11n> <802.11a,c>(E.g: wifi_setRadioChannelMode 0 11A 1 1 0)" },
+	{ "wifi_startNeighborScan",			5, "<AP Index> <Scan Mode> <Dwell Time>\
+		<Channel Number> <list of channels>" },
+	{ "wifi_pushApInterworkingElement",		11, "<AP Index> <InterworkingEnabled>\
+		<Access N/W Type> <Internet Available> <asra> <esr> <uesa> <venueOptionPresent>\
+		<venueGroup> <venueType> <HESSID OptionPresent> <HESSID>" },
+	{ "wifi_setRadioTrafficStatsMeasure",		3, "<RadioIndex> <Radio Statistics\
+		Measuring Rate> <Radio Statistics Measuring Interval>" },
+	{ "wifi_setRadioTrafficStatsRadioStatisticsEnable",	2, "<RadioIndex> <Enable/Disable\
+(0/1)>" },
+	{ "wifi_getRadioStatsReceivedSignalLevel",	2, "<RadioIndex> <Signal Index>" },
+	{ "wifi_getRadioWifiTrafficStats",		1, "<RadioIndex>" },
+	{ "wifi_getSSIDTrafficStats",			1, "<AP Index>" },
+	{ "wifi_setRadioStatsEnable",			2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_getRadioStatsEnable",			1, "<RadioIndex>" },
+	{ "wifi_stopHostApd",				0, "" },
+	{ "wifi_startHostApd",				0, "" },
+	{ "wifi_getApWmmEnable",			1, "<AP Index>" },
+	{ "wifi_setLED",				2, "<RadioIndex> <Enable/Disable(0/1)>" },
+	{ "wifi_setApAuthMode",				2, "<RadioIndex> <Mode>" },
+	{ "wifi_setRadioCountryCode",			2, "<RadioIndex> <coutry code>" },
+	{ "wifi_getRadioAutoChannelRefreshPeriodSupported",	1, "<RadioIndex>" },
+	{ "wifi_getRadioAutoChannelRefreshPeriod",	1, "<RadioIndex>" },
+	{ "wifi_setRadioAutoChannelRefreshPeriod",	2, "<RadioIndex> <RefreshPeriod" },
+	{ "wifi_setRadioMCS",				2, "<RadioIndex> <MCS index>" },
+	{ "wifi_getRadioMCS",				1, "<RadioIndex>" },
+	{ "wifi_getRadioIEEE80211hSupported",		1, "<RadioIndex>" },
+	{ "wifi_getRadioIEEE80211hEnabled",		1, "<RadioIndex" },
+	{ "wifi_setRadioIEEE80211hEnabled",		2, "<RadioIndex> <Enable/Disable(0/1)" },
+	{ "wifi_getRadioBeaconPeriod",			1, "<RadioIndex>" },
+	{ "wifi_setRadioBeaconPeriod",			2, "<RadioIndex> <BeaconPerios in ms>" },
+	{ "wifi_getSSIDMACAddress",			1, "<RadioIndex>" },
+	{ "wifi_getApRtsThresholdSupported",		1, "<AP Index>" },
+	{ "wifi_kickApAclAssociatedDevices",		1, "<AP Index>" },
+	{ "wifi_getApRetryLimit",			1, "<AP Index" },
+	{ "wifi_setApRetryLimit",			2, "<AP Index> <Retry number>" },
+	{ "wifi_getApWMMCapability",			1, "<AP Index>" },
+	{ "wifi_getApUAPSDCapability",			1, "<AP Index>" },
+	{ "wifi_getApWmmUapsdEnable",			1, "<AP Index>" },
+	{ "wifi_getApMaxAssociatedDevices",		1, "<AP Index>" },
+	{ "wifi_setApMaxAssociatedDevices",		2, "<AP Index> <maxDevices>" },
+	{ "wifi_setApBridgeInfo",			4, "<AP Index> <BridgeName> <IP> <Subnet>" },
+	{ "wifi_getIndexFromName",			1, "<SSID>" },
+	{ "wifi_initRadio",				1, "<RadioIndex>" },
+	{ "wifi_setApRtsThreshold",			2, "<RadioIndex> <Threshold>" },
+	{ "wifi_getRadioDfsSupport",			1, "<RadioIndex>" },
+	{ "wifi_getRadioDfsEnable",			1, "<RadioIndex>" },
+	{ "wifi_setRadioDfsEnable",			2, "<RadioIndex> <Enable/Disable(0/1)" },
+	{ "wifi_setRadioDfsRefreshPeriod",		2, "<RadioIndex> <RefreshPeriod(seconds)" },
+	{ "wifi_setApAssociatedDevicesHighWatermarkThreshold",	2, "<AP Index> <Threshold>" },
+#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
+	{ "wifi_getRadioDfsMoveBackEnable",		1, "<RadioIndex>" },
+	{ "wifi_setRadioDfsMoveBackEnable",		2, "<RadioIndex> <Enable/Disable(0/1)" },
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION  >= 17)
-    { "wifi_getApAssociatedClientDiagnosticResult",     2, "<AP Index> <Client MAC>" },
+	{ "wifi_getApAssociatedClientDiagnosticResult",	2, "<AP Index> <Client MAC>" },
 #endif // endif
-    { "wifi_setClientDetailedStatisticsEnable",         2, "<RadioIndex> <Enable/Disable(0/1)" },
+	{ "wifi_setClientDetailedStatisticsEnable",	2, "<RadioIndex> <Enable/Disable(0/1)" },
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 16)
 #ifdef _XF3_PRODUCT_REQ_
-    { "wifi_getVAPTelemetry",                           1, "<AP Index>" },
+	{ "wifi_getVAPTelemetry",			1, "<AP Index>" },
 #endif /* _XF3_PRODUCT_REQ_ */
 #endif /* (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 16) */
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION  >= 18)
-    { "wifi_getRadioPercentageTransmitPower",           1, "<RadioIndex>" },
+	{ "wifi_getRadioPercentageTransmitPower",	1, "<RadioIndex>" },
 #endif /* (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 18) */
-    { "wifi_getBandSteeringLog",                        1, "<Record Index>" },
-    { "wifi_apply",                                    0, "" },
-    { "wifi_init",                                     0, "" },
-    { NULL, 0, NULL },
+	{ "wifi_getBandSteeringLog",			1, "<Record Index>" },
+	{ "wifi_apply",					0, "" },
+	{ "wifi_init",					0, "" },
+	{ NULL,						0, NULL },
 };
 
 #if WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12
@@ -529,22 +568,23 @@
 #pragma pack(push, 1)
 // 802.11-2016 section 9.4.2.22.7
 typedef struct {
-    UCHAR               opClass;
-    UCHAR               channel;
-    ULLONG              startTime;
-    USHORT              duration;
-    UCHAR               frameInfo;
-    UCHAR               rcpi;
-    UCHAR               rsni;
-    bssid_t             bssid;
-    UCHAR               antenna;
-    UINT                tsf;
-    BOOL                wideBandWidthChannelPresent;
-    wifi_WideBWChannel_t    wideBandwidthChannel;
+	UCHAR			opClass;
+	UCHAR			channel;
+	ULLONG			startTime;
+	USHORT			duration;
+	UCHAR			frameInfo;
+	UCHAR			rcpi;
+	UCHAR			rsni;
+	bssid_t			bssid;
+	UCHAR			antenna;
+	UINT			tsf;
+	BOOL			wideBandWidthChannelPresent;
+	wifi_WideBWChannel_t	wideBandwidthChannel;
 } wifi_BeaconReport_cbtest_t;
 #pragma pack(pop)
 
-INT wifi_RMBeaconReport_callback_test_func(UINT apIndex, wifi_BeaconReport_t *out_struct, UINT *out_array_size, UCHAR *out_DialogToken);
+INT wifi_RMBeaconReport_callback_test_func(UINT apIndex, wifi_BeaconReport_t *out_struct,
+	UINT *out_array_size, UCHAR *out_DialogToken);
 INT wifi_getRMCapabilities(CHAR *peer, UCHAR out_Capabilities[5]);
 
 /* 802.11K api */
@@ -557,12 +597,12 @@
  * @brief wifi api set event parameters
  */
 typedef struct {
-    char          api_name[1024];
-    int           radioIndex;
-    char          api_data[1024];
+	char		api_name[1024];
+	int		radioIndex;
+	char		api_data[1024];
 } wifi_api_info_t;
 
-static int	wifi_api_socket = -1;
+static int  wifi_api_socket = -1;
 extern pthread_t cbThreadId;
 
 /* for Comcast/Plume WM */
@@ -611,8 +651,9 @@
 #if WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12
 /* 802.11K api */
 
-INT wifi_RMBeaconReport_callback_test_func(UINT apIndex, wifi_BeaconReport_t *out_struct, UINT *out_array_size, UCHAR *out_DialogToken) {
-
+INT wifi_RMBeaconReport_callback_test_func(UINT apIndex, wifi_BeaconReport_t *out_struct,
+	UINT *out_array_size, UCHAR *out_DialogToken)
+{
 	wifi_BeaconReport_cbtest_t *rm_bcnRep = (wifi_BeaconReport_cbtest_t *)out_struct;
 	UCHAR *ea;
 
@@ -642,11 +683,8 @@
 
 #define BTM_MAX_CANDIDATES 4
 
-INT wifi_BTMQueryRequest_callback_test_func(UINT apIndex,
-	CHAR peerMACAddress[6],
-	wifi_BTMQuery_t *inQueryFrame,
-	UINT inMemSize,
-	wifi_BTMRequest_t *inRequestFrame)
+INT wifi_BTMQueryRequest_callback_test_func(UINT apIndex, CHAR peerMACAddress[6],
+	wifi_BTMQuery_t *inQueryFrame, UINT inMemSize, wifi_BTMRequest_t *inRequestFrame)
 {
 	UCHAR *ptr = (UCHAR *)peerMACAddress;
 	printf("Called %s successfully inQueryFrame=%p\n", __FUNCTION__, inQueryFrame);
@@ -659,8 +697,7 @@
 	return 0;
 }
 
-INT wifi_BTMResponse_callback_test_func(UINT apIndex,
-	CHAR peerMACAddress[6],
+INT wifi_BTMResponse_callback_test_func(UINT apIndex, CHAR peerMACAddress[6],
 	wifi_BTMResponse_t *in_struct)
 {
 	UCHAR *ptr = (UCHAR *)peerMACAddress;
@@ -680,12 +717,8 @@
 /* prototype defined in wifi_hal.h
 typedef INT (* wifi_receivedMgmtFrame_callback)(INT apIndex, UCHAR *sta_mac, UCHAR *frame, UINT len, wifi_mgmtFrameType_t type, wifi_direction_t dir);
 */
-INT wifi_receivedMgmtFrame_callback_test_func(INT apIndex,
-	UCHAR *sta_mac,
-	UCHAR *frame,
-	UINT len,
-	wifi_mgmtFrameType_t type,
-	wifi_direction_t dir)
+INT wifi_receivedMgmtFrame_callback_test_func(INT apIndex, UCHAR *sta_mac, UCHAR *frame,
+	UINT len, wifi_mgmtFrameType_t type, wifi_direction_t dir)
 {
 	int i;
 
@@ -709,20 +742,18 @@
 /* DPP support, need some definition in new wifi_hal.h  */
 /* Format changed since 2.15
 typedef void (*wifi_dppAuthResponse_callback_t)(UINT apIndex,
-                                                mac_address_t sta,
-                                                UCHAR *frame,
-                                                UINT len);
+						mac_address_t sta,
+						UCHAR *frame,
+						UINT len);
 
 typedef void (*wifi_dppConfigRequest_callback_t)(UINT apIndex,
-                                                mac_address_t sta,
-                                                UCHAR token,
-                                                UCHAR *attribs,
-                                                UINT length);
+						mac_address_t sta,
+						UCHAR token,
+						UCHAR *attribs,
+						UINT length);
 */
 
-void wifi_dppAuthResponse_callback_test_func(UINT apIndex,
-	mac_address_t sta,
-	UCHAR *frame,
+void wifi_dppAuthResponse_callback_test_func(UINT apIndex, mac_address_t sta, UCHAR *frame,
 	UINT len)
 {
 	UCHAR *ptr = (UCHAR *)sta;
@@ -731,11 +762,8 @@
 			__FUNCTION__, apIndex, MAC_TO_MACF(ptr), len);
 }
 
-void wifi_dppConfigRequest_callback_test_func(UINT apIndex,
-	mac_address_t sta,
-	UCHAR token,
-	UCHAR *attribs,
-	UINT length)
+void wifi_dppConfigRequest_callback_test_func(UINT apIndex, mac_address_t sta, UCHAR token,
+	UCHAR *attribs, UINT length)
 {
 	UCHAR *ptr = (UCHAR *)sta;
 
@@ -760,1786 +788,1947 @@
 
 static int wifi_api_send_msg( wifi_api_info_t *p_apiInfo )
 {
-    int err = 0;
-    struct sockaddr_in sockaddr;
-    int sentBytes = 0;
-
-    if (wifi_api_socket < 0) {
-        memset(&sockaddr, 0, sizeof(sockaddr));
-        sockaddr.sin_family = AF_INET;
-        sockaddr.sin_port = htons(WIFI_API_EVENT_UDP_SPORT);
-        if (inet_aton(WIFI_API_EVENT_UDP_SIP, &sockaddr.sin_addr) == 0) {
-            printf("inet_aton() failed\n");
-            err = -1;
-            return err;
-        }
-
-        if (( wifi_api_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
-            printf("%s@%d Unable to create socket\n", __FUNCTION__, __LINE__ );
-            err = -1;
-        }
-        if ( err >= 0  && wifi_api_socket >= 0 ) {
-            sentBytes = sendto(wifi_api_socket, p_apiInfo, sizeof(wifi_api_info_t), 0, (struct sockaddr *)&sockaddr, sizeof(struct sockaddr_in));
-
-            //printf("UDP pkt sent; sendingBytes[%d], sentBytes[%d]\n", sizeof(wifi_api_info_t), sentBytes);
-            if (sentBytes != sizeof(wifi_api_info_t)) {
-                printf("UDP send failed; sendingBytes[%d], sentBytes[%d]\n", sizeof(wifi_api_info_t), sentBytes);
-            }
-        }
-    }
+	int err = 0;
+	struct sockaddr_in sockaddr;
+	int sentBytes = 0;
+
+	if (wifi_api_socket < 0) {
+		memset(&sockaddr, 0, sizeof(sockaddr));
+		sockaddr.sin_family = AF_INET;
+		sockaddr.sin_port = htons(WIFI_API_EVENT_UDP_SPORT);
+		if (inet_aton(WIFI_API_EVENT_UDP_SIP, &sockaddr.sin_addr) == 0) {
+			printf("inet_aton() failed\n");
+			err = -1;
+			return err;
+		}
+
+		if (( wifi_api_socket = socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) < 0) {
+			printf("%s@%d Unable to create socket\n", __FUNCTION__, __LINE__ );
+			err = -1;
+		}
+		if ( err >= 0  && wifi_api_socket >= 0 ) {
+			sentBytes = sendto(wifi_api_socket, p_apiInfo, sizeof(wifi_api_info_t), 0,
+				(struct sockaddr *)&sockaddr, sizeof(struct sockaddr_in));
+
+			//printf("UDP pkt sent; sendingBytes[%d], sentBytes[%d]\n", sizeof(wifi_api_info_t), sentBytes);
+			if (sentBytes != sizeof(wifi_api_info_t)) {
+				printf("UDP send failed; sendingBytes[%d], sentBytes[%d]\n",
+					sizeof(wifi_api_info_t), sentBytes);
+			}
+		}
+	}
 
 	if (wifi_api_socket >= 0) {
-        //printf("%s@%d: Close socket\n", __FUNCTION__, __LINE__ );
+		//printf("%s@%d: Close socket\n", __FUNCTION__, __LINE__ );
 		close(wifi_api_socket);
 		wifi_api_socket = -1;
 	}
-    return err;
+	return err;
 }
 
 void parse_mac(char *macstr, mac_address_t *macp) {
-    unsigned char *mac = &(*macp)[0];
-    int ret = sscanf(macstr, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",
-                     &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
-    if (ret != 6) {
-        printf("sscanf()=%d of mac address failed", ret);
-        exit(1);
-    }
+	unsigned char *mac = &(*macp)[0];
+	int ret = sscanf(macstr, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx",
+		&mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
+	if (ret != 6) {
+		printf("sscanf()=%d of mac address failed", ret);
+		exit(1);
+	}
 }
 
 BOOL printUsage(char *apiName, int numArgs, BOOL isCmd) {
-    int i = 0;
-    int validCmd = 0;
-    if (apiName) {
-        while (hal_cmd_table[i].api_name) {
-            if (!strcmp(hal_cmd_table[i].api_name, apiName)) {
-                validCmd = 1;
-
-                if ((numArgs < hal_cmd_table[i].num_args) || !isCmd) {
-                    printf("\nUsage : wifi_api %s %s\n\n", apiName, hal_cmd_table[i].usage);
-                    return FALSE;
-                } else {
-                    return TRUE;
-                }
-            }
-            i++;
-        }
-        if (!validCmd) {
-            printf("%s : Not supported\n\n", apiName);
-            return FALSE;
-        }
-    } else {
-        printf("\n****************HAL API's****************\n");
-        printf("*****************************************\n\n");
-        //Print all api's
-        while (hal_cmd_table[i].api_name) {
-            printf("%-50s    %s\n", hal_cmd_table[i].api_name, hal_cmd_table[i].usage);
-            i += 1;
-        }
-        return FALSE;
-    }
-    return FALSE;
+	int i = 0;
+	int validCmd = 0;
+	if (apiName) {
+		while (hal_cmd_table[i].api_name) {
+			if (!strcmp(hal_cmd_table[i].api_name, apiName)) {
+				validCmd = 1;
+
+				if ((numArgs < hal_cmd_table[i].num_args) || !isCmd) {
+					printf("\nUsage : wifi_api %s %s\n\n", apiName,
+						hal_cmd_table[i].usage);
+					return FALSE;
+				} else {
+					return TRUE;
+				}
+			}
+			i++;
+		}
+		if (!validCmd) {
+			printf("%s : Not supported\n\n", apiName);
+			return FALSE;
+		}
+	} else {
+		printf("\n****************HAL API's****************\n");
+		printf("*****************************************\n\n");
+		//Print all api's
+		while (hal_cmd_table[i].api_name) {
+			printf("%-50s	%s\n", hal_cmd_table[i].api_name, hal_cmd_table[i].usage);
+			i += 1;
+		}
+		return FALSE;
+	}
+	return FALSE;
 }
 
 #ifdef RDKB_WLDM
 extern int wldm_init(int radios);
 #endif /* RDKB_WLDM */
 extern INT wifi_getRadioDfsMoveBackEnable(INT radioIndex, BOOL *output_bool);
+
 int main(int argc, char **argv) {
+	INT ret = 0;
+	INT index = 0;
+
+	FILE *fptr = fopen(WLAN_APPS_LOG_FILE, "a+");
+	if (fptr == NULL) {
+		printf("Could not open file");
+		return 0;
+	}
+	if (argc > 1) {
+		int i = 0;
+		time_t mytime;
+		mytime = time(NULL);
+		fprintf(fptr, "%s ==> %s called", ctime(&mytime), argv[1]);
+		if (argc > 2) {
+			fprintf(fptr, " with parameters");
+			for (i = 2; i < argc; i++) {
+				fprintf(fptr, " %s", argv[i]);
+			}
+		}
+		fprintf(fptr, "\n");
+	}
+	fclose(fptr);
 
-    INT ret = 0;
-    INT index = 0;
+	if (argc == 1) {
+		printf("\nwifi_api : missing arguments\n");
+		printf("\nTry wifi_api --help or wifi_api --help <API-NAME> for more options\n\n");
+		return 0;
+	}
+	if (((argc >= 2) && !strncmp(argv[1], "--help", 6)) || ((argc > 2) &&
+		!strncmp(argv[2], "--help", 6))) {
+		if (argc > 2) {
+			/* wifi_api --help <API-NAME> or wifi_api <API-NAME> --help
+			prints Usage of the given API. */
+			if (strncmp(argv[2], "--help", 6)) {
+				printUsage(argv[2], 0, FALSE);
+			} else {
+				printUsage(argv[1], 0, FALSE);
+			}
+		} else {
+			// wifi_api --help prints all API List.
+			printUsage(NULL, 0, FALSE);
+		}
+		return 0;
+	}
+	if (!printUsage(argv[1], argc - 2, TRUE)) return 0;
 
-    FILE *fptr = fopen(WLAN_APPS_LOG_FILE, "a+");
-    if (fptr == NULL) {
-        printf("Could not open file");
-        return 0;
-    }
-    if (argc > 1) {
-        int i = 0;
-        time_t mytime;
-        mytime = time(NULL);
-        fprintf(fptr, "%s ==> %s called", ctime(&mytime), argv[1]);
-        if (argc > 2) {
-            fprintf(fptr, " with parameters");
-            for (i = 2; i < argc; i++) {
-                fprintf(fptr, " %s", argv[i]);
-            }
-        }
-        fprintf(fptr, "\n");
-    }
-    fclose(fptr);
-
-    if (argc == 1) {
-        printf("\nwifi_api : missing arguments\n");
-        printf("\nTry wifi_api --help or wifi_api --help <API-NAME> for more options\n\n");
-        return 0;
-    }
-    if (((argc >= 2) && !strncmp(argv[1], "--help", 6)) || ((argc > 2) && !strncmp(argv[2], "--help", 6))) {
-        if (argc > 2) {
-            // wifi_api --help <API-NAME> or wifi_api <API-NAME> --help prints Usage of the given API.
-            if (strncmp(argv[2], "--help", 6)) {
-                printUsage(argv[2], 0, FALSE);
-            } else {
-                printUsage(argv[1], 0, FALSE);
-            }
-        } else {
-            // wifi_api --help prints all API List.
-            printUsage(NULL, 0, FALSE);
-        }
-        return 0;
-    }
-    if (!printUsage(argv[1], argc - 2, TRUE)) return 0;
-
-    if (argc > 2 && argv[2] != NULL && strcmp(argv[1], "wifi_getIndexFromName")) {
-        index = atoi(argv[2]);
-    }
+	if (argc > 2 && argv[2] != NULL && strcmp(argv[1], "wifi_getIndexFromName")) {
+		index = atoi(argv[2]);
+	}
 
 #ifdef RDKB_WLDM
-    if (strcmp(argv[1], "wifi_init")) {
-        wldm_init(-1);
-    }
+	if (strcmp(argv[1], "wifi_init")) {
+		wldm_init(-1);
+	}
 #endif // endif
 
-    if (!strcmp(argv[1], "wifi_getBandSteeringEnable")) {
-        BOOL enable;
-        ret = wifi_getBandSteeringEnable(&enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_down")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_init")) {
+	if (!strcmp(argv[1], "wifi_getBandSteeringEnable")) {
+		BOOL enable;
+		ret = wifi_getBandSteeringEnable(&enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_down")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_init")) {
 #if defined(BUILD_RDKWIFI) && !defined(BCA_CPEROUTER_RDK)
-        if (daemon(1, 1) != -1) {
-            ret = wifi_init();
-            if (ret == 0 && wifi_apiThread) {
-                ret = pthread_join(wifi_apiThread, NULL);
-            }
-        }
+		if (daemon(1, 1) != -1) {
+			ret = wifi_init();
+			if (ret == 0 && wifi_apiThread) {
+				ret = pthread_join(wifi_apiThread, NULL);
+			}
+		}
 #else
-        ret = wifi_init();
+		ret = wifi_init();
 #endif // endif
-    } else if (!strcmp(argv[1], "wifi_apply")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        ret = wifi_api_send_msg(&apiInfo);
-        printf("%s complete. returned %d\n", argv[1], ret);
-     } else if (!strcmp(argv[1], "wifi_getHalVersion")) {
-        char version[64];
-        ret = wifi_getHalVersion(version);
-        //printf("%s complete. returned %d\n", argv[1], ret);
-        printf("%s\n", version);
-    } else if (!strcmp(argv[1], "wifi_setWldmMsglevel")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        strncpy(apiInfo.api_data, argv[2], 1024);
-        ret = wifi_api_send_msg(&apiInfo);
-        if (ret != 0) {
-              printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getRadioNumberOfEntries")) {
-        unsigned long numRadio;
-        ret = wifi_getRadioNumberOfEntries(&numRadio);
-        printf("%ld\n", numRadio);
-    } else if (!strcmp(argv[1], "wifi_getSSIDNumberOfEntries")) {
-        unsigned long numSsid;
-        ret = wifi_getSSIDNumberOfEntries(&numSsid);
-        printf("%ld\n", numSsid);
-    } else if (!strcmp(argv[1], "wifi_getBandSteeringApGroup")) {
-        char apgroup[64];
-        ret = wifi_getBandSteeringApGroup(apgroup);
-        printf("%s\n", apgroup);
-    } else if (!strcmp(argv[1], "wifi_factoryReset")) {
-        ret = wifi_factoryReset();
-        if (ret == 0) {
-            ret = wifi_factoryReset_post(-1, atoi(argv[2]), atoi(argv[3]));
-        }
-    } else if (!strcmp(argv[1], "wifi_factoryResetRadios")) {
-        ret = wifi_factoryResetRadios();
-        if (ret == 0) {
-            ret = wifi_factoryReset_post(-1, atoi(argv[2]), atoi(argv[3]));
-        }
-    } else if (!strcmp(argv[1], "wifi_factoryResetRadio")) {
-        ret = wifi_factoryResetRadio(index);
-        if (ret == 0) {
-            ret = wifi_factoryReset_post(index, atoi(argv[3]), atoi(argv[4]));
-        }
-    } else if (!strcmp(argv[1], "wifi_factoryResetAP")) {
-        ret = wifi_factoryResetAP(index);
-        if (ret == 0) {
-            ret = wifi_factoryReset_post(index, atoi(argv[3]), atoi(argv[4]));
-        }
-    } else if (!strcmp(argv[1], "wifi_setApSecurityReset")) {
-        ret = wifi_setApSecurityReset(index);
-        if (ret == 0) {
-            ret = wifi_factoryReset_post(index, atoi(argv[3]), atoi(argv[4]));
-        }
-    } else if (!strcmp(argv[1], "wifi_reset")) {
-        ret = wifi_reset();
-    } else if (!strcmp(argv[1], "wifi_getRadioEnable")) {
-        BOOL enable;
-        ret = wifi_getRadioEnable(index, &enable);
-        printf("%s\n", enable ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getRadioUpTime")) {
-        ULONG uptime;
-        ret = wifi_getRadioUpTime(index, &uptime);
-        printf("%lu\n", uptime);
-    } else if (!strcmp(argv[1], "wifi_getRadioStatus")) {
-        BOOL enable;
-        ret = wifi_getRadioStatus(index, &enable);
-        printf("%s\n", enable ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getSSIDRadioIndex")) {
-        int radioIndexOut;
-        ret = wifi_getSSIDRadioIndex(index, &radioIndexOut);
-        printf("%d\n", radioIndexOut);
-    } else if (!strcmp(argv[1], "wifi_getRadioResetCount")) {
-        ULONG resetCount;
-        ret = wifi_getRadioResetCount(index, &resetCount);
-        printf("%lu\n", resetCount);
-    } else if (!strcmp(argv[1], "wifi_getApIsolationEnable")) {
-        BOOL apIsolationEnable;
-        ret = wifi_getApIsolationEnable(index, &apIsolationEnable);
-        printf("%s\n", apIsolationEnable ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getRadioIfName")) {
-        char name[64];
-        ret = wifi_getRadioIfName(index, name);
-        printf("%s\n", name);
-    } else if (!strcmp(argv[1], "wifi_getRadioMaxBitRate")) {
-        char bitrate[64];
-        ret = wifi_getRadioMaxBitRate(index, bitrate);
-        printf("%s\n", bitrate);
-    } else if (!strcmp(argv[1], "wifi_getRadioSupportedFrequencyBands")) {
-        char freqbands[64];
-        ret = wifi_getRadioSupportedFrequencyBands(index, freqbands);
-        printf("%s\n", freqbands);
-    } else if (!strcmp(argv[1], "wifi_getRadioOperatingFrequencyBand")) {
-        char freqbands[64];
-        ret = wifi_getRadioOperatingFrequencyBand(index, freqbands);
-        printf("%s\n", freqbands);
-    } else if (!strcmp(argv[1], "wifi_getRadioSupportedStandards")) {
-	char standards[64];
-	ret = wifi_getRadioSupportedStandards(index, standards);
-	if (!ret) {
-		printf("%s\n", standards);
-	} else {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    }
-    /* Deprecated from WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION >= 15 */
-    else if (!strcmp(argv[1], "wifi_getRadioStandard")) {
-	char standard[64];
-	BOOL gOnly, nOnly, acOnly;
-	ret = wifi_getRadioStandard(index, standard, &gOnly, &nOnly, &acOnly);
-	if (!ret) {
-		printf("index=%d standard=%s gOnly=%d nOnly=%d acOnly=%d\n",
-			index, standard, gOnly, nOnly, acOnly);
-	} else {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    }
-    else if (!strcmp(argv[1], "wifi_getSSIDEnable")) {
-        BOOL enable;
-        ret = wifi_getSSIDEnable(index, &enable);
-        if (!ret) {
-            printf("%s\n", enable ? "TRUE" : "FALSE");
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getSSIDStatus")) {
-        char status[64];
-        ret = wifi_getSSIDStatus(index, status);
-        if (!ret) {
-            printf("%s\n", status);
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getSSIDName")) {
-        char name[64];
-        ret = wifi_getSSIDName(index, name);
-        if (!ret) {
-            printf("%s\n", name);
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getRadioChannelStats")) {
-        //Prashanth
+	} else if (!strcmp(argv[1], "wifi_apply")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		ret = wifi_api_send_msg(&apiInfo);
+		printf("%s complete. returned %d\n", argv[1], ret);
+	 } else if (!strcmp(argv[1], "wifi_getHalVersion")) {
+		char version[64];
+		ret = wifi_getHalVersion(version);
+		//printf("%s complete. returned %d\n", argv[1], ret);
+		printf("%s\n", version);
+	} else if (!strcmp(argv[1], "wifi_setWldmMsglevel")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		strncpy(apiInfo.api_data, argv[2], 1024);
+		ret = wifi_api_send_msg(&apiInfo);
+		if (ret != 0) {
+			  printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getRadioNumberOfEntries")) {
+		unsigned long numRadio;
+		ret = wifi_getRadioNumberOfEntries(&numRadio);
+		printf("%ld\n", numRadio);
+	} else if (!strcmp(argv[1], "wifi_getSSIDNumberOfEntries")) {
+		unsigned long numSsid;
+		ret = wifi_getSSIDNumberOfEntries(&numSsid);
+		printf("%ld\n", numSsid);
+	} else if (!strcmp(argv[1], "wifi_getBandSteeringApGroup")) {
+		char apgroup[64];
+		ret = wifi_getBandSteeringApGroup(apgroup);
+		printf("%s\n", apgroup);
+	} else if (!strcmp(argv[1], "wifi_factoryReset")) {
+		ret = wifi_factoryReset();
+		if (ret == 0) {
+			ret = wifi_factoryReset_post(-1, atoi(argv[2]), atoi(argv[3]));
+		}
+	} else if (!strcmp(argv[1], "wifi_factoryResetRadios")) {
+		ret = wifi_factoryResetRadios();
+		if (ret == 0) {
+			ret = wifi_factoryReset_post(-1, atoi(argv[2]), atoi(argv[3]));
+		}
+	} else if (!strcmp(argv[1], "wifi_factoryResetRadio")) {
+		ret = wifi_factoryResetRadio(index);
+		if (ret == 0) {
+			ret = wifi_factoryReset_post(index, atoi(argv[3]), atoi(argv[4]));
+		}
+	} else if (!strcmp(argv[1], "wifi_factoryResetAP")) {
+		ret = wifi_factoryResetAP(index);
+		if (ret == 0) {
+			ret = wifi_factoryReset_post(index, atoi(argv[3]), atoi(argv[4]));
+		}
+	} else if (!strcmp(argv[1], "wifi_setApSecurityReset")) {
+		ret = wifi_setApSecurityReset(index);
+		if (ret == 0) {
+			ret = wifi_factoryReset_post(index, atoi(argv[3]), atoi(argv[4]));
+		}
+	} else if (!strcmp(argv[1], "wifi_reset")) {
+		ret = wifi_reset();
+	} else if (!strcmp(argv[1], "wifi_getRadioEnable")) {
+		BOOL enable;
+		ret = wifi_getRadioEnable(index, &enable);
+		printf("%s\n", enable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getRadioUpTime")) {
+		ULONG uptime;
+		ret = wifi_getRadioUpTime(index, &uptime);
+		printf("%lu\n", uptime);
+	} else if (!strcmp(argv[1], "wifi_getRadioStatus")) {
+		BOOL enable;
+		ret = wifi_getRadioStatus(index, &enable);
+		printf("%s\n", enable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getSSIDRadioIndex")) {
+		int radioIndexOut;
+		ret = wifi_getSSIDRadioIndex(index, &radioIndexOut);
+		printf("%d\n", radioIndexOut);
+	} else if (!strcmp(argv[1], "wifi_getRadioResetCount")) {
+		ULONG resetCount;
+		ret = wifi_getRadioResetCount(index, &resetCount);
+		printf("%lu\n", resetCount);
+	} else if (!strcmp(argv[1], "wifi_getApIsolationEnable")) {
+		BOOL apIsolationEnable;
+		ret = wifi_getApIsolationEnable(index, &apIsolationEnable);
+		printf("%s\n", apIsolationEnable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getRadioIfName")) {
+		char name[64];
+		ret = wifi_getRadioIfName(index, name);
+		printf("%s\n", name);
+	} else if (!strcmp(argv[1], "wifi_getRadioMaxBitRate")) {
+		char bitrate[64];
+		ret = wifi_getRadioMaxBitRate(index, bitrate);
+		printf("%s\n", bitrate);
+	} else if (!strcmp(argv[1], "wifi_getRadioSupportedFrequencyBands")) {
+		char freqbands[64];
+		ret = wifi_getRadioSupportedFrequencyBands(index, freqbands);
+		printf("%s\n", freqbands);
+	} else if (!strcmp(argv[1], "wifi_getRadioOperatingFrequencyBand")) {
+		char freqbands[64];
+		ret = wifi_getRadioOperatingFrequencyBand(index, freqbands);
+		printf("%s\n", freqbands);
+	} else if (!strcmp(argv[1], "wifi_getRadioSupportedStandards")) {
+		char standards[64];
+		ret = wifi_getRadioSupportedStandards(index, standards);
+		if (!ret) {
+			printf("%s\n", standards);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	/* Deprecated from WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION >= 15 */
+	} else if (!strcmp(argv[1], "wifi_getRadioStandard")) {
+		char standard[64];
+		BOOL gOnly, nOnly, acOnly;
+		ret = wifi_getRadioStandard(index, standard, &gOnly, &nOnly, &acOnly);
+		if (!ret) {
+			printf("index=%d standard=%s gOnly=%d nOnly=%d acOnly=%d\n",
+				index, standard, gOnly, nOnly, acOnly);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getSSIDEnable")) {
+		BOOL enable;
+		ret = wifi_getSSIDEnable(index, &enable);
+		if (!ret) {
+			printf("%s\n", enable ? "TRUE" : "FALSE");
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getSSIDStatus")) {
+		char status[64];
+		ret = wifi_getSSIDStatus(index, status);
+		if (!ret) {
+			printf("%s\n", status);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getSSIDName")) {
+		char name[64];
+		ret = wifi_getSSIDName(index, name);
+		if (!ret) {
+			printf("%s\n", name);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getRadioChannelStats")) {
+		//Prashanth
 #define NUM_CH_24 11 // 1-11
 #define NUM_CH_5  33 // 36-165
 #define NUM_CH_ALL (NUM_CH_24 + NUM_CH_5) // 1-165
-        wifi_channelStats_t ch_stats[NUM_CH_ALL], *s;
-        int i, n;
-        INT ret = 0;
-
-        memset(&ch_stats, 0, sizeof(ch_stats));
-        for (n = 0; n < NUM_CH_24; n++) {
-            ch_stats[n].ch_number = 1 + n;
-            ch_stats[n].ch_in_pool = TRUE;
-        }
-        for (i = 0; i < NUM_CH_5; i++, n++) {
-            ch_stats[n].ch_number = 36 + i * 4;
-            if (ch_stats[n].ch_number >= 148) {
-                ch_stats[n].ch_number++;
-            }
-            ch_stats[n].ch_in_pool = TRUE;
-        }
-        printf("wifi_getRadioChannelStats(%d size=%d)\n", index, ARRAY_SIZE(ch_stats));
-        ret = wifi_getRadioChannelStats(index, ch_stats, ARRAY_SIZE(ch_stats));
-        printf("return: %d\n", ret);
-        if (ret < 0) printf("Error\n");
-        n = 0;
-        for (i = 0; i < (int)ARRAY_SIZE(ch_stats); i++) {
-            s = &ch_stats[i];
-            if (!s->ch_in_pool) continue;
-            if (!s->ch_utilization_busy_tx
-                && !s->ch_utilization_busy_rx
-                && !s->ch_utilization_busy
-                && !s->ch_utilization_total) continue;
-            printf("  ch %3u tx %10"PRIu64" rx %10"PRIu64" busy %10"PRIu64" total %10"PRIu64"\n",
-                   s->ch_number,
-                   s->ch_utilization_busy_tx,
-                   s->ch_utilization_busy_rx,
-                   s->ch_utilization_busy,
-                   s->ch_utilization_total);
-            n++;
-        }
-        printf("  channels with stats: %d\n", n);
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceRxStatsResult")) {
-        mac_address_t mac;
-        wifi_associated_dev_rate_info_rx_stats_t * stats_array,*s;
-        UINT output_array_size;
-        ULLONG handle;
-        int i, j, k;
-        INT ret = 0;
-
-        parse_mac(argv[3], &mac);
-        printf("wifi_getApAssociatedDeviceRxStatsResult(%d %s)\n", index, argv[3]);
-        ret = wifi_getApAssociatedDeviceRxStatsResult(index, &mac, &stats_array, &output_array_size, &handle);
-        printf("return: %d output_array_size: %d\n", ret, output_array_size);
-        PRINT_HEX1(handle);
-        if (ret < 0) printf("ERROR\n");
-
-        if (opt_compact) {
-            print_compact = TRUE;
-            printf("  [i  bw   nss  mcs] flag byte msdu mpdu ppdu retr rssi\n");
-        }
-        for (i = 0; i < (int)output_array_size; i++) {
-            if (opt_compact) printf("   %-2d ", i);
-            else printf("  [%d]\n", i);
-            s = &stats_array[i];
-            PRINT_INT(s, bw);
-            PRINT_INT(s, nss);
-            PRINT_INT(s, mcs);
-            PRINT_HEX(s, flags);
-            PRINT_INT(s, bytes);
-            PRINT_INT(s, msdus);
-            PRINT_INT(s, mpdus);
-            PRINT_INT(s, ppdus);
-            PRINT_INT(s, retries);
-            PRINT_INT(s, rssi_combined);
-            if (opt_compact) {
-                printf("[");
-                for (j = 0; j < 8; j++) {
-                    if (j) printf(",");
-                    for (k = 0; k < 4; k++) {
-                        printf(" %2d", s->rssi_array[j][k]);
-                    }
-                }
-                printf(" ]\n");
-            } else {
-                printf("  rssi_array:\n");
-                for (j = 0; j < 8; j++) {
-                    printf("     ");
-                    for (k = 0; k < 4; k++) {
-                        printf("%-2d ", s->rssi_array[j][k]);
-                    }
-                    printf("\n");
-                }
-            }
-        }
-        print_compact = FALSE;
-        free(stats_array);
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceTxStatsResult")) {
-        mac_address_t mac;
-        wifi_associated_dev_rate_info_tx_stats_t * stats_array,*s;
-        UINT output_array_size;
-        ULLONG handle;
-        int i;
-        INT ret = 0;
-
-        parse_mac(argv[3], &mac);
-        printf("wifi_getApAssociatedDeviceTxStatsResult(%d %s)\n", index, argv[3]);
-        ret = wifi_getApAssociatedDeviceTxStatsResult(index, &mac, &stats_array, &output_array_size, &handle);
-        printf("return: %d output_array_size: %d\n", ret, output_array_size);
-        PRINT_HEX1(handle);
-        if (ret < 0) printf("ERROR\n");
-        if (opt_compact) {
-            print_compact = TRUE;
-            printf("  [i  bw   nss  mcs] flag byte msdu mpdu ppdu retr attempts\n");
-        }
-        for (i = 0; i < (int)output_array_size; i++) {
-            if (opt_compact) printf("   %-2d ", i);
-            else printf("  [%d]\n", i);
-            s = &stats_array[i];
-            PRINT_INT(s, bw);
-            PRINT_INT(s, nss);
-            PRINT_INT(s, mcs);
-            PRINT_HEX(s, flags);
-            PRINT_INT(s, bytes);
-            PRINT_INT(s, msdus);
-            PRINT_INT(s, mpdus);
-            PRINT_INT(s, ppdus);
-            PRINT_INT(s, retries);
-            PRINT_INT(s, attempts);
-            if (opt_compact) printf("\n");
-        }
-        print_compact = FALSE;
-        free(stats_array);
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceStats")) {
-        mac_address_t mac;
-        wifi_associated_dev_stats_t dev_stats, *s = &dev_stats;
-        ULLONG handle;
-        INT ret = 0;
-
-        parse_mac(argv[3], &mac);
-        printf("wifi_getApAssociatedDeviceStats(%d %s)\n", index, argv[3]);
-        ret = wifi_getApAssociatedDeviceStats(index, &mac, &dev_stats, &handle);
-        printf("return: %d\n", ret);
-        PRINT_HEX1(handle);
-        PRINT_INT(s, cli_rx_bytes);
-        PRINT_INT(s, cli_tx_bytes);
-        PRINT_INT(s, cli_rx_frames);
-        PRINT_INT(s, cli_tx_frames);
-        PRINT_INT(s, cli_rx_retries);
-        PRINT_INT(s, cli_tx_retries);
-        PRINT_INT(s, cli_rx_errors);
-        PRINT_INT(s, cli_tx_errors);
-        PRINT_DOUBLE(s, cli_rx_rate);
-        PRINT_DOUBLE(s, cli_tx_rate);
-    } else if (!strcmp(argv[1], "wifi_getBaseBSSID")) {
-        char bssid[18];
-        ret = wifi_getBaseBSSID(index, bssid);
-        printf("%s\n", bssid);
-    } else if (!strcmp(argv[1], "wifi_getApEnable")) {
-        BOOL enable;
-        ret = wifi_getApEnable(index, &enable);
-        if (!ret) {
-            printf("%s\n", enable ? "TRUE" : "FALSE");
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getApStatus")) {
-        char status[64];
-        ret = wifi_getApStatus(index, status);
-        if (!ret) {
-            printf("%s\n", status);
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getSSIDTrafficStats2")) {
-        wifi_ssidTrafficStats2_t stats = { 0 };
-        ret = wifi_getSSIDTrafficStats2(index, &stats); //Tr181
-        printf("%s %d: returns %d\n", argv[1], index, ret);
-        printf("     ssid_BytesSent             =%lu\n", stats.ssid_BytesSent);
-        printf("     ssid_BytesReceived         =%lu\n", stats.ssid_BytesReceived);
-        printf("     ssid_PacketsSent           =%lu\n", stats.ssid_PacketsSent);
-        printf("     ssid_PacketsReceived       =%lu\n", stats.ssid_PacketsReceived);
-        printf("     ssid_RetransCount          =%lu\n", stats.ssid_RetransCount);
-        printf("     ssid_FailedRetransCount    =%lu\n", stats.ssid_FailedRetransCount);
-        printf("     ssid_RetryCount            =%lu\n", stats.ssid_RetryCount);
-        printf("     ssid_MultipleRetryCount    =%lu\n", stats.ssid_MultipleRetryCount);
-        printf("     ssid_ACKFailureCount       =%lu\n", stats.ssid_ACKFailureCount);
-        printf("     ssid_AggregatedPacketCount =%lu\n", stats.ssid_AggregatedPacketCount);
-        printf("     ssid_ErrorsSent            =%lu\n", stats.ssid_ErrorsSent);
-        printf("     ssid_ErrorsReceived        =%lu\n", stats.ssid_ErrorsReceived);
-        printf("     ssid_UnicastPacketsSent    =%lu\n", stats.ssid_UnicastPacketsSent);
-        printf("     ssid_UnicastPacketsReceived    =%lu\n", stats.ssid_UnicastPacketsReceived);
-        printf("     ssid_DiscardedPacketsSent      =%lu\n", stats.ssid_DiscardedPacketsSent);
-        printf("     ssid_DiscardedPacketsReceived  =%lu\n", stats.ssid_DiscardedPacketsReceived);
-        printf("     ssid_MulticastPacketsSent      =%lu\n", stats.ssid_MulticastPacketsSent);
-        printf("     ssid_MulticastPacketsReceived  =%lu\n", stats.ssid_MulticastPacketsReceived);
-        printf("     ssid_BroadcastPacketsSent      =%lu\n", stats.ssid_BroadcastPacketsSent);
-        printf("     ssid_BroadcastPacketsRecevied  =%lu\n", stats.ssid_BroadcastPacketsRecevied);
-        printf("     ssid_UnknownPacketsReceived    =%lu\n", stats.ssid_UnknownPacketsReceived);
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceDiagnosticResult")) {
-        wifi_associated_dev_t *associated_dev_array = NULL,*pt = NULL;
-        UINT array_size = 0;
-        UINT i = 0;
-        ret = wifi_getApAssociatedDeviceDiagnosticResult(index, &associated_dev_array, &array_size);
-        if (ret != RETURN_ERR) {
-            printf("Total_STA:%d\n", array_size);
-            for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
-                printf("\nsta_%d:  cli_MACAddress = %02X:%02X:%02X:%02X:%02X:%02X\n", i + 1, pt->cli_MACAddress[0], pt->cli_MACAddress[1], pt->cli_MACAddress[2],
-                       pt->cli_MACAddress[3], pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
-                printf("sta_%d:  cli_LastDataDownlinkRate = %d\n", i + 1, pt->cli_LastDataDownlinkRate);
-                printf("sta_%d:  cli_LastDataUplinkRate = %d\n", i + 1, pt->cli_LastDataUplinkRate);
-                printf("sta_%d:  cli_SignalStrength = %d\n", i + 1, pt->cli_SignalStrength);
-                printf("sta_%d:  cli_OperatingStandard = %s\n", i + 1, pt->cli_OperatingStandard);
-                printf("sta_%d:  cli_OperatingChannelBandwidth = %s\n", i + 1, pt->cli_OperatingChannelBandwidth);
-                printf("sta_%d:  cli_SNR = %d\n", i + 1, pt->cli_SNR);
-                printf("sta_%d:  cli_RSSI = %d\n", i + 1, pt->cli_RSSI);
-                printf("sta_%d:  cli_AuthenticationState = %d\n", i + 1, pt->cli_AuthenticationState);
-                printf("sta_%d:  cli_Retransmissions = %d\n", i + 1, pt->cli_Retransmissions);
-                printf("sta_%d:  cli_Disassociations = %d\n", i + 1, pt->cli_Disassociations);
-                printf("sta_%d:  cli_AuthenticationFailures = %d\n", i + 1, pt->cli_AuthenticationFailures);
-            }
-            if (associated_dev_array) {
-                free(associated_dev_array);
-            }
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceDiagnosticResult2")) {
-        wifi_associated_dev2_t *associated_dev_array = NULL,*pt = NULL;
-        UINT array_size = 0;
-        UINT i = 0;
-        ret = wifi_getApAssociatedDeviceDiagnosticResult2(index, &associated_dev_array, &array_size);
-        if (ret != RETURN_ERR) {
-            printf("Total_STA:%d\n", array_size);
-            for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
-                printf("\nsta_%d:  cli_MACAddress = %02X:%02X:%02X:%02X:%02X:%02X\n", i + 1, pt->cli_MACAddress[0], pt->cli_MACAddress[1], pt->cli_MACAddress[2],
-                       pt->cli_MACAddress[3], pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
-                printf("sta_%d:  cli_LastDataDownlinkRate = %d\n", i + 1, pt->cli_LastDataDownlinkRate);
-                printf("sta_%d:  cli_LastDataUplinkRate = %d\n", i + 1, pt->cli_LastDataUplinkRate);
-                printf("sta_%d:  cli_SignalStrength = %d\n", i + 1, pt->cli_SignalStrength);
-                printf("sta_%d:  cli_OperatingStandard = %s\n", i + 1, pt->cli_OperatingStandard);
-                printf("sta_%d:  cli_OperatingChannelBandwidth = %s\n", i + 1, pt->cli_OperatingChannelBandwidth);
-                printf("sta_%d:  cli_SNR = %d\n", i + 1, pt->cli_SNR);
-                printf("sta_%d:  cli_RSSI = %d\n", i + 1, pt->cli_RSSI);
-                printf("sta_%d:  cli_AuthenticationState = %d\n", i + 1, pt->cli_AuthenticationState);
-                printf("sta_%d:  cli_Retransmissions = %d\n", i + 1, pt->cli_Retransmissions);
-                printf("sta_%d:  cli_Disassociations = %d\n", i + 1, pt->cli_Disassociations);
-                printf("sta_%d:  cli_AuthenticationFailures = %d\n", i + 1, pt->cli_AuthenticationFailures);
-                printf("sta_%d:  cli_Associations = %llu\n", i + 1, pt->cli_Associations);
-            }
-            if (associated_dev_array) {
-                free(associated_dev_array);
-            }
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceDiagnosticResult3")) {
-        wifi_associated_dev3_t *associated_dev_array = NULL,*pt = NULL;
-        UINT array_size = 0;
-        UINT i = 0;
-        ret = wifi_getApAssociatedDeviceDiagnosticResult3(index, &associated_dev_array, &array_size);
-        if (ret != RETURN_ERR) {
-            printf("Total_STA:%d\n", array_size);
-            for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
-                printf("\nsta_%d:  cli_MACAddress = %02X:%02X:%02X:%02X:%02X:%02X\n", i + 1, pt->cli_MACAddress[0], pt->cli_MACAddress[1], pt->cli_MACAddress[2],
-                       pt->cli_MACAddress[3], pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
-                printf("sta_%d:  cli_LastDataDownlinkRate = %d\n", i + 1, pt->cli_LastDataDownlinkRate);
-                printf("sta_%d:  cli_LastDataUplinkRate = %d\n", i + 1, pt->cli_LastDataUplinkRate);
-                printf("sta_%d:  cli_SignalStrength = %d\n", i + 1, pt->cli_SignalStrength);
-                printf("sta_%d:  cli_OperatingStandard = %s\n", i + 1, pt->cli_OperatingStandard);
-                printf("sta_%d:  cli_OperatingChannelBandwidth = %s\n", i + 1, pt->cli_OperatingChannelBandwidth);
-                printf("sta_%d:  cli_SNR = %d\n", i + 1, pt->cli_SNR);
-                printf("sta_%d:  cli_RSSI = %d\n", i + 1, pt->cli_RSSI);
-                printf("sta_%d:  cli_AuthenticationState = %d\n", i + 1, pt->cli_AuthenticationState);
-                printf("sta_%d:  cli_Retransmissions = %d\n", i + 1, pt->cli_Retransmissions);
-                printf("sta_%d:  cli_Disassociations = %d\n", i + 1, pt->cli_Disassociations);
-                printf("sta_%d:  cli_AuthenticationFailures = %d\n", i + 1, pt->cli_AuthenticationFailures);
-                printf("sta_%d:  cli_Associations = %llu\n", i + 1, pt->cli_Associations);
-                printf("sta_%d:  cli_BytesSent = %lu\n", i + 1, pt->cli_BytesSent);
-                printf("sta_%d:  cli_BytesReceived = %lu\n", i + 1, pt->cli_BytesReceived);
-                printf("sta_%d:  cli_PacketsSent = %lu\n", i + 1, pt->cli_PacketsSent);
-                printf("sta_%d:  cli_PacketsReceived = %lu\n", i + 1, pt->cli_PacketsReceived);
-                printf("sta_%d:  cli_ErrorsSent = %lu\n", i + 1, pt->cli_ErrorsSent);
-                printf("sta_%d:  cli_RetransCount = %lu\n", i + 1, pt->cli_RetransCount);
-                printf("sta_%d:  cli_FailedRetransCount = %lu\n", i + 1, pt->cli_FailedRetransCount);
-                printf("sta_%d:  cli_RetryCount = %lu\n", i + 1, pt->cli_RetryCount);
-                printf("sta_%d:  cli_MultipleRetryCount = %lu\n", i + 1, pt->cli_MultipleRetryCount);
-                printf("sta_%d:  cli_MaxDownlinkRate = %d\n", i + 1, pt->cli_MaxDownlinkRate);
-                printf("sta_%d:  cli_MaxUplinkRate = %d\n", i + 1, pt->cli_MaxUplinkRate);
-            }
-            if (associated_dev_array) {
-                free(associated_dev_array);
-            }
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getRadioBandUtilization")) {
-        INT output_percentage;
-        ret = wifi_getRadioBandUtilization(index, &output_percentage);
-        printf("%d\n", output_percentage);
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDevice")) {
-        CHAR output_buf[MAX_OUTPUT_STRING_LEN_1024];
-        INT output_buf_size = MAX_OUTPUT_STRING_LEN_1024;
-        memset(output_buf, 0, MAX_OUTPUT_STRING_LEN_1024);
-        ret = wifi_getApAssociatedDevice(index, output_buf, output_buf_size);
-        printf("%s\n", output_buf);
-    } else if (!strcmp(argv[1], "wifi_getApBeaconRate")) {
-        CHAR beaconrate[32] = {0};
-        ret = wifi_getApBeaconRate(index, beaconrate);
-        printf("%s\n", beaconrate);
-    } else if (!(strcmp(argv[1], "wifi_getApTxBeaconFrameCount"))) {
-        UINT count;
-        ret = wifi_getApTxBeaconFrameCount(index, &count);
-        printf("txbcnfrm count %d\n", count);
-    } else if (!strcmp(argv[1], "wifi_getATMCapable")) {
-        BOOL capable;
-        ret = wifi_getATMCapable(&capable);
-        printf("%s\n", capable ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getRadioDcsDwelltime")) {
-	INT output_millsecond;
-	ret = wifi_getRadioDcsDwelltime(index, &output_millsecond);
-	if (!ret) {
-		printf("%d\n", output_millsecond);
-	}
-	else {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_setRadioDcsDwelltime")) {
-	ret = wifi_setRadioDcsDwelltime(index, atoi(argv[3]));
-	if (ret != 0) {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_getRadioGuardInterval")) {
-        char guardInterval[64];
-        ret = wifi_getRadioGuardInterval(index, guardInterval);
-        printf("%s\n", guardInterval);
-    } else if (!strcmp(argv[1], "wifi_getApManagementFramePowerControl")) {
-        INT output_power;
-        ret = wifi_getApManagementFramePowerControl(index, &output_power);
-        printf("%d\n", output_power);
-    } else if (!strcmp(argv[1], "wifi_getRadioDcsScanning")) {
-        BOOL dcs;
-        ret = wifi_getRadioDcsScanning(index, &dcs);
-        printf("%d\n", dcs);
-    } else if (!strcmp(argv[1], "wifi_deleteAp")) {
+		wifi_channelStats_t ch_stats[NUM_CH_ALL], *s;
+		int i, n;
+		INT ret = 0;
+
+		memset(&ch_stats, 0, sizeof(ch_stats));
+		for (n = 0; n < NUM_CH_24; n++) {
+			ch_stats[n].ch_number = 1 + n;
+			ch_stats[n].ch_in_pool = TRUE;
+		}
+		for (i = 0; i < NUM_CH_5; i++, n++) {
+			ch_stats[n].ch_number = 36 + i * 4;
+			if (ch_stats[n].ch_number >= 148) {
+				ch_stats[n].ch_number++;
+			}
+			ch_stats[n].ch_in_pool = TRUE;
+		}
+		printf("wifi_getRadioChannelStats(%d size=%d)\n", index, ARRAY_SIZE(ch_stats));
+		ret = wifi_getRadioChannelStats(index, ch_stats, ARRAY_SIZE(ch_stats));
+		printf("return: %d\n", ret);
+		if (ret < 0) printf("Error\n");
+		n = 0;
+		for (i = 0; i < (int)ARRAY_SIZE(ch_stats); i++) {
+			s = &ch_stats[i];
+			if (!s->ch_in_pool) continue;
+			if (!s->ch_utilization_busy_tx && !s->ch_utilization_busy_rx &&
+				!s->ch_utilization_busy && !s->ch_utilization_total) continue;
+			printf("  ch %3u tx %10"PRIu64" rx %10"PRIu64" busy %10"PRIu64" total %10"
+				PRIu64"\n",
+				s->ch_number, s->ch_utilization_busy_tx, s->ch_utilization_busy_rx,
+				s->ch_utilization_busy, s->ch_utilization_total);
+			n++;
+		}
+		printf("  channels with stats: %d\n", n);
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceRxStatsResult")) {
+		mac_address_t mac;
+		wifi_associated_dev_rate_info_rx_stats_t * stats_array,*s;
+		UINT output_array_size;
+		ULLONG handle;
+		int i, j, k;
+		INT ret = 0;
+
+		parse_mac(argv[3], &mac);
+		printf("wifi_getApAssociatedDeviceRxStatsResult(%d %s)\n", index, argv[3]);
+		ret = wifi_getApAssociatedDeviceRxStatsResult(index, &mac, &stats_array,
+			&output_array_size, &handle);
+		printf("return: %d output_array_size: %d\n", ret, output_array_size);
+		PRINT_HEX1(handle);
+		if (ret < 0) printf("ERROR\n");
+
+		if (opt_compact) {
+			print_compact = TRUE;
+			printf("  [i  bw   nss  mcs] flag byte msdu mpdu ppdu retr rssi\n");
+		}
+		for (i = 0; i < (int)output_array_size; i++) {
+			if (opt_compact) printf("   %-2d ", i);
+			else printf("  [%d]\n", i);
+			s = &stats_array[i];
+			PRINT_INT(s, bw);
+			PRINT_INT(s, nss);
+			PRINT_INT(s, mcs);
+			PRINT_HEX(s, flags);
+			PRINT_INT(s, bytes);
+			PRINT_INT(s, msdus);
+			PRINT_INT(s, mpdus);
+			PRINT_INT(s, ppdus);
+			PRINT_INT(s, retries);
+			PRINT_INT(s, rssi_combined);
+			if (opt_compact) {
+				printf("[");
+				for (j = 0; j < 8; j++) {
+					if (j) printf(",");
+					for (k = 0; k < 4; k++) {
+						printf(" %2d", s->rssi_array[j][k]);
+					}
+				}
+				printf(" ]\n");
+			} else {
+				printf("  rssi_array:\n");
+				for (j = 0; j < 8; j++) {
+					printf("	 ");
+					for (k = 0; k < 4; k++) {
+						printf("%-2d ", s->rssi_array[j][k]);
+					}
+					printf("\n");
+				}
+			}
+		}
+		print_compact = FALSE;
+		free(stats_array);
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceTxStatsResult")) {
+		mac_address_t mac;
+		wifi_associated_dev_rate_info_tx_stats_t * stats_array,*s;
+		UINT output_array_size;
+		ULLONG handle;
+		int i;
+		INT ret = 0;
+
+		parse_mac(argv[3], &mac);
+		printf("wifi_getApAssociatedDeviceTxStatsResult(%d %s)\n", index, argv[3]);
+		ret = wifi_getApAssociatedDeviceTxStatsResult(index, &mac, &stats_array,
+			&output_array_size, &handle);
+		printf("return: %d output_array_size: %d\n", ret, output_array_size);
+		PRINT_HEX1(handle);
+		if (ret < 0) printf("ERROR\n");
+		if (opt_compact) {
+			print_compact = TRUE;
+			printf("  [i  bw   nss  mcs] flag byte msdu mpdu ppdu retr attempts\n");
+		}
+		for (i = 0; i < (int)output_array_size; i++) {
+			if (opt_compact) printf("   %-2d ", i);
+			else printf("  [%d]\n", i);
+			s = &stats_array[i];
+			PRINT_INT(s, bw);
+			PRINT_INT(s, nss);
+			PRINT_INT(s, mcs);
+			PRINT_HEX(s, flags);
+			PRINT_INT(s, bytes);
+			PRINT_INT(s, msdus);
+			PRINT_INT(s, mpdus);
+			PRINT_INT(s, ppdus);
+			PRINT_INT(s, retries);
+			PRINT_INT(s, attempts);
+			if (opt_compact) printf("\n");
+		}
+		print_compact = FALSE;
+		free(stats_array);
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceStats")) {
+		mac_address_t mac;
+		wifi_associated_dev_stats_t dev_stats, *s = &dev_stats;
+		ULLONG handle;
+		INT ret = 0;
+
+		parse_mac(argv[3], &mac);
+		printf("wifi_getApAssociatedDeviceStats(%d %s)\n", index, argv[3]);
+		ret = wifi_getApAssociatedDeviceStats(index, &mac, &dev_stats, &handle);
+		printf("return: %d\n", ret);
+		PRINT_HEX1(handle);
+		PRINT_INT(s, cli_rx_bytes);
+		PRINT_INT(s, cli_tx_bytes);
+		PRINT_INT(s, cli_rx_frames);
+		PRINT_INT(s, cli_tx_frames);
+		PRINT_INT(s, cli_rx_retries);
+		PRINT_INT(s, cli_tx_retries);
+		PRINT_INT(s, cli_rx_errors);
+		PRINT_INT(s, cli_tx_errors);
+		PRINT_DOUBLE(s, cli_rx_rate);
+		PRINT_DOUBLE(s, cli_tx_rate);
+	} else if (!strcmp(argv[1], "wifi_getBaseBSSID")) {
+		char bssid[18];
+		ret = wifi_getBaseBSSID(index, bssid);
+		printf("%s\n", bssid);
+	} else if (!strcmp(argv[1], "wifi_getApEnable")) {
+		BOOL enable;
+		ret = wifi_getApEnable(index, &enable);
+		if (!ret) {
+			printf("%s\n", enable ? "TRUE" : "FALSE");
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getApStatus")) {
+		char status[64];
+		ret = wifi_getApStatus(index, status);
+		if (!ret) {
+			printf("%s\n", status);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getSSIDTrafficStats2")) {
+		wifi_ssidTrafficStats2_t stats = { 0 };
+		ret = wifi_getSSIDTrafficStats2(index, &stats); //Tr181
+		printf("%s %d: returns %d\n", argv[1], index, ret);
+		printf("ssid_BytesSent			= %lu\n", stats.ssid_BytesSent);
+		printf("ssid_BytesReceived		= %lu\n", stats.ssid_BytesReceived);
+		printf("ssid_PacketsSent		= %lu\n", stats.ssid_PacketsSent);
+		printf("ssid_PacketsReceived		= %lu\n", stats.ssid_PacketsReceived);
+		printf("ssid_RetransCount		= %lu\n", stats.ssid_RetransCount);
+		printf("ssid_FailedRetransCount		= %lu\n", stats.ssid_FailedRetransCount);
+		printf("ssid_RetryCount			= %lu\n", stats.ssid_RetryCount);
+		printf("ssid_MultipleRetryCount		= %lu\n", stats.ssid_MultipleRetryCount);
+		printf("ssid_ACKFailureCount		= %lu\n", stats.ssid_ACKFailureCount);
+		printf("ssid_AggregatedPacketCount	= %lu\n",
+			stats.ssid_AggregatedPacketCount);
+		printf("ssid_ErrorsSent			= %lu\n", stats.ssid_ErrorsSent);
+		printf("ssid_ErrorsReceived		= %lu\n", stats.ssid_ErrorsReceived);
+		printf("ssid_UnicastPacketsSent		= %lu\n", stats.ssid_UnicastPacketsSent);
+		printf("ssid_UnicastPacketsReceived	= %lu\n",
+			stats.ssid_UnicastPacketsReceived);
+		printf("ssid_DiscardedPacketsSent	= %lu\n", stats.ssid_DiscardedPacketsSent);
+		printf("ssid_DiscardedPacketsReceived	= %lu\n",
+			stats.ssid_DiscardedPacketsReceived);
+		printf("ssid_MulticastPacketsSent	= %lu\n", stats.ssid_MulticastPacketsSent);
+		printf("ssid_MulticastPacketsReceived	= %lu\n",
+			stats.ssid_MulticastPacketsReceived);
+		printf("ssid_BroadcastPacketsSent	= %lu\n", stats.ssid_BroadcastPacketsSent);
+		printf("ssid_BroadcastPacketsRecevied	= %lu\n",
+			stats.ssid_BroadcastPacketsRecevied);
+		printf("ssid_UnknownPacketsReceived	= %lu\n",
+			stats.ssid_UnknownPacketsReceived);
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceDiagnosticResult")) {
+		wifi_associated_dev_t *associated_dev_array = NULL,*pt = NULL;
+		UINT array_size = 0;
+		UINT i = 0;
+		ret = wifi_getApAssociatedDeviceDiagnosticResult(index, &associated_dev_array,
+			&array_size);
+		if (ret != RETURN_ERR) {
+			printf("Total_STA:%d\n", array_size);
+			for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
+				printf("\nsta_%d: cli_MACAddress :%02X:%02X:%02X:%02X:%02X:%02X\n",
+					i + 1, pt->cli_MACAddress[0], pt->cli_MACAddress[1],
+					pt->cli_MACAddress[2], pt->cli_MACAddress[3],
+					pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
+				printf("sta_%d: cli_LastDataDownlinkRate	:%d\n", i + 1,
+					pt->cli_LastDataDownlinkRate);
+				printf("sta_%d: cli_LastDataUplinkRate		:%d\n", i + 1,
+					pt->cli_LastDataUplinkRate);
+				printf("sta_%d: cli_SignalStrength		:%d\n", i + 1,
+					pt->cli_SignalStrength);
+				printf("sta_%d: cli_OperatingStandard		:%s\n", i + 1,
+					pt->cli_OperatingStandard);
+				printf("sta_%d: cli_OperatingChannelBandwidth	:%s\n", i + 1,
+					pt->cli_OperatingChannelBandwidth);
+				printf("sta_%d: cli_SNR				:%d\n", i + 1,
+					pt->cli_SNR);
+				printf("sta_%d: cli_RSSI			:%d\n", i + 1,
+					pt->cli_RSSI);
+				printf("sta_%d: cli_AuthenticationState		:%d\n", i + 1,
+					pt->cli_AuthenticationState);
+				printf("sta_%d: cli_Retransmissions		:%d\n", i + 1,
+					pt->cli_Retransmissions);
+				printf("sta_%d: cli_Disassociations		:%d\n", i + 1,
+					pt->cli_Disassociations);
+				printf("sta_%d: cli_AuthenticationFailures	:%d\n", i + 1,
+					pt->cli_AuthenticationFailures);
+			}
+			if (associated_dev_array) {
+				free(associated_dev_array);
+			}
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceDiagnosticResult2")) {
+		wifi_associated_dev2_t *associated_dev_array = NULL,*pt = NULL;
+		UINT array_size = 0;
+		UINT i = 0;
+		ret = wifi_getApAssociatedDeviceDiagnosticResult2(index, &associated_dev_array, &array_size);
+		if (ret != RETURN_ERR) {
+			printf("Total_STA:%d\n", array_size);
+			for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
+				printf("\nsta_%d:  cli_MACAddress	:%02X:%02X:%02X:%02X:%02X:%02X\n",
+					i + 1, pt->cli_MACAddress[0], pt->cli_MACAddress[1],
+					pt->cli_MACAddress[2], pt->cli_MACAddress[3],
+					pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
+				printf("sta_%d:  cli_LastDataDownlinkRate	:%d\n", i + 1,
+					pt->cli_LastDataDownlinkRate);
+				printf("sta_%d:  cli_LastDataUplinkRate		:%d\n", i + 1,
+					pt->cli_LastDataUplinkRate);
+				printf("sta_%d:  cli_SignalStrength		:%d\n", i + 1,
+					pt->cli_SignalStrength);
+				printf("sta_%d:  cli_OperatingStandard		:%s\n", i + 1,
+					pt->cli_OperatingStandard);
+				printf("sta_%d: cli_OperatingChannelBandwidth	:%s\n", i + 1,
+					pt->cli_OperatingChannelBandwidth);
+				printf("sta_%d: cli_SNR				:%d\n", i + 1,
+					pt->cli_SNR);
+				printf("sta_%d: cli_RSSI			:%d\n", i + 1,
+					pt->cli_RSSI);
+				printf("sta_%d: cli_AuthenticationState		:%d\n", i + 1,
+					pt->cli_AuthenticationState);
+				printf("sta_%d: cli_Retransmissions		:%d\n", i + 1,
+					pt->cli_Retransmissions);
+				printf("sta_%d: cli_Disassociations		:%d\n", i + 1,
+					pt->cli_Disassociations);
+				printf("sta_%d: cli_AuthenticationFailures	:%d\n", i + 1,
+					pt->cli_AuthenticationFailures);
+				printf("sta_%d: cli_Associations		:%llu\n", i + 1,
+					pt->cli_Associations);
+			}
+			if (associated_dev_array) {
+				free(associated_dev_array);
+			}
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceDiagnosticResult3")) {
+		wifi_associated_dev3_t *associated_dev_array = NULL,*pt = NULL;
+		UINT array_size = 0;
+		UINT i = 0;
+		ret = wifi_getApAssociatedDeviceDiagnosticResult3(index, &associated_dev_array,
+			&array_size);
+		if (ret != RETURN_ERR) {
+			printf("Total_STA:%d\n", array_size);
+			for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
+				printf("\nsta_%d: cli_MACAddress		:%02X:%02X:%02X:%02X:%02X:%02X\n",
+					i + 1, pt->cli_MACAddress[0], pt->cli_MACAddress[1],
+					pt->cli_MACAddress[2], pt->cli_MACAddress[3],
+					pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
+				printf("sta_%d: cli_LastDataDownlinkRate	:%d\n", i + 1,
+					pt->cli_LastDataDownlinkRate);
+				printf("sta_%d: cli_LastDataUplinkRate		:%d\n", i + 1,
+					pt->cli_LastDataUplinkRate);
+				printf("sta_%d: cli_SignalStrength		:%d\n", i + 1,
+					pt->cli_SignalStrength);
+				printf("sta_%d: cli_OperatingStandard		:%s\n", i + 1,
+					pt->cli_OperatingStandard);
+				printf("sta_%d: cli_OperatingChannelBandwidth	:%s\n", i + 1,
+					pt->cli_OperatingChannelBandwidth);
+				printf("sta_%d: cli_SNR				:%d\n", i + 1,
+					pt->cli_SNR);
+				printf("sta_%d: cli_RSSI			:%d\n", i + 1,
+					pt->cli_RSSI);
+				printf("sta_%d: cli_AuthenticationState		:%d\n", i + 1,
+					pt->cli_AuthenticationState);
+				printf("sta_%d: cli_Retransmissions		:%d\n", i + 1,
+					pt->cli_Retransmissions);
+				printf("sta_%d: cli_Disassociations		:%d\n", i + 1,
+					pt->cli_Disassociations);
+				printf("sta_%d: cli_AuthenticationFailures	:%d\n", i + 1,
+					pt->cli_AuthenticationFailures);
+				printf("sta_%d: cli_Associations		:%llu\n", i + 1,
+					pt->cli_Associations);
+				printf("sta_%d: cli_BytesSent			:%lu\n", i + 1,
+					pt->cli_BytesSent);
+				printf("sta_%d: cli_BytesReceived		:%lu\n", i + 1,
+					pt->cli_BytesReceived);
+				printf("sta_%d: cli_PacketsSent			:%lu\n", i + 1,
+					pt->cli_PacketsSent);
+				printf("sta_%d: cli_PacketsReceived		:%lu\n", i + 1,
+					pt->cli_PacketsReceived);
+				printf("sta_%d: cli_ErrorsSent			:%lu\n", i + 1,
+					pt->cli_ErrorsSent);
+				printf("sta_%d: cli_RetransCount		:%lu\n", i + 1,
+					pt->cli_RetransCount);
+				printf("sta_%d: cli_FailedRetransCount		:%lu\n", i + 1,
+					pt->cli_FailedRetransCount);
+				printf("sta_%d: cli_RetryCount			:%lu\n", i + 1,
+					pt->cli_RetryCount);
+				printf("sta_%d: cli_MultipleRetryCount		:%lu\n", i + 1,
+					pt->cli_MultipleRetryCount);
+				printf("sta_%d: cli_MaxDownlinkRate		:%d\n", i + 1,
+					pt->cli_MaxDownlinkRate);
+				printf("sta_%d: cli_MaxUplinkRate		:%d\n", i + 1,
+					pt->cli_MaxUplinkRate);
+			}
+			if (associated_dev_array) {
+				free(associated_dev_array);
+			}
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getRadioBandUtilization")) {
+		INT output_percentage;
+		ret = wifi_getRadioBandUtilization(index, &output_percentage);
+		printf("%d\n", output_percentage);
+	} else if (!strcmp(argv[1], "wifi_getApAclDeviceNum")) {
+		UINT output_devicenum;
+		ret = wifi_getApAclDeviceNum(index, &output_devicenum);
+		printf("%u\n", output_devicenum);
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDevice")) {
+		CHAR output_buf[MAX_OUTPUT_STRING_LEN_1024];
+		INT output_buf_size = MAX_OUTPUT_STRING_LEN_1024;
+		memset(output_buf, 0, MAX_OUTPUT_STRING_LEN_1024);
+		ret = wifi_getApAssociatedDevice(index, output_buf, output_buf_size);
+		printf("%s\n", output_buf);
+	} else if (!strcmp(argv[1], "wifi_getApBeaconRate")) {
+		CHAR beaconrate[32] = {0};
+		ret = wifi_getApBeaconRate(index, beaconrate);
+		printf("%s\n", beaconrate);
+	} else if (!(strcmp(argv[1], "wifi_getApTxBeaconFrameCount"))) {
+		UINT count;
+		ret = wifi_getApTxBeaconFrameCount(index, &count);
+		printf("txbcnfrm count %d\n", count);
+	} else if (!strcmp(argv[1], "wifi_getATMCapable")) {
+		BOOL capable;
+		ret = wifi_getATMCapable(&capable);
+		printf("%s\n", capable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getRadioDcsDwelltime")) {
+		INT output_millsecond;
+		ret = wifi_getRadioDcsDwelltime(index, &output_millsecond);
+		if (!ret) {
+			printf("%d\n", output_millsecond);
+		}
+		else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_setRadioDcsDwelltime")) {
+		ret = wifi_setRadioDcsDwelltime(index, atoi(argv[3]));
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getRadioGuardInterval")) {
+		char guardInterval[64];
+		ret = wifi_getRadioGuardInterval(index, guardInterval);
+		printf("%s\n", guardInterval);
+	} else if (!strcmp(argv[1], "wifi_getApManagementFramePowerControl")) {
+		INT output_power;
+		ret = wifi_getApManagementFramePowerControl(index, &output_power);
+		printf("%d\n", output_power);
+	} else if (!strcmp(argv[1], "wifi_getRadioDcsScanning")) {
+		BOOL dcs;
+		ret = wifi_getRadioDcsScanning(index, &dcs);
+		printf("%d\n", dcs);
+	} else if (!strcmp(argv[1], "wifi_deleteAp")) {
 		wifi_api_info_t apiInfo;
 		strncpy(apiInfo.api_name, argv[1], 1024);
 		apiInfo.radioIndex = index;
 		ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_getSSIDNameStatus")) {
-        char name[33];
-        ret = wifi_getSSIDNameStatus(index, name);
-        if (!ret) {
-            printf("%s\n", name);
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getApMacAddressControlMode")) {
-        int mac_mode;
-        ret = wifi_getApMacAddressControlMode(index, &mac_mode);
-        printf("%d\n", mac_mode);
-    } else if (!strcmp(argv[1], "wifi_getRadioCountryCode")) {
-        char countryStr[64];
-        ret = wifi_getRadioCountryCode(index, countryStr);
-        printf("%s\n", countryStr);
-    } else if (!strcmp(argv[1], "wifi_getApBasicAuthenticationMode")) {
-        char authMode[32];
-        ret = wifi_getApBasicAuthenticationMode(index, authMode);
-        printf("%s\n", authMode);
-    } else if (!strcmp(argv[1], "wifi_getApWpaEncryptionMode")) {
-        char mode[32];
-        ret = wifi_getApWpaEncryptionMode(index, mode);
-        printf("%s\n", mode);
-    } else if (!strcmp(argv[1], "wifi_getApWpsDevicePIN")) {
-        long unsigned int pin;
-        ret = wifi_getApWpsDevicePIN(index, &pin);
-        printf("%ld\n", pin);
-    } else if (!strcmp(argv[1], "wifi_getBandSteeringCapability")) {
-        BOOL support;
-        ret = wifi_getBandSteeringCapability(&support);
-        printf("%d\n", support);
-    } else if (!strcmp(argv[1], "wifi_getRadio11nGreenfieldEnable")) {
-        BOOL enable;
-        ret = wifi_getRadio11nGreenfieldEnable(index, &enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getRadio11nGreenfieldSupported")) {
-        BOOL enable;
-        ret = wifi_getRadio11nGreenfieldSupported(index, &enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getApWpsEnable")) {
-        BOOL enable;
-        ret = wifi_getApWpsEnable(index, &enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getApSecuritySecondaryRadiusServer")) {
-        char secondaryRadiusServerIPAddr[45] = { 0 };
-        unsigned int secondaryRadiusServerPort = 0;
-        char secondaryRadiusSecret[64] = { 0 };
-
-        ret = wifi_getApSecuritySecondaryRadiusServer(index, secondaryRadiusServerIPAddr, &secondaryRadiusServerPort, secondaryRadiusSecret);
-        printf("Secondary Radius server IP Address:%s\n", secondaryRadiusServerIPAddr);
-        printf("Secondary Radius server Port:%d\n", secondaryRadiusServerPort);
-        printf("Secondary Radius server Secret Key:%s\n", secondaryRadiusSecret);
-    } else if (!strcmp(argv[1], "wifi_getApSecurityRadiusServer")) {
-        char radiusServerIPAddr[45];
-        unsigned int radiusServerPort;
-        char radiusSecret[64];
-
-        ret = wifi_getApSecurityRadiusServer(index, radiusServerIPAddr, &radiusServerPort, radiusSecret);
-        printf("Radius server IP Address:%s\n", radiusServerIPAddr);
-        printf("Radius server Port:%d\n", radiusServerPort);
-        printf("Radius server Secret Key:%s\n", radiusSecret);
-    } else if (!strcmp(argv[1], "wifi_getApSecurityRadiusSettings")) {
-        wifi_radius_setting_t radius = { 0 };
-        ret = wifi_getApSecurityRadiusSettings(index, &radius);
-        printf("%s %d: returns %d\n", argv[1], index, ret);
-
-        printf(" RadiusServerRetries                   =%d\n", radius.RadiusServerRetries);
-        printf(" RadiusServerRequestTimeout            =%d\n", radius.RadiusServerRequestTimeout);
-        printf(" PMKLifetime                           =%d\n", radius.PMKLifetime);
-        printf(" PMKCaching                            =%s\n", (radius.PMKCaching == TRUE) ? "Enable" : "Disable");
-        printf(" PMKCacheInterval                      =%d\n", radius.PMKCacheInterval);
-        printf(" MaxAuthenticationAttempts             =%d\n", radius.MaxAuthenticationAttempts);
-        printf(" BlacklistTableTimeout                 =%d\n", radius.BlacklistTableTimeout);
-        printf(" IdentityRequestRetryInterval          =%d\n", radius.IdentityRequestRetryInterval);
-        printf(" QuietPeriodAfterFailedAuthentication  =%d\n", radius.QuietPeriodAfterFailedAuthentication);
-    } else if (!strcmp(argv[1], "wifi_setApSecurityRadiusSettings")) {
-	wifi_api_info_t apiInfo;
-
-	strncpy(apiInfo.api_name, argv[1], 1024);
-	snprintf(apiInfo.api_data, 1024, "%s %s %s %s %s %s %s %s %s",
-		argv[3], argv[4], argv[5], argv[6], argv[7], argv[8], argv[9], argv[10], argv[11]);
-	apiInfo.radioIndex = index;
-	ret = wifi_api_send_msg(&apiInfo);
-        printf("%s %d: returns %d\n", argv[1], index, ret);
-    } else if (!strcmp(argv[1], "wifi_getApBridgeInfo")) {
-        char apBridgeName[32 + 1];
-        char apBridgeIP[16];
-        char apBridgeSubnet[16];
-
-        ret = wifi_getApBridgeInfo(index, apBridgeName, apBridgeIP, apBridgeSubnet);
-        printf("AP bridge name:%s\n", apBridgeName);
-        printf("AP bridge IP:%s\n", apBridgeIP);
-        printf("AP bridge subnet:%s\n", apBridgeSubnet);
-    } else if (!strcmp(argv[1], "wifi_getRadioDCSChannelPool")) {
-	char pool[256];
-	ret = wifi_getRadioDCSChannelPool(index, pool);
-	if (!ret) {
-		printf("%s\n", pool);
-	}
-	else {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_setRadioDCSChannelPool")) {
-	ret = wifi_setRadioDCSChannelPool(index, argv[3]);
-	if (ret != 0) {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_getRadioBasicDataTransmitRates")) {
-        char transmitRates[64];
-        ret = wifi_getRadioBasicDataTransmitRates(index, transmitRates);
-        printf("%s\n", transmitRates);
-    } else if (!strcmp(argv[1], "wifi_getApSecurityModesSupported")) {
-        char securityModes[128];
-        ret = wifi_getApSecurityModesSupported(index, securityModes);
-        printf("%s\n", securityModes);
-    } else if (!strcmp(argv[1], "wifi_getApSecurityModeEnabled")) {
-        char securityModeEnabled[64];
-        ret = wifi_getApSecurityModeEnabled(index, securityModeEnabled);
-        printf("%s\n", securityModeEnabled);
-    } else if (!strcmp(argv[1], "wifi_getApSecurityKeyPassphrase")) {
-        char securityKeyPassphrase[64];
-        ret = wifi_getApSecurityKeyPassphrase(index, securityKeyPassphrase);
-        printf("%s\n", securityKeyPassphrase);
-    } else if (!strcmp(argv[1], "wifi_getRadioOperatingChannelBandwidth")) {
-        char bandwidth[64];
-        ret = wifi_getRadioOperatingChannelBandwidth(index, bandwidth);
-        printf("%s\n", bandwidth);
-    } else if (!strcmp(argv[1], "wifi_getApWpsConfigMethodsEnabled")) {
-        char configMethods[256];
-        ret = wifi_getApWpsConfigMethodsEnabled(index, configMethods);
-        printf("%s\n", configMethods);
-    } else if (!strcmp(argv[1], "wifi_getRadioChannel")) {
-        unsigned long channel;
-        ret = wifi_getRadioChannel(index, &channel);
-        printf("%ld\n", channel);
-    } else if (!strcmp(argv[1], "wifi_getRadioAutoChannelEnable")) {
-        BOOL enable;
-        ret = wifi_getRadioAutoChannelEnable(index, &enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getRadioAutoChannelSupported")) {
-       BOOL enable;
-       ret = wifi_getRadioAutoChannelSupported(index, &enable);
-       printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getRadioPossibleChannels")) {
-        char channels[512];
-        ret = wifi_getRadioPossibleChannels(index, channels);
-        printf("%s\n", channels);
-    } else if (!strcmp(argv[1], "wifi_getRadioTransmitPower")) {
-        unsigned long power;
-        ret = wifi_getRadioTransmitPower(index, &power);
-        printf("%ld\n", power);
-    } else if (!strcmp(argv[1], "wifi_getRadioAMSDUEnable")) {
-        BOOL enable;
-        ret = wifi_getRadioAMSDUEnable(index, &enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getRadioTxChainMask")) {
-        int txchain_mask;
-        ret = wifi_getRadioTxChainMask(index, &txchain_mask);
-        printf("%d\n", txchain_mask);
-    } else if (!strcmp(argv[1], "wifi_getRadioRxChainMask")) {
-        int rxchain_mask;
-        ret = wifi_getRadioRxChainMask(index, &rxchain_mask);
-        printf("%d\n", rxchain_mask);
-    } else if (!strcmp(argv[1], "wifi_getApName")) {
-        char name[64];
-        ret = wifi_getApName(index, name);
-        printf("%s\n", name);
-    } else if (!strcmp(argv[1], "wifi_getRadioChannelsInUse")) {
-	char channels_in_use[256];
-        ret = wifi_getRadioChannelsInUse(index, channels_in_use);
-	if (!ret) {
-		printf("%s\n", channels_in_use);
-	} else {
-		printf("%s returned ERROR radioIndex[%d]\n", argv[1], index);
-	}
-    } else if (!strcmp(argv[1], "wifi_getApSsidAdvertisementEnable")) {
-        BOOL enable;
-        ret = wifi_getApSsidAdvertisementEnable(index, &enable);
-        printf("%d\n", enable);
-    } else if (!strcmp(argv[1], "wifi_getApBeaconType")) {
-        char securityType[32];
-        ret = wifi_getApBeaconType(index, securityType);
-        printf("%s\n", securityType);
-    } else if (!strcmp(argv[1], "wifi_getBasicTrafficStats")) {
-        wifi_basicTrafficStats_t basicStats;
-        ret = wifi_getBasicTrafficStats(index, &basicStats);
-        printf("Bytes Sent: %ld\n", basicStats.wifi_BytesSent);
-        printf("Bytes Received: %ld\n", basicStats.wifi_BytesReceived);
-        printf("Packets Sent: %ld\n", basicStats.wifi_PacketsSent);
-        printf("Packets Received: %ld\n", basicStats.wifi_PacketsReceived);
-        printf("Associations: %ld\n", basicStats.wifi_Associations);
-    } else if (!strcmp(argv[1], "wifi_getWifiTrafficStats")) {
-        wifi_trafficStats_t wifiStats;
-        ret = wifi_getWifiTrafficStats(index, &wifiStats);
-        printf("Errors Sent: %ld\n", wifiStats.wifi_ErrorsSent);
-        printf("Errors Received: %ld\n", wifiStats.wifi_ErrorsReceived);
-        printf("Unicast Packets Sent: %ld\n", wifiStats.wifi_UnicastPacketsSent);
-        printf("Unicast Packets Received: %ld\n", wifiStats.wifi_UnicastPacketsReceived);
-        printf("Discarded Packets Sent: %ld\n", wifiStats.wifi_DiscardedPacketsSent);
-        printf("Discarded Packets Received: %ld\n", wifiStats.wifi_DiscardedPacketsReceived);
-        printf("Multicast Packets Sent: %ld\n", wifiStats.wifi_MulticastPacketsSent);
-        printf("Multicast Packets Received: %ld\n", wifiStats.wifi_MulticastPacketsReceived);
-        printf("Broadcast Packets Sent: %ld\n", wifiStats.wifi_BroadcastPacketsSent);
-        printf("Broadcast Packets Recevied: %ld\n", wifiStats.wifi_BroadcastPacketsRecevied);
-        printf("Unknown Packets Received: %ld\n", wifiStats.wifi_UnknownPacketsReceived);
-    } else if (!strcmp(argv[1], "wifi_getApNumDevicesAssociated")) {
-        unsigned long num;
-        ret = wifi_getApNumDevicesAssociated(index, &num);
-        printf("%ld\n", num);
-    } else if (!strcmp(argv[1], "wifi_getAllAssociatedDeviceDetail")) {
-        unsigned long array_size;
-        wifi_device_t *associated_dev_array = NULL,*pt = NULL;
-        int i;
-        ret = wifi_getAllAssociatedDeviceDetail(index, &array_size, &associated_dev_array);
-        printf("Total_STA:%ld\n", array_size);
-        for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
-            printf("sta_%d:  wifi_devMacAddress = %x:%x:%x:%x:%x:%x\n", i + 1, pt->wifi_devMacAddress[0], pt->wifi_devMacAddress[1], pt->wifi_devMacAddress[2],
-                   pt->wifi_devMacAddress[3], pt->wifi_devMacAddress[4], pt->wifi_devMacAddress[5]);
-            printf("sta_%d:  wifi_devIPAddress = %s\n", i + 1, pt->wifi_devIPAddress);
-            printf("sta_%d:  wifi_devAssociatedDeviceAuthentiationState = %d\n", i + 1, pt->wifi_devAssociatedDeviceAuthentiationState);
-            printf("sta_%d:  wifi_devSignalStrength = %d\n", i + 1, pt->wifi_devSignalStrength);
-            printf("sta_%d:  wifi_devTxRate = %d\n", i + 1, pt->wifi_devTxRate);
-            printf("sta_%d:  wifi_devRxRate = %d\n", i + 1, pt->wifi_devRxRate);
-        }
-        if (associated_dev_array) {
-            free(associated_dev_array); //make sure to free the list
-        }
-    } else if (!strcmp(argv[1], "wifi_getApAclDevices")) {
-        char apAclDevList[360];
-        char *acl = NULL;
-        unsigned int apAclDeviceNum = 0, i = 0;
-        wifi_getApAclDeviceNum(index, &apAclDeviceNum);
-        if (apAclDeviceNum > 0) {
-            memset(apAclDevList, '\0', sizeof(apAclDevList));
-            wifi_getApAclDevices(index, apAclDevList, sizeof(apAclDevList));
-
-            acl = strtok(apAclDevList, " ");
-            while ((acl != NULL) && (i < apAclDeviceNum)) {
-                if (strlen(acl) >= 17) {
-                    printf("%s\n", acl);
-                }
-                acl = strtok(NULL, " ");
-                ++i;
-            }
-        }
-    } else if (!strcmp(argv[1], "wifi_getApSecurityPreSharedKey")) {
-        char presharedkey[32];
-        ret = wifi_getApSecurityPreSharedKey(index, presharedkey);
-        printf("%s\n", presharedkey);
-    } else if (!strcmp(argv[1], "wifi_getApWpsConfigurationState")) {
-        char configstate[32];
-        ret = wifi_getApWpsConfigurationState(index, configstate);
-        printf("%s\n", configstate);
-    } else if (!strcmp(argv[1], "wifi_getRadioSupportedDataTransmitRates")) {
-        char transmit_rates[256];
-        ret = wifi_getRadioSupportedDataTransmitRates(index, transmit_rates);
-        printf("%s\n", transmit_rates);
-    } else if (!strcmp(argv[1], "wifi_getRadioOperationalDataTransmitRates")) {
-        char transmit_rates[256];
-        ret = wifi_getRadioOperationalDataTransmitRates(index, transmit_rates);
-        printf("%s\n", transmit_rates);
-    } else if (!strcmp(argv[1], "wifi_getRadioExtChannel")) {
-        char ext[64];
-        ret = wifi_getRadioExtChannel(index, ext);
-        printf("%s\n", ext);
-    } else if (!strcmp(argv[1], "wifi_getRadioTransmitPowerSupported")) {
-        char transmitPowerSupported[64];
-        ret = wifi_getRadioTransmitPowerSupported(index, transmitPowerSupported);
-        printf("%s\n", transmitPowerSupported);
-    }
-    else if (!strcmp(argv[1], "wifi_getApWpsConfigMethodsSupported")) {
-        char methods[256];
-        ret = wifi_getApWpsConfigMethodsSupported(index, methods);
-        printf("%s\n", methods);
-    } else if (!strcmp(argv[1], "wifi_getBandSteeringBandUtilizationThreshold")) {
-        int threshold;
-        ret = wifi_getBandSteeringBandUtilizationThreshold(index, &threshold);
-        printf("%d\n", threshold);
-    } else if (!strcmp(argv[1], "wifi_getApRadioIndex")) {
-        int radio_index;
-        ret = wifi_getApRadioIndex(index, &radio_index);
-        printf("%d\n", radio_index);
-    } else if (!strcmp(argv[1], "wifi_getRadioDCSScanTime")) {
-        int sec, msec;
-        ret = wifi_getRadioDCSScanTime(index, &sec, &msec);
-        printf("%d %d\n", sec, msec);
-    } else if (!strcmp(argv[1], "wifi_getBandSteeringRSSIThreshold")) {
-        int rssi;
-        ret = wifi_getBandSteeringRSSIThreshold(index, &rssi);
-        printf("%d\n", rssi);
-    } else if (!strcmp(argv[1], "wifi_getBandSteeringPhyRateThreshold")) {
-        int prThreshold;
-        ret = wifi_getBandSteeringPhyRateThreshold(index, &prThreshold);
-        printf("%d\n", prThreshold);
-    } else if (!strcmp(argv[1], "wifi_getRadioChannelStats2")) {
-        wifi_channelStats2_t outputChannelStats2;
-        ret = wifi_getRadioChannelStats2(index, &outputChannelStats2);
-        if (ret != RETURN_ERR) {
-            printf("Center Frequency:%d\n", outputChannelStats2.ch_Frequency);
-            printf("Non 802.11 Noise:%d\n", outputChannelStats2.ch_Non80211Noise);
-            printf("Max 802.11 Rssi:%d\n", outputChannelStats2.ch_Max80211Rssi);
-            printf("Other bss utilization:%d\n", outputChannelStats2.ch_ObssUtil);
-            printf("Self bss utilization:%d\n", outputChannelStats2.ch_SelfBssUtil);
-        } else {
-            printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getRadioTrafficStats2")) {
-        wifi_radioTrafficStats2_t traffic_stats;
-        ret = wifi_getRadioTrafficStats2(index, &traffic_stats);
-        printf("Bytes Sent = %lu\n", traffic_stats.radio_BytesSent);
-        printf("Bytes Recieved = %lu\n", traffic_stats.radio_BytesReceived);
-        printf("Packets Sent = %lu\n", traffic_stats.radio_PacketsSent);
-        printf("Packets Received = %lu\n", traffic_stats.radio_PacketsReceived);
-        printf("Errors Sent = %lu\n", traffic_stats.radio_ErrorsSent);
-        printf("Errors Received = %lu\n", traffic_stats.radio_ErrorsReceived);
-        printf("Discard Packets Sent = %lu\n", traffic_stats.radio_DiscardPacketsSent);
-        printf("Discard Packets Received = %lu\n", traffic_stats.radio_DiscardPacketsReceived);
-        printf("PLCP Error Count = %lu\n", traffic_stats.radio_PLCPErrorCount);
-        printf("FCS Error Count = %lu\n", traffic_stats.radio_FCSErrorCount);
-        printf("Invalid MAC Count = %lu\n", traffic_stats.radio_InvalidMACCount);
-        printf("Packets Other Received = %lu\n", traffic_stats.radio_PacketsOtherReceived);
-        printf("Noise Floor = %d\n", traffic_stats.radio_NoiseFloor);
-        printf("Channel Utilization = %lu\n", traffic_stats.radio_ChannelUtilization);
-        printf("Activity Factor = %d\n", traffic_stats.radio_ActivityFactor);
-        printf("CarrierSenseThreshold Exceeded = %d\n", traffic_stats.radio_CarrierSenseThreshold_Exceeded);
-        printf("Retransmission Metric = %d\n", traffic_stats.radio_RetransmissionMetirc);
-        printf("Maximum Noise Floor On Channel = %d\n", traffic_stats.radio_MaximumNoiseFloorOnChannel);
-        printf("Minimum Noise Floor On Channel = %d\n", traffic_stats.radio_MinimumNoiseFloorOnChannel);
-        printf("Median Noise Floor On Channel = %d\n", traffic_stats.radio_MedianNoiseFloorOnChannel);
-        printf("Statistics Start Time = %lu\n", traffic_stats.radio_StatisticsStartTime);
-    } else if (!strcmp(argv[1], "wifi_getApSecurityMFPConfig")) {
-        char mfp_config[32];
-        ret = wifi_getApSecurityMFPConfig(index, mfp_config);
-        printf("%s\n", mfp_config);
-    }
-    /* 802.11r FBT HAL test starts */
+	} else if (!strcmp(argv[1], "wifi_getSSIDNameStatus")) {
+		char name[33];
+		ret = wifi_getSSIDNameStatus(index, name);
+		if (!ret) {
+			printf("%s\n", name);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getApMacAddressControlMode")) {
+		int mac_mode;
+		ret = wifi_getApMacAddressControlMode(index, &mac_mode);
+		printf("%d\n", mac_mode);
+	} else if (!strcmp(argv[1], "wifi_getRadioCountryCode")) {
+		char countryStr[64];
+		ret = wifi_getRadioCountryCode(index, countryStr);
+		printf("%s\n", countryStr);
+	} else if (!strcmp(argv[1], "wifi_getApBasicAuthenticationMode")) {
+		char authMode[32];
+		ret = wifi_getApBasicAuthenticationMode(index, authMode);
+		printf("%s\n", authMode);
+	} else if (!strcmp(argv[1], "wifi_getApWpaEncryptionMode")) {
+		char mode[32];
+		ret = wifi_getApWpaEncryptionMode(index, mode);
+		printf("%s\n", mode);
+	} else if (!strcmp(argv[1], "wifi_getApWpsDevicePIN")) {
+		long unsigned int pin;
+		ret = wifi_getApWpsDevicePIN(index, &pin);
+		printf("%ld\n", pin);
+	} else if (!strcmp(argv[1], "wifi_getBandSteeringCapability")) {
+		BOOL support;
+		ret = wifi_getBandSteeringCapability(&support);
+		printf("%d\n", support);
+	} else if (!strcmp(argv[1], "wifi_getRadio11nGreenfieldEnable")) {
+		BOOL enable;
+		ret = wifi_getRadio11nGreenfieldEnable(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getRadio11nGreenfieldSupported")) {
+		BOOL enable;
+		ret = wifi_getRadio11nGreenfieldSupported(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getApWpsEnable")) {
+		BOOL enable;
+		ret = wifi_getApWpsEnable(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getApSecuritySecondaryRadiusServer")) {
+		char secondaryRadiusServerIPAddr[45] = { 0 };
+		unsigned int secondaryRadiusServerPort = 0;
+		char secondaryRadiusSecret[64] = { 0 };
+
+		ret = wifi_getApSecuritySecondaryRadiusServer(index, secondaryRadiusServerIPAddr,
+			&secondaryRadiusServerPort, secondaryRadiusSecret);
+		printf("Secondary Radius server IP Address:%s\n", secondaryRadiusServerIPAddr);
+		printf("Secondary Radius server Port:%d\n", secondaryRadiusServerPort);
+		printf("Secondary Radius server Secret Key:%s\n", secondaryRadiusSecret);
+	} else if (!strcmp(argv[1], "wifi_getApSecurityRadiusServer")) {
+		char radiusServerIPAddr[45];
+		unsigned int radiusServerPort;
+		char radiusSecret[64];
+
+		ret = wifi_getApSecurityRadiusServer(index, radiusServerIPAddr, &radiusServerPort,
+			radiusSecret);
+		printf("Radius server IP Address:%s\n", radiusServerIPAddr);
+		printf("Radius server Port:%d\n", radiusServerPort);
+		printf("Radius server Secret Key:%s\n", radiusSecret);
+	} else if (!strcmp(argv[1], "wifi_getApSecurityRadiusSettings")) {
+		wifi_radius_setting_t radius = { 0 };
+		ret = wifi_getApSecurityRadiusSettings(index, &radius);
+		printf("%s %d: returns %d\n", argv[1], index, ret);
+
+		printf(" RadiusServerRetries			:%d\n",
+			radius.RadiusServerRetries);
+		printf(" RadiusServerRequestTimeout		:%d\n",
+			radius.RadiusServerRequestTimeout);
+		printf(" PMKLifetime				:%d\n", radius.PMKLifetime);
+		printf(" PMKCaching				:%s\n", (radius.PMKCaching == TRUE)
+			? "Enable" : "Disable");
+		printf(" PMKCacheInterva			:%d\n", radius.PMKCacheInterval);
+		printf(" MaxAuthenticationAttempts		:%d\n",
+			radius.MaxAuthenticationAttempts);
+		printf(" BlacklistTableTimeout			:%d\n",
+			radius.BlacklistTableTimeout);
+		printf(" IdentityRequestRetryInterva		:%d\n",
+			radius.IdentityRequestRetryInterval);
+		printf(" QuietPeriodAfterFailedAuthentication	:%d\n",
+			radius.QuietPeriodAfterFailedAuthentication);
+	} else if (!strcmp(argv[1], "wifi_setApSecurityRadiusSettings")) {
+		wifi_api_info_t apiInfo;
+
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%s %s %s %s %s %s %s %s %s",
+			argv[3], argv[4], argv[5], argv[6], argv[7], argv[8], argv[9], argv[10],
+			argv[11]);
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+		printf("%s %d: returns %d\n", argv[1], index, ret);
+	} else if (!strcmp(argv[1], "wifi_getApBridgeInfo")) {
+		char apBridgeName[32 + 1];
+		char apBridgeIP[16];
+		char apBridgeSubnet[16];
+
+		ret = wifi_getApBridgeInfo(index, apBridgeName, apBridgeIP, apBridgeSubnet);
+		printf("AP bridge name:%s\n", apBridgeName);
+		printf("AP bridge IP:%s\n", apBridgeIP);
+		printf("AP bridge subnet:%s\n", apBridgeSubnet);
+	} else if (!strcmp(argv[1], "wifi_getRadioDCSChannelPool")) {
+		char pool[256];
+		ret = wifi_getRadioDCSChannelPool(index, pool);
+		if (!ret) {
+			printf("%s\n", pool);
+		}
+		else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_setRadioDCSChannelPool")) {
+		ret = wifi_setRadioDCSChannelPool(index, argv[3]);
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getRadioBasicDataTransmitRates")) {
+		char transmitRates[64];
+		ret = wifi_getRadioBasicDataTransmitRates(index, transmitRates);
+		printf("%s\n", transmitRates);
+	} else if (!strcmp(argv[1], "wifi_getApSecurityModesSupported")) {
+		char securityModes[128];
+		ret = wifi_getApSecurityModesSupported(index, securityModes);
+		printf("%s\n", securityModes);
+	} else if (!strcmp(argv[1], "wifi_getApSecurityModeEnabled")) {
+		char securityModeEnabled[64];
+		ret = wifi_getApSecurityModeEnabled(index, securityModeEnabled);
+		printf("%s\n", securityModeEnabled);
+	} else if (!strcmp(argv[1], "wifi_getApSecurityKeyPassphrase")) {
+		char securityKeyPassphrase[64];
+		ret = wifi_getApSecurityKeyPassphrase(index, securityKeyPassphrase);
+		printf("%s\n", securityKeyPassphrase);
+	} else if (!strcmp(argv[1], "wifi_getRadioOperatingChannelBandwidth")) {
+		char bandwidth[64];
+		ret = wifi_getRadioOperatingChannelBandwidth(index, bandwidth);
+		printf("%s\n", bandwidth);
+	} else if (!strcmp(argv[1], "wifi_getApWpsConfigMethodsEnabled")) {
+		char configMethods[256];
+		ret = wifi_getApWpsConfigMethodsEnabled(index, configMethods);
+		printf("%s\n", configMethods);
+	} else if (!strcmp(argv[1], "wifi_getRadioChannel")) {
+		unsigned long channel;
+		ret = wifi_getRadioChannel(index, &channel);
+		printf("%ld\n", channel);
+	} else if (!strcmp(argv[1], "wifi_getRadioAutoChannelEnable")) {
+		BOOL enable;
+		ret = wifi_getRadioAutoChannelEnable(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getRadioAutoChannelSupported")) {
+		BOOL enable;
+		ret = wifi_getRadioAutoChannelSupported(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getRadioPossibleChannels")) {
+		char channels[512];
+		ret = wifi_getRadioPossibleChannels(index, channels);
+		printf("%s\n", channels);
+	} else if (!strcmp(argv[1], "wifi_getRadioTransmitPower")) {
+		unsigned long power;
+		ret = wifi_getRadioTransmitPower(index, &power);
+		printf("%ld\n", power);
+	} else if (!strcmp(argv[1], "wifi_getRadioAMSDUEnable")) {
+		BOOL enable;
+		ret = wifi_getRadioAMSDUEnable(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getRadioTxChainMask")) {
+		int txchain_mask;
+		ret = wifi_getRadioTxChainMask(index, &txchain_mask);
+		printf("%d\n", txchain_mask);
+	} else if (!strcmp(argv[1], "wifi_getRadioRxChainMask")) {
+		int rxchain_mask;
+		ret = wifi_getRadioRxChainMask(index, &rxchain_mask);
+		printf("%d\n", rxchain_mask);
+	} else if (!strcmp(argv[1], "wifi_getApName")) {
+		char name[64];
+		ret = wifi_getApName(index, name);
+		printf("%s\n", name);
+	} else if (!strcmp(argv[1], "wifi_getRadioChannelsInUse")) {
+		char channels_in_use[256];
+		ret = wifi_getRadioChannelsInUse(index, channels_in_use);
+		if (!ret) {
+			printf("%s\n", channels_in_use);
+		} else {
+			printf("%s returned ERROR radioIndex[%d]\n", argv[1], index);
+		}
+	} else if (!strcmp(argv[1], "wifi_getApSsidAdvertisementEnable")) {
+		BOOL enable;
+		ret = wifi_getApSsidAdvertisementEnable(index, &enable);
+		printf("%d\n", enable);
+	} else if (!strcmp(argv[1], "wifi_getApBeaconType")) {
+		char securityType[32];
+		ret = wifi_getApBeaconType(index, securityType);
+		printf("%s\n", securityType);
+	} else if (!strcmp(argv[1], "wifi_getBasicTrafficStats")) {
+		wifi_basicTrafficStats_t basicStats;
+		ret = wifi_getBasicTrafficStats(index, &basicStats);
+		printf("Bytes Sent		:%ld\n", basicStats.wifi_BytesSent);
+		printf("Bytes Received		:%ld\n", basicStats.wifi_BytesReceived);
+		printf("Packets Sent		:%ld\n", basicStats.wifi_PacketsSent);
+		printf("Packets Received	:%ld\n", basicStats.wifi_PacketsReceived);
+		printf("Associations		:%ld\n", basicStats.wifi_Associations);
+	} else if (!strcmp(argv[1], "wifi_getWifiTrafficStats")) {
+		wifi_trafficStats_t wifiStats;
+		ret = wifi_getWifiTrafficStats(index, &wifiStats);
+		printf("Errors Sent			:%ld\n",
+			wifiStats.wifi_ErrorsSent);
+		printf("Errors Received			:%ld\n",
+			wifiStats.wifi_ErrorsReceived);
+		printf("Unicast Packets Sent		:%ld\n",
+			wifiStats.wifi_UnicastPacketsSent);
+		printf("Unicast Packets Received	:%ld\n",
+			wifiStats.wifi_UnicastPacketsReceived);
+		printf("Discarded Packets Sent		:%ld\n",
+			wifiStats.wifi_DiscardedPacketsSent);
+		printf("Discarded Packets Received	:%ld\n",
+			wifiStats.wifi_DiscardedPacketsReceived);
+		printf("Multicast Packets Sent		:%ld\n",
+			wifiStats.wifi_MulticastPacketsSent);
+		printf("Multicast Packets Received	:%ld\n",
+			wifiStats.wifi_MulticastPacketsReceived);
+		printf("Broadcast Packets Sent		:%ld\n",
+			wifiStats.wifi_BroadcastPacketsSent);
+		printf("Broadcast Packets Recevied	:%ld\n",
+			wifiStats.wifi_BroadcastPacketsRecevied);
+		printf("Unknown Packets Received	:%ld\n",
+			wifiStats.wifi_UnknownPacketsReceived);
+	} else if (!strcmp(argv[1], "wifi_getApNumDevicesAssociated")) {
+		unsigned long num;
+		ret = wifi_getApNumDevicesAssociated(index, &num);
+		printf("%ld\n", num);
+	} else if (!strcmp(argv[1], "wifi_getAllAssociatedDeviceDetail")) {
+		unsigned long array_size;
+		wifi_device_t *associated_dev_array = NULL,*pt = NULL;
+		int i;
+		ret = wifi_getAllAssociatedDeviceDetail(index, &array_size, &associated_dev_array);
+		printf("Total_STA:%ld\n", array_size);
+		for (i = 0, pt = associated_dev_array; i < array_size; i++, pt++) {
+			printf("sta_%d: wifi_devMacAddress				:%x:%x:%x:%x:%x:%x\n",
+				i + 1, pt->wifi_devMacAddress[0], pt->wifi_devMacAddress[1],
+				pt->wifi_devMacAddress[2], pt->wifi_devMacAddress[3],
+				pt->wifi_devMacAddress[4], pt->wifi_devMacAddress[5]);
+			printf("sta_%d: wifi_devIPAddress				:%s\n",
+				i + 1, pt->wifi_devIPAddress);
+			printf("sta_%d: wifi_devAssociatedDeviceAuthentiationState	:%d\n",
+				i + 1, pt->wifi_devAssociatedDeviceAuthentiationState);
+			printf("sta_%d: wifi_devSignalStrength				:%d\n",
+				i + 1, pt->wifi_devSignalStrength);
+			printf("sta_%d: wifi_devTxRate					:%d\n",
+				i + 1, pt->wifi_devTxRate);
+			printf("sta_%d: wifi_devRxRate					:%d\n",
+				i + 1, pt->wifi_devRxRate);
+		}
+		if (associated_dev_array) {
+			free(associated_dev_array); //make sure to free the list
+		}
+	} else if (!strcmp(argv[1], "wifi_getApAclDevices")) {
+		char apAclDevList[360];
+		char *acl = NULL;
+		unsigned int apAclDeviceNum = 0, i = 0;
+		wifi_getApAclDeviceNum(index, &apAclDeviceNum);
+		if (apAclDeviceNum > 0) {
+			memset(apAclDevList, '\0', sizeof(apAclDevList));
+			wifi_getApAclDevices(index, apAclDevList, sizeof(apAclDevList));
+
+			acl = strtok(apAclDevList, " ");
+			while ((acl != NULL) && (i < apAclDeviceNum)) {
+				if (strlen(acl) >= 17) {
+					printf("%s\n", acl);
+				}
+				acl = strtok(NULL, " ");
+				++i;
+			}
+		}
+	} else if (!strcmp(argv[1], "wifi_getApSecurityPreSharedKey")) {
+		char presharedkey[32];
+		ret = wifi_getApSecurityPreSharedKey(index, presharedkey);
+		printf("%s\n", presharedkey);
+	} else if (!strcmp(argv[1], "wifi_getApWpsConfigurationState")) {
+		char configstate[32];
+		ret = wifi_getApWpsConfigurationState(index, configstate);
+		printf("%s\n", configstate);
+	} else if (!strcmp(argv[1], "wifi_getRadioSupportedDataTransmitRates")) {
+		char transmit_rates[256];
+		ret = wifi_getRadioSupportedDataTransmitRates(index, transmit_rates);
+		printf("%s\n", transmit_rates);
+	} else if (!strcmp(argv[1], "wifi_getRadioOperationalDataTransmitRates")) {
+		char transmit_rates[256];
+		ret = wifi_getRadioOperationalDataTransmitRates(index, transmit_rates);
+		printf("%s\n", transmit_rates);
+	} else if (!strcmp(argv[1], "wifi_getRadioExtChannel")) {
+		char ext[64];
+		ret = wifi_getRadioExtChannel(index, ext);
+		printf("%s\n", ext);
+	} else if (!strcmp(argv[1], "wifi_getRadioTransmitPowerSupported")) {
+		char transmitPowerSupported[64];
+		ret = wifi_getRadioTransmitPowerSupported(index, transmitPowerSupported);
+		printf("%s\n", transmitPowerSupported);
+	}
+	else if (!strcmp(argv[1], "wifi_getApWpsConfigMethodsSupported")) {
+		char methods[256];
+		ret = wifi_getApWpsConfigMethodsSupported(index, methods);
+		printf("%s\n", methods);
+	} else if (!strcmp(argv[1], "wifi_getBandSteeringBandUtilizationThreshold")) {
+		int threshold;
+		ret = wifi_getBandSteeringBandUtilizationThreshold(index, &threshold);
+		printf("%d\n", threshold);
+	} else if (!strcmp(argv[1], "wifi_getApRadioIndex")) {
+		int radio_index;
+		ret = wifi_getApRadioIndex(index, &radio_index);
+		printf("%d\n", radio_index);
+	} else if (!strcmp(argv[1], "wifi_getRadioDCSScanTime")) {
+		int sec, msec;
+		ret = wifi_getRadioDCSScanTime(index, &sec, &msec);
+		printf("%d %d\n", sec, msec);
+	} else if (!strcmp(argv[1], "wifi_getBandSteeringRSSIThreshold")) {
+		int rssi;
+		ret = wifi_getBandSteeringRSSIThreshold(index, &rssi);
+		printf("%d\n", rssi);
+	} else if (!strcmp(argv[1], "wifi_getBandSteeringPhyRateThreshold")) {
+		int prThreshold;
+		ret = wifi_getBandSteeringPhyRateThreshold(index, &prThreshold);
+		printf("%d\n", prThreshold);
+	} else if (!strcmp(argv[1], "wifi_getRadioChannelStats2")) {
+		wifi_channelStats2_t outputChannelStats2;
+		ret = wifi_getRadioChannelStats2(index, &outputChannelStats2);
+		if (ret != RETURN_ERR) {
+			printf("Center Frequency	:%d\n", outputChannelStats2.ch_Frequency);
+			printf("Non 802.11 Noise	:%d\n",
+				outputChannelStats2.ch_Non80211Noise);
+			printf("Max 802.11 Rssi		:%d\n",
+				outputChannelStats2.ch_Max80211Rssi);
+			printf("Other bss utilization	:%d\n", outputChannelStats2.ch_ObssUtil);
+			printf("Self bss utilization	:%d\n",
+				outputChannelStats2.ch_SelfBssUtil);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getRadioTrafficStats2")) {
+		wifi_radioTrafficStats2_t traffic_stats;
+		ret = wifi_getRadioTrafficStats2(index, &traffic_stats);
+		printf("Bytes Sent			:%lu\n", traffic_stats.radio_BytesSent);
+		printf("Bytes Recieved			:%lu\n",
+			traffic_stats.radio_BytesReceived);
+		printf("Packets Sent			:%lu\n", traffic_stats.radio_PacketsSent);
+		printf("Packets Received		:%lu\n",
+			traffic_stats.radio_PacketsReceived);
+		printf("Errors Sent			:%lu\n", traffic_stats.radio_ErrorsSent);
+		printf("Errors Received			:%lu\n",
+			traffic_stats.radio_ErrorsReceived);
+		printf("Discard Packets Sent		:%lu\n",
+			traffic_stats.radio_DiscardPacketsSent);
+		printf("Discard Packets Received	:%lu\n",
+			traffic_stats.radio_DiscardPacketsReceived);
+		printf("PLCP Error Count		:%lu\n",
+			traffic_stats.radio_PLCPErrorCount);
+		printf("FCS Error Count			:%lu\n",
+			traffic_stats.radio_FCSErrorCount);
+		printf("Invalid MAC Count		:%lu\n",
+			traffic_stats.radio_InvalidMACCount);
+		printf("Packets Other Received		:%lu\n",
+			traffic_stats.radio_PacketsOtherReceived);
+		printf("Noise Floor			:%d\n", traffic_stats.radio_NoiseFloor);
+		printf("Channel Utilization		:%lu\n",
+			traffic_stats.radio_ChannelUtilization);
+		printf("Activity Factor			:%d\n",
+			traffic_stats.radio_ActivityFactor);
+		printf("CarrierSenseThreshold Exceeded	:%d\n",
+			traffic_stats.radio_CarrierSenseThreshold_Exceeded);
+		printf("Retransmission Metric		:%d\n",
+			traffic_stats.radio_RetransmissionMetirc);
+		printf("Maximum Noise Floor On Channel	:%d\n",
+			traffic_stats.radio_MaximumNoiseFloorOnChannel);
+		printf("Minimum Noise Floor On Channel	:%d\n",
+			traffic_stats.radio_MinimumNoiseFloorOnChannel);
+		printf("Median Noise Floor On Channel	:%d\n",
+			traffic_stats.radio_MedianNoiseFloorOnChannel);
+		printf("Statistics Start Time		:%lu\n",
+			traffic_stats.radio_StatisticsStartTime);
+	} else if (!strcmp(argv[1], "wifi_getApSecurityMFPConfig")) {
+		char mfp_config[32];
+		ret = wifi_getApSecurityMFPConfig(index, mfp_config);
+		printf("%s\n", mfp_config);
+	/* 802.11r FBT HAL test starts */
 #ifdef MAX_KEY_HOLDERS
-    /* wifi_hal.h's 802.11r Fast Trasition definitions. macro MAX_KEY_HOLDERS as a condition to avoid RDKM compiling errors */
-    else if (!strcmp(argv[1], "wifi_testApFBTFeature")) {
-        UINT rc;
-        BOOL activate, support;
-        UINT key_lifetime;
-        // mac_address_t key_id;
-        UCHAR key_id[64];
-        UCHAR fbt_cfg[64];
-        wifi_FastTransitionConfig_t ftCfg;
-
-        /* test FBT get/set configurations */
-
-        /* wifi_[get|set]BSSTransitionActivated() */
-        rc = wifi_getBSSTransitionActivated(index, &activate);
-        printf("wifi_testApFBTConfig tests: wifi_getBSSTransitionActivated(apIndex %d, active %d) 0x%x\n", index, activate, rc);
-
-        /* change FBT config */
-        if (activate) activate = 0;
-        else activate = 1;
-
-        rc = wifi_setFastBSSTransitionActivated(index, activate);
-        printf("wifi_testApFBTConfig tests:  wifi_setBSSTransitionActivated(apIndex %d, activate %d) 0x%x\n", index, activate, rc);
-
-        /* wifi_[get|set]FTOverDSActivated() */
-        rc = wifi_getFTOverDSActivated(index, &activate);
-        printf("wifi_testApFBTConfig tests: wifi_getFTOverDSActivated(apIndex %d, activate %d) 0x%x\n", index, activate, rc);
-
-        /* wifi_[get|set]FTMobilityDomainID() */
-        rc = wifi_getFTMobilityDomainID(index, fbt_cfg);
-        printf("wifi_testApFBTConfig tests:  wifi_getFTMobilityDomainID(apIndex %d, 0x%x 0x%x) 0x%x\n", index, fbt_cfg[0], fbt_cfg[1], rc);
-
-        rc = wifi_setFTMobilityDomainID(index, fbt_cfg);
-        printf("wifi_testApFBTConfig tests: wifi_setFTMobilityDomainID(apIndex %d, 0x%x 0x%x) 0x%x\n", index, fbt_cfg[0], fbt_cfg[1], rc);
-
-        /* wifi_[get|set]FTResourceRequestSupported() */
-        rc = wifi_getFTResourceRequestSupported(index, &support);
-        printf("wifi_testApFBTConfig tests:  wifi_getFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n", index, support, rc);
-
-        support = TRUE;
-        rc = wifi_setFTResourceRequestSupported(index, &support);
-        printf("wifi_testApFBTConfig tests:  wifi_setFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n", index, support, rc);
-
-        /* wifi_[get|set]FTR0KeyLifetime() */
-        rc = wifi_getFTR0KeyLifetime(index, &key_lifetime);
-        printf("wifi_testApFBTConfig tests:  wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n", index, key_lifetime, rc);
-
-        key_lifetime = 9999999;
-        rc = wifi_setFTR0KeyLifetime(index, &key_lifetime);
-        printf("wifi_testApFBTConfig tests:  wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n", index, key_lifetime, rc);
-
-        /* wifi_[get|set]FTR0KeyHolderID() */
-        rc = wifi_getFTR0KeyHolderID(index, &key_id[0]);
-        printf("wifi_testApFBTConfig tests:  wifi_getFTR0KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-
-        key_id[0] = 0x88;
-        rc = wifi_setFTR0KeyHolderID(index, &key_id[0]);
-        printf("wifi_testApFBTConfig tests:  wifi_setFTR0KeyHolderId (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-
-        /* wifi_[get|set]FTR1KeyHolderID() */
-        rc = wifi_getFTR1KeyHolderID(index, &key_id[0]);
-        printf("wifi_testApFBTConfig tests:  wifi_getFTR1KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-
-        key_id[0] = 0x99;
-        rc = wifi_setFTR1KeyHolderID(index, &key_id[0]);
-        printf("wifi_testApFBTConfig tests:  wifi_setFTR1KeyHolderId (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-
-        /* wifi_pushApFastTransitionConfig() */
-        ftCfg.support = FT_SUPPORT_FULL;
-        ftCfg.mobilityDomain = 0x0;
-        ftCfg.overDS = TRUE;
-        ftCfg.r0KeyLifeTime = 0xFF;
-
-        /* params .. */
-
-        rc = wifi_pushApFastTransitionConfig(index, &ftCfg);
-        printf("wifi_testApFBTConfig tests:  wifi_pushApFastTransitionConfig(apIndex %d, 0x%p) 0x%x\n", index, &ftCfg, rc);
-    } else if (!strcmp(argv[1], "wifi_setFastBSSTransitionActivated")) {
-        UINT rc;
-        BOOL activate = atoi(argv[3]);
-
-        printf("wifi_setBSSTransitionActivated(apIndex %d, ..)\n", index);
-        rc = wifi_setFastBSSTransitionActivated(index, activate);
-        printf("wifi_setFastBSSTransitionActivated(apIndex %d, activate %d) rc=%d\n", index, activate, rc);
-    } else if (!strcmp(argv[1], "wifi_getBSSTransitionActivated")) {
-        UINT rc;
-        BOOL activate;
-
-        printf("wifi_getBSSTransitionActivated(apIndex %d, ..)\n", index);
-        rc = wifi_getBSSTransitionActivated(index, &activate);
-        printf("wifi_getBSSTransitionActivated(apIndex %d, activate %d) 0x%x\n", index, activate, rc);
-    } else if (!strcmp(argv[1], "wifi_getFTOverDSActivated")) {
-        UINT rc;
-        BOOL activate;
-
-        printf("wifi_getFTOverDSActivated(apIndex %d, ..)\n", index);
-        rc = wifi_getFTOverDSActivated(index, &activate);
-        printf("wifi_getFTOverDSActivated(apIndex %d, activate %d) 0x%x\n", index, activate, rc);
-    } else if (!strcmp(argv[1], "wifi_setFTOverDSActivated")) {
-        UINT rc;
-        BOOL activate = atoi(argv[3]);
-
-        printf("wifi_setFTOverDSActivated(apIndex %d, ..)\n", index);
-        rc = wifi_setFTOverDSActivated(index, &activate);
-        printf("wifi_setFTOverDSActivated(apIndex %d, &activate %d) 0x%x\n", index, activate, rc);
-    } else if (!strcmp(argv[1], "wifi_getFTMobilityDomainID")) {
-        UINT rc;
-        UCHAR fbt_cfg[64];
-
-        printf("wifi_getFTMobilityDomainID(apIndex %d, ..)\n", index);
-        rc = wifi_getFTMobilityDomainID(index, fbt_cfg);
-        printf("wifi_getFTMobilityDomainID(apIndex %d, 0x%x 0x%x 0x%x ,,) rc=%d\n",
-               index, fbt_cfg[0], fbt_cfg[1], fbt_cfg[2], rc);
-    } else if (!strcmp(argv[1], "wifi_setFTMobilityDomainID")) {
-        UINT rc;
-        UCHAR fbt_cfg[2];
-        unsigned short *ptr = (unsigned short *)fbt_cfg;
-
-        printf("wifi_setFTMobilityDomainID: apIndex %d to ID %s\n", index, argv[3]);
-        *ptr = (unsigned short)atoi(argv[3]);
-
-        rc = wifi_setFTMobilityDomainID(index, fbt_cfg);
-        printf("wifi_setFTMobilityDomainID(apIndex %d, 0x%x 0x%x 0x%x) rc=%d\n",
-               index, fbt_cfg[0], fbt_cfg[1], *ptr, rc);
-    } else if (!strcmp(argv[1], "wifi_getFTResourceRequestSupported")) {
-        UINT rc;
-        BOOL support;
-
-        printf("wifi_getFTResourceRequestSupported(apIndex %d, ..)\n", index);
-
-        rc = wifi_getFTResourceRequestSupported(index, &support);
-        printf("wifi_getFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n", index, support, rc);
-    } else if (!strcmp(argv[1], "wifi_setFTResourceRequestSupported")) {
-        UINT rc;
-        BOOL support = atoi(argv[3]);
-
-        printf("wifi_setFTResourceRequestSupported(apIndex %d, ..)\n", index);
-
-        rc = wifi_setFTResourceRequestSupported(index, &support);
-        printf("wifi_testApFBTConfig tests:  wifi_setFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n", index, support, rc);
-    } else if (!strcmp(argv[1], "wifi_getFTR0KeyLifetime")) {
-        UINT rc;
-        UINT key_lifetime;
-
-        printf("wifi_getFTR0KeyLifetime(apIndex %d, ..)\n", index);
-
-        rc = wifi_getFTR0KeyLifetime(index, &key_lifetime);
-        printf("wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n", index, key_lifetime, rc);
-    } else if (!strcmp(argv[1], "wifi_setFTR0KeyLifetime")) {
-        UINT rc;
-        UINT key_lifetime = atoi(argv[3]);
-
-        printf("wifi_setFTR0KeyLifetime(apIndex %d, ..)\n", index);
-        rc = wifi_setFTR0KeyLifetime(index, &key_lifetime);
-        printf("wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n", index, key_lifetime, rc);
-    } else if (!strcmp(argv[1], "wifi_getFTR0KeyHolderID")) {
-        UINT rc;
-        UCHAR key_id[64];
-
-        printf("wifi_getFTR0KeyHolderID(apIndex %d, ..)\n", index);
-        rc = wifi_getFTR0KeyHolderID(index, &key_id[0]);
-        printf("wifi_getFTR0KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-    } else if (!strcmp(argv[1], "wifi_setFTR0KeyHolderID")) {
-        UINT rc;
-        UCHAR key_id[64];
-
-        printf("wifi_setFTR0KeyHolderID(apIndex %d, ..)\n", index);
-        strncpy((char *)&key_id[0], argv[3], strlen(argv[3]));
-
-        rc = wifi_setFTR0KeyHolderID(index, &key_id[0]);
-        printf("wifi_setFTR0KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-    } else if (!strcmp(argv[1], "wifi_getFTR1KeyHolderID")) {
-        UINT rc;
-        UCHAR key_id[64];
-
-        printf("wifi_getFTR1KeyHolderID(apIndex %d, ..)\n", index);
-        rc = wifi_getFTR1KeyHolderID(index, &key_id[0]);
-        printf("wifi_getFTR1KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-    } else if (!strcmp(argv[1], "wifi_setFTR1KeyHolderID")) {
-        UINT rc;
-        UCHAR key_id[64];
-
-        printf("wifi_setFTR1KeyHolderID(apIndex %d, ..)\n", index);
-
-        strncpy((char *)&key_id[0], argv[3], strlen(argv[3]));
-
-        rc = wifi_setFTR1KeyHolderID(index, &key_id[0]);
-        printf("wifi_setFTR1KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
-    } else if (!strcmp(argv[1], "wifi_pushApFastTransitionConfig")) {
-        UINT rc;
-        wifi_FastTransitionConfig_t ftCfg;
-
-        printf("wifi_pushApFastTransitionConfig(apIndex %d, ..)\n", index);
-
-        ftCfg.support = atoi(argv[3]);
-        ftCfg.mobilityDomain = atoi(argv[4]);
-        ftCfg.overDS = atoi(argv[5]);
-        ftCfg.r0KeyLifeTime = atoi(argv[6]);
-
-        /* wifi_pushApFastTransitionConfig() */
-        rc = wifi_pushApFastTransitionConfig(index, &ftCfg);
-        printf("wifi_pushApFastTransitionConfig(apIndex %d, 0x%p) 0x%x\n", index, &ftCfg, rc);
-    }
-#endif	/* MAX_KEY_HOLDERS */
-    /* 802.11r FBT HAL test ends */
-    else if ((!strcmp(argv[1], "wifi_setBandSteeringEnable")) ||
-             (!strcmp(argv[1], "wifi_removeApSecVaribles")) ||
-             (!strcmp(argv[1], "wifi_disableApEncryption")) ||
-             (!strcmp(argv[1], "wifi_setApWpsButtonPush")) ||
-             (!strcmp(argv[1], "wifi_cancelApWPS")) ||
-             (!strcmp(argv[1], "wifi_applyRadioSettings")) ||
-             (!strcmp(argv[1], "wifi_delApAclDevices")) ||
-             (!strcmp(argv[1], "wifi_setBandSteeringApGroup")) ||
-//             (!strcmp(argv[1], "wifi_setApSecurityReset")) ||
-             (!strcmp(argv[1], "wifi_applySSIDSettings"))) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        strncpy(apiInfo.api_data, argv[2], 1024);
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_apAssociatedDevice_callback_register")) {
-        /* Needs to be revisited:
-         * The below is just a dummy function wrapper to call wifi_apAssociatedDevice_callback_register*/
-        wifi_apAssociatedDevice_callback callback = wifi_apAssociatedDevice_callback_test_func;
-        wifi_apAssociatedDevice_callback_register(callback);
-        printf("wifi_apAssociatedDevice_callback_register cbThreadId=%lu\n", cbThreadId);
-        pthread_join(cbThreadId, NULL);
-    } else if (!strcmp(argv[1], "wifi_newApAssociatedDevice_callback_register")) {
-        /* Needs to be revisited:
-         * The below is just a dummy function wrapper to call wifi_newApAssociatedDevice_callback_register*/
-        wifi_newApAssociatedDevice_callback callback = wifi_newApAssociatedDevice_callback_test_func;
-        wifi_newApAssociatedDevice_callback_register(callback);
-        printf("wifi_newApAssociatedDevice_callback_register cbThreadId=%lu\n", cbThreadId);
-        pthread_join(cbThreadId, NULL);
-    } else if (!strcmp(argv[1], "wifi_apAuthEvent_callback_register")) {
-        /* The below is just a dummy function wrapper to call wifi_apDeAuthEvent_callback_register */
-        wifi_apAuthEvent_callback callback = NULL;
-        /* obsolete, this is dummy call */
-        wifi_apAuthEvent_callback_register(callback);
-    } else if (!strcmp(argv[1], "wifi_apDisassociatedDevice_callback_register")) {
-        /* The below is just a dummy function wrapper to call wifi_apDeAuthEvent_callback_register */
-        wifi_apDisassociatedDevice_callback callback = wifi_apDisassociatedDevice_callback_test_func;
-        wifi_apDisassociatedDevice_callback_register(callback);
-        /* no thread for this register */
-    } else if (!strcmp(argv[1], "wifi_apDeAuthEvent_callback_register")) {
-        /* The below is just a dummy function wrapper to call wifi_apDeAuthEvent_callback_register */
-        wifi_apDeAuthEvent_callback callback = wifi_apDeAuthEvent_callback_test_func;
-        wifi_apDeAuthEvent_callback_register(callback);
-        pthread_join(cbThreadId, NULL);
-    } else if (!strcmp(argv[1], "wifi_steering_event_callback_register")) {
-        /* The below is just a dummy function wrapper to call wifi_steering_eventRegister */
-        wifi_steering_eventCB_t callback = wifi_steering_event_callback_test_func;
-        wifi_steering_eventRegister(callback);
-        printf("wifi_steering_event_callback_register cbThreadId=%lu\n", cbThreadId);
-        pthread_join(cbThreadId, NULL);
-    } else if (!strcmp(argv[1], "wifi_steering_setGroup")) {
-        UINT g_idx;
-        wifi_steering_apConfig_t cfg2g, cfg5g;
-
-        g_idx = atoi(argv[2]);
-
-        cfg2g.apIndex = atoi(argv[3]);
-        cfg2g.utilCheckIntervalSec = atoi(argv[4]);
-        cfg2g.utilAvgCount = atoi(argv[5]);
-        cfg2g.inactCheckIntervalSec = atoi(argv[6]);
-        cfg2g.inactCheckThresholdSec = atoi(argv[7]);
-
-        cfg5g.apIndex = atoi(argv[8]);
-        cfg5g.utilCheckIntervalSec = atoi(argv[9]);
-        cfg5g.utilAvgCount = atoi(argv[10]);
-        cfg5g.inactCheckIntervalSec = atoi(argv[11]);
-        cfg5g.inactCheckThresholdSec = atoi(argv[12]);
-
-        wifi_steering_setGroup(g_idx, &cfg2g, &cfg5g);
-    } else if (!strcmp(argv[1], "wifi_steering_clientSet")) {
-        UINT g_idx;
-        INT ap_idx;
-        int k;
-        mac_address_t mac_address;
-        unsigned int macInt[6];
-        wifi_steering_clientConfig_t cli_cfg; /* 8 uint */
-
-        g_idx = atoi(argv[2]);
-        ap_idx = atoi(argv[3]);
-        sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1], &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-        for (k = 0; k < 6; k++) {
-            mac_address[k] = (unsigned char)macInt[k];
-        }
-        cli_cfg.rssiProbeHWM = atoi(argv[5]);
-        cli_cfg.rssiProbeLWM = atoi(argv[6]);
-        cli_cfg.rssiAuthHWM = atoi(argv[7]);
-        cli_cfg.rssiAuthLWM = atoi(argv[8]);
-        cli_cfg.rssiInactXing = atoi(argv[9]);
-        cli_cfg.rssiHighXing = atoi(argv[10]);
-        cli_cfg.rssiLowXing = atoi(argv[11]);
-        cli_cfg.authRejectReason = atoi(argv[12]);
-        wifi_steering_clientSet(g_idx, ap_idx, mac_address, &cli_cfg);
-    } else if (!strcmp(argv[1], "wifi_steering_clientRemove")) {
-        UINT g_idx;
-        INT ap_idx;
-        int k;
-        mac_address_t mac_address;
-        unsigned int macInt[6];
-
-        g_idx = atoi(argv[2]);
-        ap_idx = atoi(argv[3]);
-        sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1], &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-        for (k = 0; k < 6; k++) {
-            mac_address[k] = (unsigned char)macInt[k];
-        }
-        wifi_steering_clientRemove(g_idx, ap_idx, mac_address);
-    } else if (!strcmp(argv[1], "wifi_steering_clientMeasure")) {
-        UINT g_idx;
-        INT ap_idx;
-        int k;
-        mac_address_t mac_address;
-        unsigned int macInt[6];
-
-        g_idx = atoi(argv[2]);
-        ap_idx = atoi(argv[3]);
-        sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1], &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-        for (k = 0; k < 6; k++) {
-            mac_address[k] = (unsigned char)macInt[k];
-        }
-        wifi_steering_clientMeasure(g_idx, ap_idx, mac_address);
-    } else if (!strcmp(argv[1], "wifi_steering_clientDisconnect")) {
-        UINT g_idx;
-        INT ap_idx;
-        int k;
-        mac_address_t mac_address;
-        unsigned int macInt[6];
-        wifi_disconnectType_t type;
-        UINT reason;
-
-        g_idx = atoi(argv[2]);
-        ap_idx = atoi(argv[3]);
-        sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1], &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-        for (k = 0; k < 6; k++) {
-            mac_address[k] = (unsigned char)macInt[k];
-        }
-        type = atoi(argv[5]);
-        reason = atoi(argv[6]);
-        wifi_steering_clientDisconnect(g_idx, ap_idx, mac_address, type, reason);
-    } else if (!strcmp(argv[1], "wifi_getRadioClientInactivityTimeout")) {
-        int timeout = 0;
-
-        wifi_getRadioClientInactivityTimout(index, &timeout);
-        printf("Client Inactivity Timeout: wl%d - %d\n", index, timeout);
-    }
+	/* wifi_hal.h's 802.11r Fast Trasition definitions. macro MAX_KEY_HOLDERS as a condition
+	to avoid RDKM compiling errors */
+	} else if (!strcmp(argv[1], "wifi_testApFBTFeature")) {
+		UINT rc;
+		BOOL activate, support;
+		UINT key_lifetime;
+		// mac_address_t key_id;
+		UCHAR key_id[64];
+		UCHAR fbt_cfg[64];
+		wifi_FastTransitionConfig_t ftCfg;
+
+		/* test FBT get/set configurations */
+
+		/* wifi_[get|set]BSSTransitionActivated() */
+		rc = wifi_getBSSTransitionActivated(index, &activate);
+		printf("wifi_testApFBTConfig tests: wifi_getBSSTransitionActivated(apIndex %d, active %d) 0x%x\n",
+			index, activate, rc);
+
+		/* change FBT config */
+		if (activate) activate = 0;
+		else activate = 1;
+
+		rc = wifi_setFastBSSTransitionActivated(index, activate);
+		printf("wifi_testApFBTConfig tests:  wifi_setBSSTransitionActivated(apIndex %d, activate %d) 0x%x\n",
+			index, activate, rc);
+
+		/* wifi_[get|set]FTOverDSActivated() */
+		rc = wifi_getFTOverDSActivated(index, &activate);
+		printf("wifi_testApFBTConfig tests: wifi_getFTOverDSActivated(apIndex %d, activate %d) 0x%x\n",
+			index, activate, rc);
+
+		/* wifi_[get|set]FTMobilityDomainID() */
+		rc = wifi_getFTMobilityDomainID(index, fbt_cfg);
+		printf("wifi_testApFBTConfig tests:  wifi_getFTMobilityDomainID(apIndex %d, 0x%x 0x%x) 0x%x\n",
+			index, fbt_cfg[0], fbt_cfg[1], rc);
+
+		rc = wifi_setFTMobilityDomainID(index, fbt_cfg);
+		printf("wifi_testApFBTConfig tests: wifi_setFTMobilityDomainID(apIndex %d, 0x%x 0x%x) 0x%x\n",
+			index, fbt_cfg[0], fbt_cfg[1], rc);
+
+		/* wifi_[get|set]FTResourceRequestSupported() */
+		rc = wifi_getFTResourceRequestSupported(index, &support);
+		printf("wifi_testApFBTConfig tests:  wifi_getFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n",
+			index, support, rc);
+
+		support = TRUE;
+		rc = wifi_setFTResourceRequestSupported(index, &support);
+		printf("wifi_testApFBTConfig tests:  wifi_setFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n",
+			index, support, rc);
+
+		/* wifi_[get|set]FTR0KeyLifetime() */
+		rc = wifi_getFTR0KeyLifetime(index, &key_lifetime);
+		printf("wifi_testApFBTConfig tests:  wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n",
+			index, key_lifetime, rc);
+
+		key_lifetime = 9999999;
+		rc = wifi_setFTR0KeyLifetime(index, &key_lifetime);
+		printf("wifi_testApFBTConfig tests:  wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n",
+			index, key_lifetime, rc);
+
+		/* wifi_[get|set]FTR0KeyHolderID() */
+		rc = wifi_getFTR0KeyHolderID(index, &key_id[0]);
+		printf("wifi_testApFBTConfig tests:  wifi_getFTR0KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n",
+			index, key_id[0], rc);
+
+		key_id[0] = 0x88;
+		rc = wifi_setFTR0KeyHolderID(index, &key_id[0]);
+		printf("wifi_testApFBTConfig tests:  wifi_setFTR0KeyHolderId (apIndex %d, key_id[0] 0x%x) 0x%x\n",
+			index, key_id[0], rc);
+
+		/* wifi_[get|set]FTR1KeyHolderID() */
+		rc = wifi_getFTR1KeyHolderID(index, &key_id[0]);
+		printf("wifi_testApFBTConfig tests:  wifi_getFTR1KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n",
+			index, key_id[0], rc);
+
+		key_id[0] = 0x99;
+		rc = wifi_setFTR1KeyHolderID(index, &key_id[0]);
+		printf("wifi_testApFBTConfig tests:  wifi_setFTR1KeyHolderId (apIndex %d, key_id[0] 0x%x) 0x%x\n",
+			index, key_id[0], rc);
+
+		/* wifi_pushApFastTransitionConfig() */
+		ftCfg.support = FT_SUPPORT_FULL;
+		ftCfg.mobilityDomain = 0x0;
+		ftCfg.overDS = TRUE;
+		ftCfg.r0KeyLifeTime = 0xFF;
+
+		/* params .. */
+
+		rc = wifi_pushApFastTransitionConfig(index, &ftCfg);
+		printf("wifi_testApFBTConfig tests:  wifi_pushApFastTransitionConfig(apIndex %d, 0x%p) 0x%x\n",
+			index, &ftCfg, rc);
+	} else if (!strcmp(argv[1], "wifi_setFastBSSTransitionActivated")) {
+		UINT rc;
+		BOOL activate = atoi(argv[3]);
+
+		printf("wifi_setBSSTransitionActivated(apIndex %d, ..)\n", index);
+		rc = wifi_setFastBSSTransitionActivated(index, activate);
+		printf("wifi_setFastBSSTransitionActivated(apIndex %d, activate %d) rc=%d\n",
+			index, activate, rc);
+	} else if (!strcmp(argv[1], "wifi_getBSSTransitionActivated")) {
+		UINT rc;
+		BOOL activate;
+
+		printf("wifi_getBSSTransitionActivated(apIndex %d, ..)\n", index);
+		rc = wifi_getBSSTransitionActivated(index, &activate);
+		printf("wifi_getBSSTransitionActivated(apIndex %d, activate %d) 0x%x\n", index,
+			activate, rc);
+	} else if (!strcmp(argv[1], "wifi_getFTOverDSActivated")) {
+		UINT rc;
+		BOOL activate;
+
+		printf("wifi_getFTOverDSActivated(apIndex %d, ..)\n", index);
+		rc = wifi_getFTOverDSActivated(index, &activate);
+		printf("wifi_getFTOverDSActivated(apIndex %d, activate %d) 0x%x\n", index,
+			activate, rc);
+	} else if (!strcmp(argv[1], "wifi_setFTOverDSActivated")) {
+		UINT rc;
+		BOOL activate = atoi(argv[3]);
+
+		printf("wifi_setFTOverDSActivated(apIndex %d, ..)\n", index);
+		rc = wifi_setFTOverDSActivated(index, &activate);
+		printf("wifi_setFTOverDSActivated(apIndex %d, &activate %d) 0x%x\n", index,
+			activate, rc);
+	} else if (!strcmp(argv[1], "wifi_getFTMobilityDomainID")) {
+		UINT rc;
+		UCHAR fbt_cfg[64];
+
+		printf("wifi_getFTMobilityDomainID(apIndex %d, ..)\n", index);
+		rc = wifi_getFTMobilityDomainID(index, fbt_cfg);
+		printf("wifi_getFTMobilityDomainID(apIndex %d, 0x%x 0x%x 0x%x ,,) rc=%d\n",
+			   index, fbt_cfg[0], fbt_cfg[1], fbt_cfg[2], rc);
+	} else if (!strcmp(argv[1], "wifi_setFTMobilityDomainID")) {
+		UINT rc;
+		UCHAR fbt_cfg[2];
+		unsigned short *ptr = (unsigned short *)fbt_cfg;
+
+		printf("wifi_setFTMobilityDomainID: apIndex %d to ID %s\n", index, argv[3]);
+		*ptr = (unsigned short)atoi(argv[3]);
+
+		rc = wifi_setFTMobilityDomainID(index, fbt_cfg);
+		printf("wifi_setFTMobilityDomainID(apIndex %d, 0x%x 0x%x 0x%x) rc=%d\n",
+			   index, fbt_cfg[0], fbt_cfg[1], *ptr, rc);
+	} else if (!strcmp(argv[1], "wifi_getFTResourceRequestSupported")) {
+		UINT rc;
+		BOOL support;
+
+		printf("wifi_getFTResourceRequestSupported(apIndex %d, ..)\n", index);
+
+		rc = wifi_getFTResourceRequestSupported(index, &support);
+		printf("wifi_getFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n",
+			index, support, rc);
+	} else if (!strcmp(argv[1], "wifi_setFTResourceRequestSupported")) {
+		UINT rc;
+		BOOL support = atoi(argv[3]);
+
+		printf("wifi_setFTResourceRequestSupported(apIndex %d, ..)\n", index);
+
+		rc = wifi_setFTResourceRequestSupported(index, &support);
+		printf("wifi_testApFBTConfig tests:  wifi_setFTResourceRequestSupported (apIndex %d, supported %d) 0x%x\n",
+			index, support, rc);
+	} else if (!strcmp(argv[1], "wifi_getFTR0KeyLifetime")) {
+		UINT rc;
+		UINT key_lifetime;
+
+		printf("wifi_getFTR0KeyLifetime(apIndex %d, ..)\n", index);
+
+		rc = wifi_getFTR0KeyLifetime(index, &key_lifetime);
+		printf("wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n", index, key_lifetime, rc);
+	} else if (!strcmp(argv[1], "wifi_setFTR0KeyLifetime")) {
+		UINT rc;
+		UINT key_lifetime = atoi(argv[3]);
+
+		printf("wifi_setFTR0KeyLifetime(apIndex %d, ..)\n", index);
+		rc = wifi_setFTR0KeyLifetime(index, &key_lifetime);
+		printf("wifi_getFTR0KeyLifetime (apIndex %d, lifetime %d) 0x%x\n", index, key_lifetime, rc);
+	} else if (!strcmp(argv[1], "wifi_getFTR0KeyHolderID")) {
+		UINT rc;
+		UCHAR key_id[64];
+
+		printf("wifi_getFTR0KeyHolderID(apIndex %d, ..)\n", index);
+		rc = wifi_getFTR0KeyHolderID(index, &key_id[0]);
+		printf("wifi_getFTR0KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
+	} else if (!strcmp(argv[1], "wifi_setFTR0KeyHolderID")) {
+		UINT rc;
+		UCHAR key_id[64];
+
+		printf("wifi_setFTR0KeyHolderID(apIndex %d, ..)\n", index);
+		strncpy((char *)&key_id[0], argv[3], strlen(argv[3]));
+
+		rc = wifi_setFTR0KeyHolderID(index, &key_id[0]);
+		printf("wifi_setFTR0KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
+	} else if (!strcmp(argv[1], "wifi_getFTR1KeyHolderID")) {
+		UINT rc;
+		UCHAR key_id[64];
+
+		printf("wifi_getFTR1KeyHolderID(apIndex %d, ..)\n", index);
+		rc = wifi_getFTR1KeyHolderID(index, &key_id[0]);
+		printf("wifi_getFTR1KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
+	} else if (!strcmp(argv[1], "wifi_setFTR1KeyHolderID")) {
+		UINT rc;
+		UCHAR key_id[64];
+
+		printf("wifi_setFTR1KeyHolderID(apIndex %d, ..)\n", index);
+
+		strncpy((char *)&key_id[0], argv[3], strlen(argv[3]));
+
+		rc = wifi_setFTR1KeyHolderID(index, &key_id[0]);
+		printf("wifi_setFTR1KeyHolderID (apIndex %d, key_id[0] 0x%x) 0x%x\n", index, key_id[0], rc);
+	} else if (!strcmp(argv[1], "wifi_pushApFastTransitionConfig")) {
+		UINT rc;
+		wifi_FastTransitionConfig_t ftCfg;
+
+		printf("wifi_pushApFastTransitionConfig(apIndex %d, ..)\n", index);
+
+		ftCfg.support = atoi(argv[3]);
+		ftCfg.mobilityDomain = atoi(argv[4]);
+		ftCfg.overDS = atoi(argv[5]);
+		ftCfg.r0KeyLifeTime = atoi(argv[6]);
+
+		/* wifi_pushApFastTransitionConfig() */
+		rc = wifi_pushApFastTransitionConfig(index, &ftCfg);
+		printf("wifi_pushApFastTransitionConfig(apIndex %d, 0x%p) 0x%x\n", index, &ftCfg, rc);
+	}
+#endif  /* MAX_KEY_HOLDERS */
+	/* 802.11r FBT HAL test ends */
+	else if ((!strcmp(argv[1], "wifi_setBandSteeringEnable")) ||
+		(!strcmp(argv[1], "wifi_removeApSecVaribles")) ||
+		(!strcmp(argv[1], "wifi_disableApEncryption")) ||
+		(!strcmp(argv[1], "wifi_setApWpsButtonPush")) ||
+		(!strcmp(argv[1], "wifi_cancelApWPS")) ||
+		(!strcmp(argv[1], "wifi_applyRadioSettings")) ||
+		(!strcmp(argv[1], "wifi_delApAclDevices")) ||
+		(!strcmp(argv[1], "wifi_setBandSteeringApGroup")) ||
+		(!strcmp(argv[1], "wifi_applySSIDSettings"))) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		strncpy(apiInfo.api_data, argv[2], 1024);
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_apAssociatedDevice_callback_register")) {
+		/* Needs to be revisited:
+		* The below is just a dummy function wrapper to call
+		* wifi_apAssociatedDevice_callback_register */
+		wifi_apAssociatedDevice_callback callback =
+			wifi_apAssociatedDevice_callback_test_func;
+		wifi_apAssociatedDevice_callback_register(callback);
+		printf("wifi_apAssociatedDevice_callback_register cbThreadId=%lu\n", cbThreadId);
+		pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_newApAssociatedDevice_callback_register")) {
+		/* Needs to be revisited:
+		* The below is just a dummy function wrapper to call
+		* wifi_newApAssociatedDevice_callback_register */
+		wifi_newApAssociatedDevice_callback callback =
+			wifi_newApAssociatedDevice_callback_test_func;
+		wifi_newApAssociatedDevice_callback_register(callback);
+		printf("wifi_newApAssociatedDevice_callback_register cbThreadId=%lu\n", cbThreadId);
+		pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_apAuthEvent_callback_register")) {
+		/* The below is just a dummy function wrapper to call
+		* wifi_apDeAuthEvent_callback_register */
+		wifi_apAuthEvent_callback callback = NULL;
+		/* obsolete, this is dummy call */
+		wifi_apAuthEvent_callback_register(callback);
+	} else if (!strcmp(argv[1], "wifi_apDisassociatedDevice_callback_register")) {
+		/* The below is just a dummy function wrapper to call
+		* wifi_apDeAuthEvent_callback_register */
+		wifi_apDisassociatedDevice_callback callback =
+			wifi_apDisassociatedDevice_callback_test_func;
+		wifi_apDisassociatedDevice_callback_register(callback);
+		/* no thread for this register */
+	} else if (!strcmp(argv[1], "wifi_apDeAuthEvent_callback_register")) {
+		/* The below is just a dummy function wrapper to call
+		* wifi_apDeAuthEvent_callback_register */
+		wifi_apDeAuthEvent_callback callback = wifi_apDeAuthEvent_callback_test_func;
+		wifi_apDeAuthEvent_callback_register(callback);
+		pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_steering_event_callback_register")) {
+		/* The below is just a dummy function wrapper to call
+		* wifi_steering_eventRegister */
+		wifi_steering_eventCB_t callback = wifi_steering_event_callback_test_func;
+		wifi_steering_eventRegister(callback);
+		printf("wifi_steering_event_callback_register cbThreadId=%lu\n", cbThreadId);
+		pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_steering_setGroup")) {
+		UINT g_idx;
+		wifi_steering_apConfig_t cfg2g, cfg5g;
+
+		g_idx = atoi(argv[2]);
+
+		cfg2g.apIndex = atoi(argv[3]);
+		cfg2g.utilCheckIntervalSec = atoi(argv[4]);
+		cfg2g.utilAvgCount = atoi(argv[5]);
+		cfg2g.inactCheckIntervalSec = atoi(argv[6]);
+		cfg2g.inactCheckThresholdSec = atoi(argv[7]);
+
+		cfg5g.apIndex = atoi(argv[8]);
+		cfg5g.utilCheckIntervalSec = atoi(argv[9]);
+		cfg5g.utilAvgCount = atoi(argv[10]);
+		cfg5g.inactCheckIntervalSec = atoi(argv[11]);
+		cfg5g.inactCheckThresholdSec = atoi(argv[12]);
+
+		wifi_steering_setGroup(g_idx, &cfg2g, &cfg5g);
+	} else if (!strcmp(argv[1], "wifi_steering_clientSet")) {
+		UINT g_idx;
+		INT ap_idx;
+		int k;
+		mac_address_t mac_address;
+		unsigned int macInt[6];
+		wifi_steering_clientConfig_t cli_cfg; /* 8 uint */
+
+		g_idx = atoi(argv[2]);
+		ap_idx = atoi(argv[3]);
+		sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+			&macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+		for (k = 0; k < 6; k++) {
+			mac_address[k] = (unsigned char)macInt[k];
+		}
+		cli_cfg.rssiProbeHWM = atoi(argv[5]);
+		cli_cfg.rssiProbeLWM = atoi(argv[6]);
+		cli_cfg.rssiAuthHWM = atoi(argv[7]);
+		cli_cfg.rssiAuthLWM = atoi(argv[8]);
+		cli_cfg.rssiInactXing = atoi(argv[9]);
+		cli_cfg.rssiHighXing = atoi(argv[10]);
+		cli_cfg.rssiLowXing = atoi(argv[11]);
+		cli_cfg.authRejectReason = atoi(argv[12]);
+		wifi_steering_clientSet(g_idx, ap_idx, mac_address, &cli_cfg);
+	} else if (!strcmp(argv[1], "wifi_steering_clientRemove")) {
+		UINT g_idx;
+		INT ap_idx;
+		int k;
+		mac_address_t mac_address;
+		unsigned int macInt[6];
+
+		g_idx = atoi(argv[2]);
+		ap_idx = atoi(argv[3]);
+		sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+			&macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+		for (k = 0; k < 6; k++) {
+			mac_address[k] = (unsigned char)macInt[k];
+		}
+		wifi_steering_clientRemove(g_idx, ap_idx, mac_address);
+	} else if (!strcmp(argv[1], "wifi_steering_clientMeasure")) {
+		UINT g_idx;
+		INT ap_idx;
+		int k;
+		mac_address_t mac_address;
+		unsigned int macInt[6];
+
+		g_idx = atoi(argv[2]);
+		ap_idx = atoi(argv[3]);
+		sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+			&macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+		for (k = 0; k < 6; k++) {
+			mac_address[k] = (unsigned char)macInt[k];
+		}
+		wifi_steering_clientMeasure(g_idx, ap_idx, mac_address);
+	} else if (!strcmp(argv[1], "wifi_steering_clientDisconnect")) {
+		UINT g_idx;
+		INT ap_idx;
+		int k;
+		mac_address_t mac_address;
+		unsigned int macInt[6];
+		wifi_disconnectType_t type;
+		UINT reason;
+
+		g_idx = atoi(argv[2]);
+		ap_idx = atoi(argv[3]);
+		sscanf(argv[4], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+			&macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+		for (k = 0; k < 6; k++) {
+			mac_address[k] = (unsigned char)macInt[k];
+		}
+		type = atoi(argv[5]);
+		reason = atoi(argv[6]);
+		wifi_steering_clientDisconnect(g_idx, ap_idx, mac_address, type, reason);
+	} else if (!strcmp(argv[1], "wifi_getRadioClientInactivityTimeout")) {
+		int timeout = 0;
+
+		wifi_getRadioClientInactivityTimout(index, &timeout);
+		printf("Client Inactivity Timeout: wl%d - %d\n", index, timeout);
+	}
 #if WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12
-    /* 802.11K api */
+	/* 802.11K api */
+
+	else if (!strcmp(argv[1], "wifi_RMBeaconRequest_callback_register")) {
+		/* The below is just a dummy function wrapper to call
+		* wifi_RMBeaconRequestCallbackRegister */
+		wifi_RMBeaconReport_callback callback = wifi_RMBeaconReport_callback_test_func;
+		ret = wifi_RMBeaconRequestCallbackRegister(index, callback);
+		printf("%s complete. callback=%p returned %d\n", argv[1], callback, ret);
+		pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_RMBeaconRequest_callback_unregister")) {
+		wifi_RMBeaconReport_callback callback = wifi_RMBeaconReport_callback_test_func;
+		ret = wifi_RMBeaconRequestCallbackRegister(index, callback);
+		printf("%s Done Register. 6min before Unregister callback=%p cbThreadId=%p returned %d\n",
+			   argv[1], callback, (void *)cbThreadId, ret);
+		sleep(360);
+		/*  Do the setRMBeaconRequest test in these 360 sec - and look for callback
+		 *  - and see no callbacks if beyond the sleep time; then ecbd closes pipe
+		 */
+		ret = wifi_RMBeaconRequestCallbackUnregister(index, callback);
+		printf("%s Unregister. callback=%p cbThreadId=%p returned %d\n", argv[1], callback,
+			(void *)cbThreadId, ret);
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_setRMBeaconRequest")) {
+		wifi_BeaconRequest_t *bcnReqInfo;
+		UCHAR *reqbuf;
+		int buflen, k;
+		unsigned int macInt[6];
+		UCHAR out_DialogToken = 0;
+		UCHAR *bssidp;
+
+		buflen = sizeof(wifi_BeaconRequest_t);
+		reqbuf = malloc(buflen);
+		if (reqbuf == NULL) {
+			printf("%s Error Allocating reqbuf\n", argv[1]);
+			return (-1);
+		}
 
-    else if (!strcmp(argv[1], "wifi_RMBeaconRequest_callback_register")) {
-        /* The below is just a dummy function wrapper to call wifi_RMBeaconRequestCallbackRegister */
-        wifi_RMBeaconReport_callback callback = wifi_RMBeaconReport_callback_test_func;
-        ret = wifi_RMBeaconRequestCallbackRegister(index, callback);
-        printf("%s complete. callback=%p returned %d\n", argv[1], callback, ret);
-        pthread_join(cbThreadId, NULL);
-    } else if (!strcmp(argv[1], "wifi_RMBeaconRequest_callback_unregister")) {
-        wifi_RMBeaconReport_callback callback = wifi_RMBeaconReport_callback_test_func;
-        ret = wifi_RMBeaconRequestCallbackRegister(index, callback);
-        printf("%s Done Register. 6min before Unregister callback=%p cbThreadId=%p returned %d\n",
-               argv[1], callback, (void *)cbThreadId, ret);
-        sleep(360);
-        /*  Do the setRMBeaconRequest test in these 360 sec - and look for callback
-         *  - and see no callbacks if beyond the sleep time; then ecbd closes pipe
-         */
-        ret = wifi_RMBeaconRequestCallbackUnregister(index, callback);
-        printf("%s Unregister. callback=%p cbThreadId=%p returned %d\n", argv[1], callback, (void *)cbThreadId, ret);
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_setRMBeaconRequest")) {
-        wifi_BeaconRequest_t *bcnReqInfo;
-        UCHAR *reqbuf;
-        int buflen, k;
-        unsigned int macInt[6];
-        UCHAR out_DialogToken = 0;
-        UCHAR *bssidp;
-
-        buflen = sizeof(wifi_BeaconRequest_t);
-        reqbuf = malloc(buflen);
-        if (reqbuf == NULL) {
-            printf("%s Error Allocating reqbuf\n", argv[1]);
-            return (-1);
-        }
-
-        memset(reqbuf, 0, buflen);
-        bcnReqInfo = (wifi_BeaconRequest_t *)reqbuf;
-
-        printf("%s argcnt=%d \n", argv[1], argc);
-        /* Get wifi_BeaconRequest_t parameters */
-        bcnReqInfo->opClass = atoi(argv[4]);
-        bcnReqInfo->channel = atoi(argv[5]);
-        bcnReqInfo->randomizationInterval = atoi(argv[6]);
-        bcnReqInfo->duration = atoi(argv[7]);
-        if (bcnReqInfo->duration > WLC_RRM_MAX_MEAS_DUR) bcnReqInfo->duration = WLC_RRM_MAX_MEAS_DUR; // about 1 sec
-        if (bcnReqInfo->duration < 1) bcnReqInfo->duration = 1; // atleast 1 TU
-        bcnReqInfo->mode = atoi(argv[8]);
-        bssidp = (unsigned char *)(bcnReqInfo->bssid);
-        if (argv[9] != NULL) {
-            sscanf(argv[9], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
-                   &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-            for (k = 0; k < 6; k++) {
-                *bssidp = (unsigned char)macInt[k];
-                bssidp++;
-            }
-        } else {
-            memset((bssidp), 0xff, 6); // if no argv[8]
-        }
-        if (argv[10] != NULL) {
-            bcnReqInfo->numRepetitions = atoi(argv[10]);
-        } else {
-            bcnReqInfo->numRepetitions = 0;
-        }
-        // API_DBG_PRINT_BUF(__FUNCTION__, (unsigned char *)bcnReqInfo, buflen);
-        ret = wifi_setRMBeaconRequest(index, argv[3], bcnReqInfo, &out_DialogToken);
-
-        free(reqbuf);
-        printf("%s complete. returned %d\n", argv[1], ret);
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_cancelRMBeaconRequest")) {
-        unsigned char dtoken =  0;
-
-        dtoken = atoi(argv[2]);
-        ret = wifi_cancelRMBeaconRequest(index, dtoken);
-        printf("%s complete. returned %d\n", argv[1], ret);
-    } else if (!strcmp(argv[1], "wifi_getRMCapabilities")) {
-        // Input:  UCHAR peerMACAddress[6]
-        // Output: UCHAR out_Capabilities[5]
-        UCHAR out_Capabilities[5];
-        mac_address_t mac;
-        printf("Enter %s wifi_getRMCapabilities \n", __FUNCTION__);
-        parse_mac(argv[2], &mac);
-        ret = wifi_getRMCapabilities((CHAR *)(&mac[0]), out_Capabilities);
-        if (ret != -1) {
-            printf("In %s out_Capabilities = %02X %02X %02X %02X %02X  \n", __FUNCTION__,
-                   out_Capabilities[0], out_Capabilities[1], out_Capabilities[2], out_Capabilities[3], out_Capabilities[4]);
-        }
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_setNeighborReports")) {
-        /* Example: wifi_api wifi_setNeighborReports [apIndex] [cnt] \
-        *            [bssid1] [bssid info1] [regulatory1] [channel1] [phytype1] \
-        *            [bssid2] [bssid info2] [regulatory2] [channel2] [phytype2]
-        */
-        UCHAR *reqbuf;
-        int buflen, i, k, aind;
-        int ret = 0;
-        int ncnt = 0;
-        unsigned int macInt[6];
-        wifi_NeighborReport_t *nrp;
-        int nrsize;
-        UCHAR *bssidp;
-
-        printf("%s argcnt=%d \n", argv[1], argc);
-
-        ncnt = atoi(argv[3]);
-        if ((ncnt == 0) ||
-            (ncnt > MAX_NBR_CNT) ||
-            (argc < (4 + (ncnt * NUM_INPARAM_PER_NBR)))) {
-            printf("%s Error in input\n", argv[1]);
-            return (-1);
-        } else {
-            nrsize = sizeof(wifi_NeighborReport_t);
-
-            /* Get request buffer */
-            buflen = ncnt * nrsize;
-            reqbuf = malloc(buflen);
-            if (reqbuf == NULL) {
-                printf("%s Error Allocating reqbuf\n", argv[1]);
-                return (-1);
-            }
-            memset((void *)(reqbuf), 0, buflen);
-
-            /* parse input neighbor info and fill reqbuf */
-            for (i = 0; i < ncnt; i++) {
-                // Get [bssid1] [bssid info1] [regulatory1] [channel1] [phytype1]
-                aind = 4 + (i * NUM_INPARAM_PER_NBR);
-                if (argv[aind] == NULL) {
-                    free(reqbuf);
-                    printf("%s Error NULL bssid \n", argv[1]);
-                    return (-1);
-                }
-                sscanf(argv[aind], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
-                       &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-                nrp = (wifi_NeighborReport_t *)((UCHAR *)reqbuf + (i * nrsize));
-                bssidp = (unsigned char *)(nrp->bssid);
-                for (k = 0; k < 6; k++) {
-                    *bssidp = (unsigned char)(macInt[k]);
-                    bssidp++;
-                }
-                ++aind;
-                nrp->info = atoi(argv[aind++]);
-                nrp->opClass = (UCHAR)(atoi(argv[aind++]));
-                nrp->channel = (UCHAR)(atoi(argv[aind++]));
-                nrp->phyTable = (UCHAR)(atoi(argv[aind++]));
-            }
-            ret = wifi_setNeighborReports(index, ncnt, (wifi_NeighborReport_t *)(reqbuf));
-
-            free(reqbuf);
-            printf("%s complete. returned %d\n", argv[1], ret);
-            return (ret);
-        }
-    } else if (!strcmp(argv[1], "wifi_setNeighborReportActivation")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%s", argv[3]);
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-        if (ret != 0) {
-                printf("%s returned ERROR\n", argv[1]);
-        }
-    } else if (!strcmp(argv[1], "wifi_getNeighborReportActivation")) {
-        BOOL activate;
-        int ret;
-        printf("%s argcnt=%d \n", argv[1], argc);
-        ret = wifi_getNeighborReportActivation(index, &activate);
-        printf("%s complete. returned %d index=%d activate=%d \n", argv[1], ret, index, activate);
-        return (ret);
-    }
-    /* 802.11K api */
-    else if (!strcmp(argv[1], "wifi_getRadioDCSSupported")) {
-        BOOL dcs;
-        ret = wifi_getRadioDCSSupported(index, &dcs);
-        printf("%s complete. returned %d index=%d dcs=%d \n", argv[1], ret, index, dcs);
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_getRadioDCSEnable")) {
-        BOOL dcs;
-        ret = wifi_getRadioDCSEnable(index, &dcs);
-        printf("%s complete. returned %d index=%d dcs=%d \n", argv[1], ret, index, dcs);
-        return (ret);
-    }
-    /* 802.11V support */
-    else if (!strcmp(argv[1], "wifi_BTMQueryRequest_callback_register")) {
-        /* The below is just a dummy function wrapper to call wifi_RMBeaconRequestCallbackRegister */
-        wifi_BTMQueryRequest_callback callback1 = wifi_BTMQueryRequest_callback_test_func;
-        wifi_BTMResponse_callback callback2 = wifi_BTMResponse_callback_test_func;
-
-        ret = wifi_BTMQueryRequest_callback_register(index, callback1, callback2);
-        printf("%s complete. callback1=%p callback1=%p returned %d\n", argv[1], callback1, callback2, ret);
-        pthread_join(cbThreadId, NULL);
-    } else if (!strcmp(argv[1], "wifi_setBTMRequest")) {
-        /* The API format:
-           apidx peer_mac token mode [<url_len> <url>] <num-candidate> <len1> <00904C1DA06100000000162400> <len2> ...
-         */
-        wifi_BTMRequest_t *btmReqInfo;
-        int buflen, k;
-        UCHAR *reqbuf = NULL;
-        UCHAR mode;
-        UCHAR *dest;
-        char *src;
-        char hexstr[3];
-        int idx, url_len, argc_idx;
-
-        buflen = sizeof(wifi_BTMRequest_t);
-        printf("%s: buflen=%d argc=%d\n", argv[1], buflen, argc);
-
-        reqbuf = malloc(buflen);
-        if (reqbuf == NULL) {
-            printf("%s Error Allocating reqbuf\n", argv[1]);
-            goto btm_reg_error;
-        }
-
-        memset(reqbuf, 0, buflen);
-        btmReqInfo = (wifi_BTMRequest_t *)reqbuf;
-
-        if (argv[3] == NULL) {
-            printf("%s Error: peer MAC can't be NULL\n", argv[1]);
-            goto btm_reg_error;
-        }
-
-        /* read req mode */
-        mode = 5; /* default mode */
-        if (argv[5] != NULL && argc >= 6) {
-            mode = (UCHAR)atoi(argv[5]);
-        }
-
-        /* Get wifi_BTMRequest_t parameters */
-
-        btmReqInfo->token = strtoul(argv[4], NULL, 0);
-        btmReqInfo->requestMode = mode; /* DOT11_BSSTRANS_REQMODE_PREF_LIST_INCL|DOT11_BSSTRANS_REQMODE_ABRIDGED */
-        btmReqInfo->timer = 0x0000;
-        btmReqInfo->validityInterval = 0xFF;
-
-        /* handle option field "termDuration" */
-        if (mode & DOT11_BSSTRANS_REQMODE_BSS_TERM_INCL) {
-            /* bit-3 termDuration present */
-            /* TODO: the lower function wlcsm_mngr_wifi_setBTMRequest will read the real tsf */
-            btmReqInfo->termDuration.duration = 2; /* test only */
-        }
-
-        argc_idx = 6; /* argument after "mode" */
-        /* handle option field "url" */
-        url_len = 0;
-        if (mode & DOT11_BSSTRANS_REQMODE_ESS_DISASSOC_IMNT) {
-            /* bit-4 url present */
-            if (argc < (argc_idx + 2)) {
-                printf("%s Error: need url_len and url string \n", argv[1]);
-                goto btm_reg_error;
-            }
-
-            url_len = atoi(argv[argc_idx++]);
-            if (url_len >= MAX_URL_LEN) {
-                printf("%s url_len %d is too long\n", argv[1], url_len);
-                goto btm_reg_error;
-            }
-
-            /* str argv[argc_idx++] to hex */
-            dest = (UCHAR *)btmReqInfo->url;
-            btmReqInfo->urlLen = url_len;
-            if ((src = argv[argc_idx++]) == NULL) {
-                printf("%s url content not exist\n", argv[1]);
-                goto btm_reg_error;
-            }
-
-            /* string to hex */
-            for (idx = 0; idx < url_len; idx++) {
-                hexstr[0] = src[0];
-                hexstr[1] = src[1];
-                hexstr[2] = '\0';
-
-                *dest = (UCHAR)strtoul(hexstr, NULL, 16);
-
-                printf("%s (url): idx=%d dest=%p value=0x%x\n", argv[1], idx, dest, *dest);
-                dest++;
-                src += 2;
-            }
-        }
-
-        printf("%s: argc_idx=%d url_len=%d mode=0x%x\n", argv[1], argc_idx, url_len, mode);
-
-        /* handle candidate list */
-        if (argv[argc_idx] != NULL && argc >= (argc_idx + 1)) {
-            UCHAR count;
-            int candidate_len;
-
-            count = atoi(argv[argc_idx++]);
-            if ((count <= 0) || (count > BTM_MAX_CANDIDATES)) {
-                printf("%s Error: num of candidates %d is out of range (1-%d)\n",
-                       argv[1], count, BTM_MAX_CANDIDATES);
-                goto btm_reg_error;
-            }
-            btmReqInfo->numCandidates = count;
-
-            for (k = 0; k < count; k++) {
-                if (argv[argc_idx] == NULL || argv[argc_idx + 1] == NULL) {
-                    printf("Error: missing <len> <hex-string> pair for candidate %d\n", k + 1);
-                    goto btm_reg_error;
-                }
-
-                candidate_len = atoi(argv[argc_idx++]);
-
-                if (candidate_len != strlen(argv[argc_idx])/2) {
-                    printf("Error: len %d not match hex-string len %d (divided by 2)\n",
-                           candidate_len, strlen(argv[argc_idx]));
-                    goto btm_reg_error;
-                }
-
-                dest = (UCHAR *)&(btmReqInfo->candidates[k]);
-                src = argv[argc_idx++];
-
-                printf("%s: btmReqInfo=%p dest=%p argc_idx=%d\n", argv[1], btmReqInfo, dest, argc_idx);
-                /* string to hex */
-                for (idx = 0; idx < candidate_len; idx++) {
-                    hexstr[0] = src[0];
-                    hexstr[1] = src[1];
-                    hexstr[2] = '\0';
-
-                    *dest = (UCHAR)strtoul(hexstr, NULL, 16);
-
-                    printf("%s: idx=%d dest=%p value=0x%x\n", argv[1], idx, dest, *dest);
-                    dest++;
-                    src += 2;
-                }
-            }
-        }
-        else {
-            printf("Error: missing candidates\n");
-            goto btm_reg_error;
-        }
-
-        ret = wifi_setBTMRequest(index, argv[3], btmReqInfo);
-        if (reqbuf) {
-            free(reqbuf);
-            reqbuf = NULL;
-        }
-        printf("%s complete. returned %d\n", argv[1], ret);
-        return (ret);
-
-    btm_reg_error:
-        if (reqbuf) {
-            free(reqbuf);
-            reqbuf = NULL;
-        }
-        printf("Sample: wifi_api wifi_setBTMRequest 1 F0:99:BF:76:FF:54 15 5 1 13 44AAF59B178F000000000C0B00\n");
-    } else if (!strcmp(argv[1], "wifi_getBSSTransitionImplemented")) {
-        BOOL bsst_impl = 1;
-        ret = wifi_getBSSTransitionImplemented(index, &bsst_impl);
-        if (ret == 0) printf("%s complete. BSSTransitionImplemented=%d\n", argv[1], bsst_impl);
-        else printf("%s failed. ret=%d\n", argv[1], ret);
-
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_setBSSTransitionActivation")) {
-        BOOL enable;
-        if (atoi(argv[3]) == 0) enable = 0;
-        else enable = 1;
-
-        ret = wifi_setBSSTransitionActivation(index, enable);
-        printf("%s complete. ret=%d\n", argv[1], ret);
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_getBSSTransitionActivation")) {
-        BOOL enable;
-        ret = wifi_getBSSTransitionActivation(index, &enable);
-        if (ret == 0) printf("%s complete. BSSTransitionActivation=%d\n", argv[1], enable);
-        else printf("%s failed. ret=%d\n", argv[1], ret);
-        return (ret);
-    } else if (!strcmp(argv[1], "wifi_getBTMClientCapabilityList")) {
-        wifi_BTMCapabilities_t btm_caps, *btm_ptr = &btm_caps;
-        int count = 0, i, k;
-
-        mac_address_t *mac_ptr = NULL;
-        unsigned int macInt[6] = { 0 };
-        unsigned char *ptr;
-
-        count = argc - 3;
-        if (count > MAX_BTM_DEVICES) {
-            printf("Warning:  STA counts %d exceeds the limitation %d\n", count, MAX_BTM_DEVICES);
-            return (ret);
-        }
-
-        memset(btm_ptr, 0, sizeof(wifi_BTMCapabilities_t));
-
-        btm_ptr->entries = count;
-        mac_ptr = btm_ptr->peer;
-
-        for (i = 0; i < count; i++) {
-            /* MAC string to hex */
-            if (argv[3 + i] != NULL) {
-            sscanf(argv[3 + i], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
-                   &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-
-            ptr = (unsigned char *)(mac_ptr++);
-
-            for (k = 0; k < 6; k++) {
-                ptr[k] = (unsigned char)macInt[k];
-            }
-
-            printf("%s ptr=%p mac_ptr=%p MAC="MACF"\n", argv[1], ptr, mac_ptr, MAC_TO_MACF(ptr));
-            }
-        }
-
-        ret = wifi_getBTMClientCapabilityList(index, btm_ptr);
-        printf("%s complete. count=%d ret=%d\n", argv[1], count, ret);
-        return (ret);
-    }
-    /* end of 802.11V support */
-
-    /* HS2.0 api */
-    else if (!strcmp(argv[1], "wifi_getApInterworkingElement")) {
-        wifi_InterworkingElement_t output_struct;
-        ret = wifi_getApInterworkingElement(index, &output_struct);
-        printf("interworkingEnabled = %d\n", output_struct.interworkingEnabled);
-        printf("accessNetworkType = %d\n", output_struct.accessNetworkType);
-        printf("internetAvailable = %d\n", output_struct.internetAvailable);
-        printf("asra = %d\n", output_struct.asra);
-        printf("esr = %d\n", output_struct.esr);
-        printf("uesa = %d\n", output_struct.uesa);
-        printf("venueOptionPresent = %d\n", output_struct.venueOptionPresent);
-        printf("venueGroup = %d\n", output_struct.venueGroup);
-        printf("venueType = %d\n", output_struct.venueType);
-        printf("hessOptionPresent = %d\n", output_struct.hessOptionPresent);
-        printf("hessid = %s\n", output_struct.hessid);
-    } else if (!strcmp(argv[1], "wifi_getInterworkingAccessNetworkType")) {
-        UINT networkType;
-        ret = wifi_getInterworkingAccessNetworkType(index, &networkType);
-        printf("%u\n", networkType);
-    } else if (!strcmp(argv[1], "wifi_getApInterworkingServiceCapability")) {
-        BOOL interworking;
-        ret = wifi_getApInterworkingServiceCapability(index, &interworking);
-        printf("%s\n", interworking ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getApInterworkingServiceEnable")) {
-        BOOL enable;
-        ret = wifi_getApInterworkingServiceEnable(index, &enable);
-        printf("%s\n", enable ? "TRUE" : "FALSE");
+		memset(reqbuf, 0, buflen);
+		bcnReqInfo = (wifi_BeaconRequest_t *)reqbuf;
+
+		printf("%s argcnt=%d \n", argv[1], argc);
+		/* Get wifi_BeaconRequest_t parameters */
+		bcnReqInfo->opClass = atoi(argv[4]);
+		bcnReqInfo->channel = atoi(argv[5]);
+		bcnReqInfo->randomizationInterval = atoi(argv[6]);
+		bcnReqInfo->duration = atoi(argv[7]);
+		if (bcnReqInfo->duration > WLC_RRM_MAX_MEAS_DUR)
+			bcnReqInfo->duration = WLC_RRM_MAX_MEAS_DUR; // about 1 sec
+		if (bcnReqInfo->duration < 1) bcnReqInfo->duration = 1; // atleast 1 TU
+		bcnReqInfo->mode = atoi(argv[8]);
+		bssidp = (unsigned char *)(bcnReqInfo->bssid);
+		if (argv[9] != NULL) {
+			sscanf(argv[9], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+				   &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+			for (k = 0; k < 6; k++) {
+				*bssidp = (unsigned char)macInt[k];
+				bssidp++;
+			}
+		} else {
+			memset((bssidp), 0xff, 6); // if no argv[8]
+		}
+		if (argv[10] != NULL) {
+			bcnReqInfo->numRepetitions = atoi(argv[10]);
+		} else {
+			bcnReqInfo->numRepetitions = 0;
+		}
+		// API_DBG_PRINT_BUF(__FUNCTION__, (unsigned char *)bcnReqInfo, buflen);
+		ret = wifi_setRMBeaconRequest(index, argv[3], bcnReqInfo, &out_DialogToken);
+
+		free(reqbuf);
+		printf("%s complete. returned %d\n", argv[1], ret);
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_cancelRMBeaconRequest")) {
+		unsigned char dtoken =  0;
+
+		dtoken = atoi(argv[2]);
+		ret = wifi_cancelRMBeaconRequest(index, dtoken);
+		printf("%s complete. returned %d\n", argv[1], ret);
+	} else if (!strcmp(argv[1], "wifi_getRMCapabilities")) {
+		// Input:  UCHAR peerMACAddress[6]
+		// Output: UCHAR out_Capabilities[5]
+		UCHAR out_Capabilities[5];
+		mac_address_t mac;
+		printf("Enter %s wifi_getRMCapabilities \n", __FUNCTION__);
+		parse_mac(argv[2], &mac);
+		ret = wifi_getRMCapabilities((CHAR *)(&mac[0]), out_Capabilities);
+		if (ret != -1) {
+			printf("In %s out_Capabilities = %02X %02X %02X %02X %02X  \n",
+				__FUNCTION__,  out_Capabilities[0], out_Capabilities[1],
+				out_Capabilities[2], out_Capabilities[3], out_Capabilities[4]);
+		}
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_setNeighborReports")) {
+		/*	Example: wifi_api wifi_setNeighborReports [apIndex] [cnt]
+		*	[bssid1] [bssid info1] [regulatory1] [channel1] [phytype1]
+		*	[bssid2] [bssid info2] [regulatory2] [channel2] [phytype2]
+		*/
+		UCHAR *reqbuf;
+		int buflen, i, k, aind;
+		int ret = 0;
+		int ncnt = 0;
+		unsigned int macInt[6];
+		wifi_NeighborReport_t *nrp;
+		int nrsize;
+		UCHAR *bssidp;
+
+		printf("%s argcnt=%d \n", argv[1], argc);
+
+		ncnt = atoi(argv[3]);
+		if ((ncnt == 0) ||
+			(ncnt > MAX_NBR_CNT) ||
+			(argc < (4 + (ncnt * NUM_INPARAM_PER_NBR)))) {
+			printf("%s Error in input\n", argv[1]);
+			return (-1);
+		} else {
+			nrsize = sizeof(wifi_NeighborReport_t);
+
+			/* Get request buffer */
+			buflen = ncnt * nrsize;
+			reqbuf = malloc(buflen);
+			if (reqbuf == NULL) {
+				printf("%s Error Allocating reqbuf\n", argv[1]);
+				return (-1);
+			}
+			memset((void *)(reqbuf), 0, buflen);
+
+			/* parse input neighbor info and fill reqbuf */
+			for (i = 0; i < ncnt; i++) {
+				// Get [bssid1] [bssid info1] [regulatory1] [channel1] [phytype1]
+				aind = 4 + (i * NUM_INPARAM_PER_NBR);
+				if (argv[aind] == NULL) {
+					free(reqbuf);
+					printf("%s Error NULL bssid \n", argv[1]);
+					return (-1);
+				}
+				sscanf(argv[aind], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0],
+					&macInt[1], &macInt[2], &macInt[3], &macInt[4],
+					&macInt[5]);
+				nrp = (wifi_NeighborReport_t *)((UCHAR *)reqbuf + (i * nrsize));
+				bssidp = (unsigned char *)(nrp->bssid);
+				for (k = 0; k < 6; k++) {
+					*bssidp = (unsigned char)(macInt[k]);
+					bssidp++;
+				}
+				++aind;
+				nrp->info = atoi(argv[aind++]);
+				nrp->opClass = (UCHAR)(atoi(argv[aind++]));
+				nrp->channel = (UCHAR)(atoi(argv[aind++]));
+				nrp->phyTable = (UCHAR)(atoi(argv[aind++]));
+			}
+			ret = wifi_setNeighborReports(index, ncnt,
+				(wifi_NeighborReport_t *)(reqbuf));
+
+			free(reqbuf);
+			printf("%s complete. returned %d\n", argv[1], ret);
+			return (ret);
+		}
+	} else if (!strcmp(argv[1], "wifi_setNeighborReportActivation")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%s", argv[3]);
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_getNeighborReportActivation")) {
+		BOOL activate;
+		int ret;
+		printf("%s argcnt=%d \n", argv[1], argc);
+		ret = wifi_getNeighborReportActivation(index, &activate);
+		printf("%s complete. returned %d index=%d activate=%d \n",
+			argv[1], ret, index, activate);
+		return (ret);
+	}
+	/* 802.11K api */
+	else if (!strcmp(argv[1], "wifi_getRadioDCSSupported")) {
+		BOOL dcs;
+		ret = wifi_getRadioDCSSupported(index, &dcs);
+		printf("%s complete. returned %d index=%d dcs=%d \n", argv[1], ret, index, dcs);
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_getRadioDCSEnable")) {
+		BOOL dcs;
+		ret = wifi_getRadioDCSEnable(index, &dcs);
+		printf("%s complete. returned %d index=%d dcs=%d \n", argv[1], ret, index, dcs);
+		return (ret);
+	}
+	/* 802.11V support */
+	else if (!strcmp(argv[1], "wifi_BTMQueryRequest_callback_register")) {
+		/* The below is just a dummy function wrapper to call
+		* wifi_RMBeaconRequestCallbackRegister */
+		wifi_BTMQueryRequest_callback callback1 = wifi_BTMQueryRequest_callback_test_func;
+		wifi_BTMResponse_callback callback2 = wifi_BTMResponse_callback_test_func;
+
+		ret = wifi_BTMQueryRequest_callback_register(index, callback1, callback2);
+		printf("%s complete. callback1=%p callback1=%p returned %d\n",
+			argv[1], callback1, callback2, ret);
+		pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_setBTMRequest")) {
+		/* The API format:
+		apidx peer_mac token mode [<url_len> <url>] <num-candidate> <len1>
+		<00904C1DA06100000000162400> <len2> ...
+		 */
+		wifi_BTMRequest_t *btmReqInfo;
+		int buflen, k;
+		UCHAR *reqbuf = NULL;
+		UCHAR mode;
+		UCHAR *dest;
+		char *src;
+		char hexstr[3];
+		int idx, url_len, argc_idx;
+
+		buflen = sizeof(wifi_BTMRequest_t);
+		printf("%s: buflen=%d argc=%d\n", argv[1], buflen, argc);
+
+		reqbuf = malloc(buflen);
+		if (reqbuf == NULL) {
+			printf("%s Error Allocating reqbuf\n", argv[1]);
+			goto btm_reg_error;
+		}
+
+		memset(reqbuf, 0, buflen);
+		btmReqInfo = (wifi_BTMRequest_t *)reqbuf;
+
+		if (argv[3] == NULL) {
+			printf("%s Error: peer MAC can't be NULL\n", argv[1]);
+			goto btm_reg_error;
+		}
+
+		/* read req mode */
+		mode = 5; /* default mode */
+		if (argv[5] != NULL && argc >= 6) {
+			mode = (UCHAR)atoi(argv[5]);
+		}
+
+		/* Get wifi_BTMRequest_t parameters */
+
+		btmReqInfo->token = strtoul(argv[4], NULL, 0);
+		btmReqInfo->requestMode = mode; /* DOT11_BSSTRANS_REQMODE_PREF_LIST_INCL|DOT11_BSSTRANS_REQMODE_ABRIDGED */
+		btmReqInfo->timer = 0x0000;
+		btmReqInfo->validityInterval = 0xFF;
+
+		/* handle option field "termDuration" */
+		if (mode & DOT11_BSSTRANS_REQMODE_BSS_TERM_INCL) {
+			/* bit-3 termDuration present */
+			/* TODO: the lower function wlcsm_mngr_wifi_setBTMRequest will read the real tsf */
+			btmReqInfo->termDuration.duration = 2; /* test only */
+		}
+
+		argc_idx = 6; /* argument after "mode" */
+		/* handle option field "url" */
+		url_len = 0;
+		if (mode & DOT11_BSSTRANS_REQMODE_ESS_DISASSOC_IMNT) {
+			/* bit-4 url present */
+			if (argc < (argc_idx + 2)) {
+				printf("%s Error: need url_len and url string \n", argv[1]);
+				goto btm_reg_error;
+			}
+
+			url_len = atoi(argv[argc_idx++]);
+			if (url_len >= MAX_URL_LEN) {
+				printf("%s url_len %d is too long\n", argv[1], url_len);
+				goto btm_reg_error;
+			}
+
+			/* str argv[argc_idx++] to hex */
+			dest = (UCHAR *)btmReqInfo->url;
+			btmReqInfo->urlLen = url_len;
+			if ((src = argv[argc_idx++]) == NULL) {
+				printf("%s url content not exist\n", argv[1]);
+				goto btm_reg_error;
+			}
+
+			/* string to hex */
+			for (idx = 0; idx < url_len; idx++) {
+				hexstr[0] = src[0];
+				hexstr[1] = src[1];
+				hexstr[2] = '\0';
+
+				*dest = (UCHAR)strtoul(hexstr, NULL, 16);
+
+				printf("%s (url): idx=%d dest=%p value=0x%x\n", argv[1],
+					idx, dest, *dest);
+				dest++;
+				src += 2;
+			}
+		}
+
+		printf("%s: argc_idx=%d url_len=%d mode=0x%x\n", argv[1], argc_idx, url_len, mode);
+
+		/* handle candidate list */
+		if (argv[argc_idx] != NULL && argc >= (argc_idx + 1)) {
+			UCHAR count;
+			int candidate_len;
+
+			count = atoi(argv[argc_idx++]);
+			if ((count <= 0) || (count > BTM_MAX_CANDIDATES)) {
+				printf("%s Error: num of candidates %d is out of range (1-%d)\n",
+					   argv[1], count, BTM_MAX_CANDIDATES);
+				goto btm_reg_error;
+			}
+			btmReqInfo->numCandidates = count;
+
+			for (k = 0; k < count; k++) {
+				if (argv[argc_idx] == NULL || argv[argc_idx + 1] == NULL) {
+					printf("Error: missing <len> <hex-string> pair for candidate %d\n",
+						k + 1);
+					goto btm_reg_error;
+				}
+
+				candidate_len = atoi(argv[argc_idx++]);
+
+				if (candidate_len != strlen(argv[argc_idx])/2) {
+					printf("Error: len %d not match hex-string len %d (divided by 2)\n",
+						candidate_len, strlen(argv[argc_idx]));
+					goto btm_reg_error;
+				}
+
+				dest = (UCHAR *)&(btmReqInfo->candidates[k]);
+				src = argv[argc_idx++];
+
+				printf("%s: btmReqInfo=%p dest=%p argc_idx=%d\n", argv[1],
+					btmReqInfo, dest, argc_idx);
+				/* string to hex */
+				for (idx = 0; idx < candidate_len; idx++) {
+					hexstr[0] = src[0];
+					hexstr[1] = src[1];
+					hexstr[2] = '\0';
+
+					*dest = (UCHAR)strtoul(hexstr, NULL, 16);
+
+					printf("%s: idx=%d dest=%p value=0x%x\n", argv[1], idx,
+						dest, *dest);
+					dest++;
+					src += 2;
+				}
+			}
+		}
+		else {
+			printf("Error: missing candidates\n");
+			goto btm_reg_error;
+		}
+
+		ret = wifi_setBTMRequest(index, argv[3], btmReqInfo);
+		if (reqbuf) {
+			free(reqbuf);
+			reqbuf = NULL;
+		}
+		printf("%s complete. returned %d\n", argv[1], ret);
+		return (ret);
+
+	btm_reg_error:
+		if (reqbuf) {
+			free(reqbuf);
+			reqbuf = NULL;
+		}
+		printf("Sample: wifi_api wifi_setBTMRequest 1 F0:99:BF:76:FF:54 15 5 1 13 44AAF59B178F000000000C0B00\n");
+	} else if (!strcmp(argv[1], "wifi_getBSSTransitionImplemented")) {
+		BOOL bsst_impl = 1;
+		ret = wifi_getBSSTransitionImplemented(index, &bsst_impl);
+		if (ret == 0) printf("%s complete. BSSTransitionImplemented=%d\n",
+			argv[1], bsst_impl);
+		else printf("%s failed. ret=%d\n", argv[1], ret);
+
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_setBSSTransitionActivation")) {
+		BOOL enable;
+		if (atoi(argv[3]) == 0) enable = 0;
+		else enable = 1;
+
+		ret = wifi_setBSSTransitionActivation(index, enable);
+		printf("%s complete. ret=%d\n", argv[1], ret);
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_getBSSTransitionActivation")) {
+		BOOL enable;
+		ret = wifi_getBSSTransitionActivation(index, &enable);
+		if (ret == 0) printf("%s complete. BSSTransitionActivation=%d\n", argv[1], enable);
+		else printf("%s failed. ret=%d\n", argv[1], ret);
+		return (ret);
+	} else if (!strcmp(argv[1], "wifi_getBTMClientCapabilityList")) {
+		wifi_BTMCapabilities_t btm_caps, *btm_ptr = &btm_caps;
+		int count = 0, i, k;
+
+		mac_address_t *mac_ptr = NULL;
+		unsigned int macInt[6] = { 0 };
+		unsigned char *ptr;
+
+		count = argc - 3;
+		if (count > MAX_BTM_DEVICES) {
+			printf("Warning:  STA counts %d exceeds the limitation %d\n",
+				count, MAX_BTM_DEVICES);
+			return (ret);
+		}
+
+		memset(btm_ptr, 0, sizeof(wifi_BTMCapabilities_t));
+
+		btm_ptr->entries = count;
+		mac_ptr = btm_ptr->peer;
+
+		for (i = 0; i < count; i++) {
+			/* MAC string to hex */
+			if (argv[3 + i] != NULL) {
+			sscanf(argv[3 + i], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+				   &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+
+			ptr = (unsigned char *)(mac_ptr++);
+
+			for (k = 0; k < 6; k++) {
+				ptr[k] = (unsigned char)macInt[k];
+			}
+
+			printf("%s ptr=%p mac_ptr=%p MAC="MACF"\n", argv[1], ptr,
+				mac_ptr, MAC_TO_MACF(ptr));
+			}
+		}
+
+		ret = wifi_getBTMClientCapabilityList(index, btm_ptr);
+		printf("%s complete. count=%d ret=%d\n", argv[1], count, ret);
+		return (ret);
+	/* end of 802.11V support */
+
+	/* HS2.0 api */
+	} else if (!strcmp(argv[1], "wifi_getApInterworkingElement")) {
+		wifi_InterworkingElement_t output_struct;
+		ret = wifi_getApInterworkingElement(index, &output_struct);
+		printf("interworkingEnabled = %d\n", output_struct.interworkingEnabled);
+		printf("accessNetworkType = %d\n", output_struct.accessNetworkType);
+		printf("internetAvailable = %d\n", output_struct.internetAvailable);
+		printf("asra = %d\n", output_struct.asra);
+		printf("esr = %d\n", output_struct.esr);
+		printf("uesa = %d\n", output_struct.uesa);
+		printf("venueOptionPresent = %d\n", output_struct.venueOptionPresent);
+		printf("venueGroup = %d\n", output_struct.venueGroup);
+		printf("venueType = %d\n", output_struct.venueType);
+		printf("hessOptionPresent = %d\n", output_struct.hessOptionPresent);
+		printf("hessid = %s\n", output_struct.hessid);
+	} else if (!strcmp(argv[1], "wifi_getInterworkingAccessNetworkType")) {
+		UINT networkType;
+		ret = wifi_getInterworkingAccessNetworkType(index, &networkType);
+		printf("%u\n", networkType);
+	} else if (!strcmp(argv[1], "wifi_getApInterworkingServiceCapability")) {
+		BOOL interworking;
+		ret = wifi_getApInterworkingServiceCapability(index, &interworking);
+		printf("%s\n", interworking ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getApInterworkingServiceEnable")) {
+		BOOL enable;
+		ret = wifi_getApInterworkingServiceEnable(index, &enable);
+		printf("%s\n", enable ? "TRUE" : "FALSE");
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 19)
-    } else if (!strcmp(argv[1], "wifi_pushApHotspotElement")) {
-        BOOL enable = atoi(argv[3]) ? TRUE : FALSE;
-        ret = wifi_pushApHotspotElement(index, enable);
-        printf("%s\n", enable ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getApHotspotElement")) {
-        BOOL enable;
-        ret = wifi_getApHotspotElement(index, &enable);
-        printf("%s\n", enable ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_pushApRoamingConsortiumElement")) {
-        wifi_roamingConsortiumElement_t cons_ie, *infoElement = &cons_ie;
+	} else if (!strcmp(argv[1], "wifi_pushApHotspotElement")) {
+		BOOL enable = atoi(argv[3]) ? TRUE : FALSE;
+		ret = wifi_pushApHotspotElement(index, enable);
+		printf("%s\n", enable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getApHotspotElement")) {
+		BOOL enable;
+		ret = wifi_getApHotspotElement(index, &enable);
+		printf("%s\n", enable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_pushApRoamingConsortiumElement")) {
+		wifi_roamingConsortiumElement_t cons_ie, *infoElement = &cons_ie;
 		char ouilist[64], *ptr, *s;
 		int total = 0, len;
 
@@ -2553,7 +2742,8 @@
 			printf("%s: index=%d string=%s len=%d\n",
 				__FUNCTION__, total, ptr, len);
 			if (len < 15) {
-				get_hex_data((unsigned char *)ptr, infoElement->wifiRoamingConsortiumOui[total], len);
+				get_hex_data((unsigned char *)ptr,
+					infoElement->wifiRoamingConsortiumOui[total], len);
 				infoElement->wifiRoamingConsortiumLen[total] = len;
 				total++;
 				if (total >= 3)
@@ -2567,700 +2757,744 @@
 		}
 		infoElement->wifiRoamingConsortiumCount = total;
 
-        ret = wifi_pushApRoamingConsortiumElement(index, infoElement);
-        printf("wifi_pushApRoamingConsortiumElement %s\n", argv[3]);
-    } else if (!strcmp(argv[1], "wifi_getApRoamingConsortiumElement")) {
-        wifi_roamingConsortiumElement_t infoElement;
-        ret = wifi_getApRoamingConsortiumElement(index, &infoElement);
-        printf("wifi_getApRoamingConsortiumElement count=%d\n", infoElement.wifiRoamingConsortiumCount);
+		ret = wifi_pushApRoamingConsortiumElement(index, infoElement);
+		printf("wifi_pushApRoamingConsortiumElement %s\n", argv[3]);
+	} else if (!strcmp(argv[1], "wifi_getApRoamingConsortiumElement")) {
+		wifi_roamingConsortiumElement_t infoElement;
+		ret = wifi_getApRoamingConsortiumElement(index, &infoElement);
+		printf("wifi_getApRoamingConsortiumElement count=%d\n",
+			infoElement.wifiRoamingConsortiumCount);
 #endif /* (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 19) */
-    /* HS2.0 api */
+	/* HS2.0 api */
 #endif /* WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12 */
 #if WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION >= 16
 /* DPP support */
 #if WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION >= 19
-    } else if (!strcmp(argv[1], "wifi_mgmt_frame_callbacks_register")) {
-        /* The below is just a dummy function wrapper to call wifi_dpp_frame_received_callbacks_register */
-        wifi_receivedMgmtFrame_callback callback1 = wifi_receivedMgmtFrame_callback_test_func;
-
-        ret = wifi_mgmt_frame_callbacks_register(callback1);
-        printf("%s complete. callback1=%p ret=%d\n", argv[1], callback1, ret);
-        pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_mgmt_frame_callbacks_register")) {
+		/* The below is just a dummy function wrapper to call wifi_dpp_frame_received_callbacks_register */
+		wifi_receivedMgmtFrame_callback callback1 =
+			wifi_receivedMgmtFrame_callback_test_func;
+
+		ret = wifi_mgmt_frame_callbacks_register(callback1);
+		printf("%s complete. callback1=%p ret=%d\n", argv[1], callback1, ret);
+		pthread_join(cbThreadId, NULL);
 #else
-    } else if (!strcmp(argv[1], "wifi_dpp_frame_received_callbacks_register")) {
-        /* The below is just a dummy function wrapper to call wifi_dpp_frame_received_callbacks_register */
-        wifi_dppAuthResponse_callback_t callback1 = wifi_dppAuthResponse_callback_test_func;
-        wifi_dppConfigRequest_callback_t callback2 = wifi_dppConfigRequest_callback_test_func;
-
-        ret = wifi_dpp_frame_received_callbacks_register(callback1, callback2);
-        printf("%s complete. callback1=%p callback2=%p returned %d\n", argv[1], callback1, callback2, ret);
-        pthread_join(cbThreadId, NULL);
+	} else if (!strcmp(argv[1], "wifi_dpp_frame_received_callbacks_register")) {
+		/* The below is just a dummy function wrapper to call wifi_dpp_frame_received_callbacks_register */
+		wifi_dppAuthResponse_callback_t callback1 =
+			wifi_dppAuthResponse_callback_test_func;
+		wifi_dppConfigRequest_callback_t callback2 =
+			wifi_dppConfigRequest_callback_test_func;
+
+		ret = wifi_dpp_frame_received_callbacks_register(callback1, callback2);
+		printf("%s complete. callback1=%p callback2=%p returned %d\n", argv[1],
+			callback1, callback2, ret);
+		pthread_join(cbThreadId, NULL);
 #endif /* WIFI_HAL_MINOR_VERSION >= 19 */
-    } else if(!strcmp(argv[1], "wifi_sendActionFrame")) {
-        /* The API format from argv[2]:
-           apidx peer_mac channel <frame in hex>
-        */
-        UCHAR af_buf[1400];
-        int buflen, k, af_len = 0;
-        UCHAR peerMACAddress[6];
-        unsigned int macInt[6];
-        UINT frequency = 0;
-        UCHAR *dest;
-        char *src;
-        char hexstr[3];
-
-        buflen = sizeof(af_buf);
-        printf("%s: buflen=%d argc=%d\n", argv[1], buflen, argc);
-
-        memset(af_buf, 0, buflen);
-
-        if (sscanf(argv[3], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
-            &macInt[2], &macInt[3], &macInt[4], &macInt[5]) != 6) {
-            printf("%s Error: peer MAC format %s\n", argv[1], argv[3]);
-            goto action_frame_error;
-        }
-
-        for (k = 0; k < 6; k++) {
-            peerMACAddress[k] = (unsigned char)macInt[k];
-        }
-
-        /* read channel/frequency */
-        frequency = (UINT)atoi(argv[4]);
-
-        /* handle action frame string */
-        if (argv[5] != NULL) {
-            dest = af_buf;
-            src = argv[5];
-
-            /* string to hex */
-            while (*src != 0) {
-                hexstr[0] = src[0];
-                hexstr[1] = src[1];
-                if (src[1] == 0) {
-                    printf("%s Error: action frame hex format not correct %s\n", argv[1], argv[5]);
-                    goto action_frame_error;
-                }
-                hexstr[2] = '\0';
-
-                *dest = (UCHAR) strtoul(hexstr, NULL, 16);
-
-                af_len++;
-                printf("%s: idx=%d dest=%p value=0x%x\n", argv[1], af_len, dest, *dest);
-                dest++;
-                src += 2;
-            }
-        }
-
-        printf("%s: channel=%d af_len=%d\n", argv[1], frequency, af_len);
-
-        ret = wifi_sendActionFrame(index, (UCHAR *)(&(peerMACAddress[0])), frequency, af_buf, af_len);
-        printf("%s complete. returned %d\n", argv[1], ret);
-        return (ret);
+	} else if(!strcmp(argv[1], "wifi_sendActionFrame")) {
+		/* The API format from argv[2]:
+		   apidx peer_mac channel <frame in hex>
+		*/
+		UCHAR af_buf[1400];
+		int buflen, k, af_len = 0;
+		UCHAR peerMACAddress[6];
+		unsigned int macInt[6];
+		UINT frequency = 0;
+		UCHAR *dest;
+		char *src;
+		char hexstr[3];
+
+		buflen = sizeof(af_buf);
+		printf("%s: buflen=%d argc=%d\n", argv[1], buflen, argc);
+
+		memset(af_buf, 0, buflen);
+
+		if (sscanf(argv[3], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+			&macInt[2], &macInt[3], &macInt[4], &macInt[5]) != 6) {
+			printf("%s Error: peer MAC format %s\n", argv[1], argv[3]);
+			goto action_frame_error;
+		}
+
+		for (k = 0; k < 6; k++) {
+			peerMACAddress[k] = (unsigned char)macInt[k];
+		}
+
+		/* read channel/frequency */
+		frequency = (UINT)atoi(argv[4]);
+
+		/* handle action frame string */
+		if (argv[5] != NULL) {
+			dest = af_buf;
+			src = argv[5];
+
+			/* string to hex */
+			while (*src != 0) {
+				hexstr[0] = src[0];
+				hexstr[1] = src[1];
+				if (src[1] == 0) {
+					printf("%s Error: action frame hex format incorrect %s\n",
+						argv[1], argv[5]);
+					goto action_frame_error;
+				}
+				hexstr[2] = '\0';
+
+				*dest = (UCHAR) strtoul(hexstr, NULL, 16);
+
+				af_len++;
+				printf("%s: idx=%d dest=%p value=0x%x\n", argv[1], af_len, dest,
+					*dest);
+				dest++;
+				src += 2;
+			}
+		}
+
+		printf("%s: channel=%d af_len=%d\n", argv[1], frequency, af_len);
+
+		ret = wifi_sendActionFrame(index, (UCHAR *)(&(peerMACAddress[0])), frequency,
+			af_buf, af_len);
+		printf("%s complete. returned %d\n", argv[1], ret);
+		return (ret);
 
 action_frame_error:
-        printf("Usage: wifi_sendActionFrame <apIndex> <peerMACAddress>"
-               "channel <action frame like 0409506F9A1A0100>\n");
-        return (-1);
+		printf("Usage: wifi_sendActionFrame <apIndex> <peerMACAddress>"
+			   "channel <action frame like 0409506F9A1A0100>\n");
+		return (-1);
 /* end of DPP */
 #endif /* WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION >= 16 */
 #if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
 	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
-    } else if (!strcmp(argv[1], "wifi_getRadioMode")) {
-	UINT pureMode;  /* Bits:  | ax | ac | n | a | g | b | */
-	char standards[64];
-	ret = wifi_getRadioMode(index, standards, &pureMode);
-	if (!ret) {
-		printf("standards=%s pureMode=0x%x \n", standards, pureMode);
-	} else {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_setRadioMode")) {
-	ret = -1;
-	if ((argv[3] != NULL) && (argv[4] != NULL)) {
-		wifi_api_info_t apiInfo;
-		strncpy(apiInfo.api_name, argv[1], 1024);
-		/* pass channelMode, pureMode */
-		snprintf(apiInfo.api_data, 1024, "%s %d", argv[3], atoi(argv[4]));
-		apiInfo.radioIndex = index;
-		ret = wifi_api_send_msg(&apiInfo);
-	}
-	if (ret != 0) {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_setDownlinkDataAckType")) {
-        wifi_dl_data_ack_type_t ack_type;
-        ack_type = (wifi_dl_data_ack_type_t)(atoi(argv[3]));
-        ret = wifi_setDownlinkDataAckType(index, ack_type);
-        printf("%s-TBD complete. ret=%d\n", argv[1], ret);
-    } else if (!strcmp(argv[1], "wifi_getDownlinkMuType")) {
-        wifi_dl_mu_type_t ack_type;
-        ret = wifi_getDownlinkMuType(index, &ack_type);
-        printf("DownlinkMuType=%d \n", (unsigned int)ack_type);
-    } else if (!strcmp(argv[1], "wifi_getUplinkMuType")) {
-        wifi_ul_mu_type_t ack_type;
-        ret = wifi_getUplinkMuType(index, &ack_type);
-        printf("UplinkMuType=%d \n", (unsigned int)ack_type);
-    } else if (!strcmp(argv[1], "wifi_setGuardInterval")) {
-        wifi_guard_interval_t guard_interval;
-        guard_interval = (wifi_guard_interval_t)(atoi(argv[3]));
-        ret = wifi_setGuardInterval(index, guard_interval);
-        printf("%s complete. returned %d index=%d argc=%d\n", argv[1], ret, index, argc);
-    } else if (!strcmp(argv[1], "wifi_getGuardInterval")) {
-        wifi_guard_interval_t guard_interval;
-        ret = wifi_getGuardInterval(index, &guard_interval);
-        printf("guard_interval=%d \n", (unsigned int)guard_interval);
-    } else if (!strcmp(argv[1], "wifi_getBSSColorEnabled")) {
-        BOOL enabled;
-        ret = wifi_getBSSColorEnabled(index, &enabled);
-        printf("BSSColorEnabled=%s\n", (enabled) ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getBSSColor")) {
-        UCHAR bssColor;
-        ret = wifi_getBSSColor(index, &bssColor);
-        printf("BSSColor=%d\n", (int)bssColor);
-    } else if (!strcmp(argv[1], "wifi_getTWTParams")) {
-        wifi_twt_params_t twt_params;
-        CHAR sta[64] = { 0 };
-        ret = wifi_getTWTParams(sta, &twt_params);
-        /* TBD - print twt param for given sta */
-        printf("%s-TBD returned %d index=%d argc=%d\n", argv[1], ret, index, argc);
-    } else if (!strcmp(argv[1], "wifi_get80211axDefaultParameters")) {
-        wifi_80211ax_params_t params;
-        ret = wifi_get80211axDefaultParameters(index, &params);
-        /* TBD - print axDefaultParameters */
-        printf("%s-TBD returned %d index=%d argc=%d\n", argv[1], ret, index, argc);
-    /* 11ax api done */
-#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && (!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
-    }
-
-    if ((!strcmp(argv[1], "wifi_setApEnable")) ||
-	(!strcmp(argv[1], "wifi_pushRadioChannel")) ||
-        (!strcmp(argv[1], "wifi_setRadioDcsScanning")) ||
-        (!strcmp(argv[1], "wifi_setApBasicAuthenticationMode")) ||
-        (!strcmp(argv[1], "wifi_setApWpaEncryptionMode")) ||
-        (!strcmp(argv[1], "wifi_setApAuthMode")) ||
-        (!strcmp(argv[1], "wifi_setApWpsDevicePIN")) ||
-        (!strcmp(argv[1], "wifi_setRadio11nGreenfieldEnable")) ||
-        (!strcmp(argv[1], "wifi_setApWpsEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioBasicDataTransmitRates")) ||
-        (!strcmp(argv[1], "wifi_setRadioOperatingChannelBandwidth")) ||
-        (!strcmp(argv[1], "wifi_setApWpsConfigMethodsEnabled")) ||
-        (!strcmp(argv[1], "wifi_setRadioChannel")) ||
-        (!strcmp(argv[1], "wifi_setRadioAutoChannelEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioAutoChannelRefreshPeriod")) ||
-        (!strcmp(argv[1], "wifi_setRadioEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioTransmitPower")) ||
-        (!strcmp(argv[1], "wifi_setRadioCountryCode")) ||
-        (!strcmp(argv[1], "wifi_setApDTIMInterval")) ||
-        (!strcmp(argv[1], "wifi_setRadioCtsProtectionEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioObssCoexistenceEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioFragmentationThreshold")) ||
-        (!strcmp(argv[1], "wifi_setRadioSTBCEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioAMSDUEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioGuardInterval")) ||
-        (!strcmp(argv[1], "wifi_setRadioTxChainMask")) ||
-        (!strcmp(argv[1], "wifi_setRadioRxChainMask")) ||
-        (!strcmp(argv[1], "wifi_setSSIDName")) ||
-        (!strcmp(argv[1], "wifi_pushSSID")) ||
-        (!strcmp(argv[1], "wifi_setApSsidAdvertisementEnable")) ||
-        (!strcmp(argv[1], "wifi_pushSsidAdvertisementEnable")) ||
-        (!strcmp(argv[1], "wifi_setApSecurityPreSharedKey")) ||
-        (!strcmp(argv[1], "wifi_setApWpsEnrolleePin")) ||
-        (!strcmp(argv[1], "wifi_setApWmmEnable")) ||
-        (!strcmp(argv[1], "wifi_setApWmmUapsdEnable")) ||
-        (!strcmp(argv[1], "wifi_setApBeaconInterval")) ||
-        (!strcmp(argv[1], "wifi_setRadioExtChannel")) ||
-        (!strcmp(argv[1], "wifi_addApAclDevice")) ||
-        (!strcmp(argv[1], "wifi_setBandSteeringBandUtilizationThreshold")) ||
-        (!strcmp(argv[1], "wifi_setSSIDEnable")) ||
-        (!strcmp(argv[1], "wifi_setApSecurityModeEnabled")) ||
-        (!strcmp(argv[1], "wifi_setApSecurityKeyPassphrase")) ||
-        (!strcmp(argv[1], "wifi_setApIsolationEnable")) ||
-        (!strcmp(argv[1], "wifi_setApRadioIndex")) ||
-        (!strcmp(argv[1], "wifi_setBandSteeringRSSIThreshold")) ||
-        (!strcmp(argv[1], "wifi_setBandSteeringPhyRateThreshold")) ||
-        (!strcmp(argv[1], "wifi_setApSecurityMFPConfig")) ||
-        (!strcmp(argv[1], "wifi_delApAclDevice")) ||
-        (!strcmp(argv[1], "wifi_setRadioDfsRefreshPeriod")) ||
-        (!strcmp(argv[1], "wifi_setRadioDfsEnable")) ||
-        (!strcmp(argv[1], "wifi_setRadioDfsMoveBackEnable")) ||
+	} else if (!strcmp(argv[1], "wifi_getRadioMode")) {
+		UINT pureMode;  /* Bits:  | ax | ac | n | a | g | b | */
+		char standards[64];
+		ret = wifi_getRadioMode(index, standards, &pureMode);
+		if (!ret) {
+			printf("standards=%s pureMode=0x%x \n", standards, pureMode);
+		} else {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_setRadioMode")) {
+		ret = -1;
+		if ((argv[3] != NULL) && (argv[4] != NULL)) {
+			wifi_api_info_t apiInfo;
+			strncpy(apiInfo.api_name, argv[1], 1024);
+			/* pass channelMode, pureMode */
+			snprintf(apiInfo.api_data, 1024, "%s %d", argv[3], atoi(argv[4]));
+			apiInfo.radioIndex = index;
+			ret = wifi_api_send_msg(&apiInfo);
+		}
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_setDownlinkDataAckType")) {
+		wifi_dl_data_ack_type_t ack_type;
+		ack_type = (wifi_dl_data_ack_type_t)(atoi(argv[3]));
+		ret = wifi_setDownlinkDataAckType(index, ack_type);
+		printf("%s-TBD complete. ret=%d\n", argv[1], ret);
+	} else if (!strcmp(argv[1], "wifi_getDownlinkMuType")) {
+		wifi_dl_mu_type_t ack_type;
+		ret = wifi_getDownlinkMuType(index, &ack_type);
+		printf("DownlinkMuType=%d \n", (unsigned int)ack_type);
+	} else if (!strcmp(argv[1], "wifi_getUplinkMuType")) {
+		wifi_ul_mu_type_t ack_type;
+		ret = wifi_getUplinkMuType(index, &ack_type);
+		printf("UplinkMuType=%d \n", (unsigned int)ack_type);
+	} else if (!strcmp(argv[1], "wifi_setGuardInterval")) {
+		wifi_guard_interval_t guard_interval;
+		guard_interval = (wifi_guard_interval_t)(atoi(argv[3]));
+		ret = wifi_setGuardInterval(index, guard_interval);
+		printf("%s complete. returned %d index=%d argc=%d\n", argv[1], ret, index, argc);
+	} else if (!strcmp(argv[1], "wifi_getGuardInterval")) {
+		wifi_guard_interval_t guard_interval;
+		ret = wifi_getGuardInterval(index, &guard_interval);
+		printf("guard_interval=%d \n", (unsigned int)guard_interval);
+	} else if (!strcmp(argv[1], "wifi_getBSSColorEnabled")) {
+		BOOL enabled;
+		ret = wifi_getBSSColorEnabled(index, &enabled);
+		printf("BSSColorEnabled=%s\n", (enabled) ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getBSSColor")) {
+		UCHAR bssColor;
+		ret = wifi_getBSSColor(index, &bssColor);
+		printf("BSSColor=%d\n", (int)bssColor);
+	} else if (!strcmp(argv[1], "wifi_getTWTParams")) {
+		wifi_twt_params_t twt_params;
+		CHAR sta[64] = { 0 };
+		ret = wifi_getTWTParams(sta, &twt_params);
+		/* TBD - print twt param for given sta */
+		printf("%s-TBD returned %d index=%d argc=%d\n", argv[1], ret, index, argc);
+	} else if (!strcmp(argv[1], "wifi_get80211axDefaultParameters")) {
+		wifi_80211ax_params_t params;
+		ret = wifi_get80211axDefaultParameters(index, &params);
+		/* TBD - print axDefaultParameters */
+		printf("%s-TBD returned %d index=%d argc=%d\n", argv[1], ret, index, argc);
+	/* 11ax api done */
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) &&
+(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
+	} else if ((!strcmp(argv[1], "wifi_setApEnable")) ||
+		(!strcmp(argv[1], "wifi_pushRadioChannel")) ||
+		(!strcmp(argv[1], "wifi_setRadioDcsScanning")) ||
+		(!strcmp(argv[1], "wifi_setApBasicAuthenticationMode")) ||
+		(!strcmp(argv[1], "wifi_setApWpaEncryptionMode")) ||
+		(!strcmp(argv[1], "wifi_setApAuthMode")) ||
+		(!strcmp(argv[1], "wifi_setApWpsDevicePIN")) ||
+		(!strcmp(argv[1], "wifi_setRadio11nGreenfieldEnable")) ||
+		(!strcmp(argv[1], "wifi_setApWpsEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioBasicDataTransmitRates")) ||
+		(!strcmp(argv[1], "wifi_setRadioOperatingChannelBandwidth")) ||
+		(!strcmp(argv[1], "wifi_setApWpsConfigMethodsEnabled")) ||
+		(!strcmp(argv[1], "wifi_setRadioChannel")) ||
+		(!strcmp(argv[1], "wifi_setRadioAutoChannelEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioAutoChannelRefreshPeriod")) ||
+		(!strcmp(argv[1], "wifi_setRadioEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioTransmitPower")) ||
+		(!strcmp(argv[1], "wifi_setRadioCountryCode")) ||
+		(!strcmp(argv[1], "wifi_setApDTIMInterval")) ||
+		(!strcmp(argv[1], "wifi_setRadioCtsProtectionEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioObssCoexistenceEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioFragmentationThreshold")) ||
+		(!strcmp(argv[1], "wifi_setRadioSTBCEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioAMSDUEnable")) ||
+		(!strcmp(argv[1], "wifi_setRadioGuardInterval")) ||
+		(!strcmp(argv[1], "wifi_setRadioTxChainMask")) ||
+		(!strcmp(argv[1], "wifi_setRadioRxChainMask")) ||
+		(!strcmp(argv[1], "wifi_setSSIDName")) ||
+		(!strcmp(argv[1], "wifi_pushSSID")) ||
+		(!strcmp(argv[1], "wifi_setApSsidAdvertisementEnable")) ||
+		(!strcmp(argv[1], "wifi_pushSsidAdvertisementEnable")) ||
+		(!strcmp(argv[1], "wifi_setApSecurityPreSharedKey")) ||
+		(!strcmp(argv[1], "wifi_setApWpsEnrolleePin")) ||
+		(!strcmp(argv[1], "wifi_setApWmmEnable")) ||
+		(!strcmp(argv[1], "wifi_setApWmmUapsdEnable")) ||
+		(!strcmp(argv[1], "wifi_setApBeaconInterval")) ||
+		(!strcmp(argv[1], "wifi_setRadioExtChannel")) ||
+		(!strcmp(argv[1], "wifi_addApAclDevice")) ||
+		(!strcmp(argv[1], "wifi_setBandSteeringBandUtilizationThreshold")) ||
+		(!strcmp(argv[1], "wifi_setSSIDEnable")) ||
+		(!strcmp(argv[1], "wifi_setApSecurityModeEnabled")) ||
+		(!strcmp(argv[1], "wifi_setApSecurityKeyPassphrase")) ||
+		(!strcmp(argv[1], "wifi_setApIsolationEnable")) ||
+		(!strcmp(argv[1], "wifi_setApRadioIndex")) ||
+		(!strcmp(argv[1], "wifi_setBandSteeringRSSIThreshold")) ||
+		(!strcmp(argv[1], "wifi_setBandSteeringPhyRateThreshold")) ||
+		(!strcmp(argv[1], "wifi_setApSecurityMFPConfig")) ||
+		(!strcmp(argv[1], "wifi_delApAclDevice")) ||
+		(!strcmp(argv[1], "wifi_setRadioDfsRefreshPeriod")) ||
+		(!strcmp(argv[1], "wifi_setRadioDfsEnable")) ||
+#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
+		(!strcmp(argv[1], "wifi_setRadioDfsMoveBackEnable")) ||
+		(!strcmp(argv[1], "wifi_setBSSColorEnabled")) ||
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
 #if WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 12
-        (!strcmp(argv[1], "wifi_setInterworkingAccessNetworkType")) ||
-        (!strcmp(argv[1], "wifi_setApInterworkingServiceEnable")) ||
+		(!strcmp(argv[1], "wifi_setInterworkingAccessNetworkType")) ||
+		(!strcmp(argv[1], "wifi_setApInterworkingServiceEnable")) ||
 #endif // endif
 #if WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  >= 15
-        (!strcmp(argv[1], "wifi_setDownlinkMuType")) ||
-        (!strcmp(argv[1], "wifi_setUplinkMuType")) ||
+		(!strcmp(argv[1], "wifi_setDownlinkMuType")) ||
+		(!strcmp(argv[1], "wifi_setUplinkMuType")) ||
 #endif // endif
-	(!strcmp(argv[1], "wifi_setRadioDCSEnable")) ||
-	(!strcmp(argv[1], "wifi_setApRetryLimit")) ||
-	(!strcmp(argv[1], "wifi_setBSSColorEnabled")) ||
-        (!strcmp(argv[1], "wifi_setApMacAddressControlMode"))) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        strncpy(apiInfo.api_data, argv[3], 1024);
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-
-    } else if (!strcmp(argv[1], "wifi_getApDeviceRSSI")) {
-        INT output_RSSI;
-        ret = wifi_getApDeviceRSSI(index, argv[3], &output_RSSI);
-        printf("%d\n", output_RSSI);
-    } else if (!strcmp(argv[1], "wifi_getApDeviceRxrate")) {
-        INT output_RxMb;
-        ret = wifi_getApDeviceRxrate(index, argv[3], &output_RxMb);
-        printf("%d\n", output_RxMb);
-    } else if (!strcmp(argv[1], "wifi_getApDeviceTxrate")) {
-        INT output_TxMb;
-        ret = wifi_getApDeviceTxrate(index, argv[3], &output_TxMb);
-        printf("%d\n", output_TxMb);
-    } else if (!strcmp(argv[1], "wifi_getRadioDcsChannelMetrics")) {
-        wifi_channelMetrics_t * ptr, channelMetrics_array_0[CHCOUNT2];
-        wifi_channelMetrics_t channelMetrics_array_1[CHCOUNT5];
-        int array_size, i, j, num_channels = 0;
-        char *ptr_bssid;
-
-        if (index == 0) {
-            ptr = channelMetrics_array_0;
-            memset(channelMetrics_array_0, 0, sizeof(channelMetrics_array_0));
-            array_size = CHCOUNT2;
-        } else {
-            ptr = channelMetrics_array_1;
-            memset(channelMetrics_array_1, 0, sizeof(channelMetrics_array_1));
-            array_size = CHCOUNT5;
-        }
-        for (i = 0, j = 3; (i < array_size) && argv[j]; i++, j++) {
-            ptr[i].channel_in_pool = TRUE;
-            ptr[i].channel_number = atoi(argv[j]);
-            ++num_channels;
-        }
-        ret = wifi_getRadioDcsChannelMetrics(index, ptr, array_size);
-        for (i = 0; i < num_channels; i++, ptr++) {
-            printf("\n*** DcsChannelMetrics result for channel %d ***\n", ptr->channel_number);
-            printf("Channel in pool:%s\n", ((ptr->channel_in_pool) == 0) ? "FALSE" : "TRUE");
-            printf("Channel Noise:%d\n", ptr->channel_noise);
-            printf("Channel Radar Noise:%d\n", ptr->channel_radar_noise);
-            printf("Average non 802.11 Noise:%d\n", ptr->channel_non_80211_noise);
-            printf("Channel Utilization:%d\n", ptr->channel_utilization);
-            printf("Channel Tx Power:%d\n", ptr->channel_txpower);
-            printf("Rssi list of the Neighbouring AP on this channel\n");
-            for (j = 0; j < ptr->channel_rssi_count; j++) {
-                ptr_bssid = ptr->channel_rssi_list[j].ap_BSSID;
-                printf("\tIndex:%d BSSID:%02x:%02x:%02x:%02x:%02x:%02x Channel width:%d RSSI:%d\n", j, (unsigned char)ptr_bssid[0], (unsigned char)ptr_bssid[1], (unsigned char)ptr_bssid[2], (unsigned char)ptr_bssid[3], (unsigned char)ptr_bssid[4], (unsigned char)ptr_bssid[5], ptr->channel_rssi_list[j].ap_channelWidth, ptr->channel_rssi_list[j].ap_rssi);
-            }
-            printf("Channel RSSI Count:%d\n", ptr->channel_rssi_count);
-        }
-    }  else if (!strcmp(argv[1], "wifi_setApManagementFramePowerControl")) {
-        int power;
-        power = atoi(argv[3]);
-        ret = wifi_setApManagementFramePowerControl(index, power);
-    } else if (!strcmp(argv[1], "wifi_setApBeaconRate")) {
-        ret = wifi_setApBeaconRate(index, argv[3]);
-        printf("%s complete. returned %d\n", argv[1], ret);
-    } else if (!strcmp(argv[1], "wifi_setApBeaconType")) {
-        ret = wifi_setApBeaconType(index, argv[3]);
-    } else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceRxTxStatsResult")) {
-        wifi_associated_dev_rate_info_rx_stats_t *rx_stats_array;
-        wifi_associated_dev_rate_info_tx_stats_t *tx_stats_array;
-        ULLONG handle;
-        UINT output_array_size;
-        int i, k;
-        mac_address_t mac_address;
-        unsigned int macInt[6];
-        sscanf(argv[3], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1], &macInt[2], &macInt[3], &macInt[4], &macInt[5]);
-        for (k = 0; k < 6; k++) {
-            mac_address[k] = (unsigned char)macInt[k];
-        }
-        ret = wifi_getApAssociatedDeviceRxStatsResult(index, &mac_address, &rx_stats_array, &output_array_size, &handle);
-
-        printf("handle:%llu \n", handle);
-        for (i = 0; i < output_array_size; ++i) {
-            printf("\n***Rx Stats %d***\n", i);
-            printf("NSS:%d \n", rx_stats_array[i].nss);
-            printf("MCS:%d \n", rx_stats_array[i].mcs);
-            printf("BW:%d \n", rx_stats_array[i].bw);
-            printf("Flags:%llu \n", rx_stats_array[i].flags);
-            printf("Bytes:%llu \n", rx_stats_array[i].bytes);
-            printf("MSDUs:%llu \n", rx_stats_array[i].msdus);
-            printf("MPDUs:%llu \n", rx_stats_array[i].mpdus);
-            printf("PPDUs:%llu \n", rx_stats_array[i].ppdus);
-            printf("Retries:%llu \n", rx_stats_array[i].retries);
-            printf("RSSI Combined:%d \n", rx_stats_array[i].rssi_combined);
-        }
-        ret = wifi_getApAssociatedDeviceTxStatsResult(index, &mac_address, &tx_stats_array, &output_array_size, &handle);
-
-        printf("handle:%llu \n", handle);
-        for (i = 0; i < output_array_size; ++i) {
-            printf("\n***Tx Stats %d***\n", i);
-            printf("NSS:%d \n", tx_stats_array[i].nss);
-            printf("MCS:%d \n", tx_stats_array[i].mcs);
-            printf("BW:%d \n", tx_stats_array[i].bw);
-            printf("Flags:%llu \n", tx_stats_array[i].flags);
-            printf("Bytes:%llu \n", tx_stats_array[i].bytes);
-            printf("MSDUs:%llu \n", tx_stats_array[i].msdus);
-            printf("MPDUs:%llu \n", tx_stats_array[i].mpdus);
-            printf("PPDUs:%llu \n", tx_stats_array[i].ppdus);
-            printf("Retries:%llu \n", tx_stats_array[i].retries);
-            printf("Attempts:%llu \n", tx_stats_array[i].attempts);
-        }
-        if (rx_stats_array) {
-            free(rx_stats_array);
-        }
-        if (tx_stats_array) {
-            free(tx_stats_array);
-        }
-    } else if (!strcmp(argv[1], "wifi_setApScanFilter")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        if (argv[4] != NULL) snprintf(apiInfo.api_data, 1024, "%d %s", atoi(argv[3]), argv[4]);
-        else snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3]));
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_setApCsaDeauth")) {
-	ret = wifi_setApCsaDeauth(index, atoi(argv[3]));
-	if (ret != 0) {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_kickApAssociatedDevice")) {
-        ret = 0;
-        ret = wifi_kickApAssociatedDevice(index, argv[3]);
-        if (ret != 0) printf("Error\n");
-    } else if (!strcmp(argv[1], "wifi_setApWmmOgAckPolicy")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%d %d", atoi(argv[3]), atoi(argv[4]));
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_setRadioDCSScanTime")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%d %d", atoi(argv[3]), atoi(argv[4]));
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_setApSecuritySecondaryRadiusServer")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%s %d %s", argv[3], atoi(argv[4]), argv[5]);
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_setApSecurityRadiusServer")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%s %d %s", argv[3], atoi(argv[4]), argv[5]);
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_createAp")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%d %s %d", atoi(argv[3]), argv[4], atoi(argv[5]));
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-        //printf("%s complete. returned %d\n", argv[1], ret);
-    } else if (!strcmp(argv[1], "wifi_pushRadioChannel2")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%d %d %d", atoi(argv[3]), atoi(argv[4]), atoi(argv[5]));
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-	if (ret != 0) {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_setRadioChannelMode")) {
-	/* Deprecated from WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  < 15 */
-	ret = -1;
-	if ((argv[3] != NULL) && (argv[4] != NULL) && (argv[5]!= NULL) && (argv[6]!= NULL)) {
+		(!strcmp(argv[1], "wifi_setRadioDCSEnable")) ||
+		(!strcmp(argv[1], "wifi_setApRetryLimit")) ||
+		(!strcmp(argv[1], "wifi_setApMacAddressControlMode"))) {
 		wifi_api_info_t apiInfo;
 		strncpy(apiInfo.api_name, argv[1], 1024);
-		snprintf(apiInfo.api_data, 1024, "%s %d %d %d", argv[3], atoi(argv[4]), atoi(argv[5]), atoi(argv[6]));
+		strncpy(apiInfo.api_data, argv[3], 1024);
 		apiInfo.radioIndex = index;
 		ret = wifi_api_send_msg(&apiInfo);
-	}
-	if (ret != 0) {
-		printf("%s returned ERROR\n", argv[1]);
-	}
-    } else if (!strcmp(argv[1], "wifi_startNeighborScan")) {
-        unsigned int *list = NULL, num = 0, i = 0;
-        num = atoi(argv[5]);
-        list = (unsigned int *)malloc(num * sizeof(int));
-        for (i = 0; i < num; ++i) {
-            if (!argv[6 + i]) {
-                printf("Channel list arg[%d] is null\n", 6 + i);
-                return 0;
-            }
-            list[i] = atoi(argv[6 + i]);
-        }
-        ret = wifi_startNeighborScan(index, atoi(argv[3]), atoi(argv[4]), atoi(argv[5]), list);
-    } else if (!strcmp(argv[1], "wifi_pushApInterworkingElement")) {
-        wifi_api_info_t apiInfo;
-        wifi_InterworkingElement_t infoElement;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        apiInfo.radioIndex = index;
-        infoElement.interworkingEnabled = atoi(argv[3]);
-        infoElement.accessNetworkType = atoi(argv[4]);
-        infoElement.internetAvailable = atoi(argv[5]);
-        infoElement.asra = atoi(argv[6]);
-        infoElement.esr = atoi(argv[7]);
-        infoElement.uesa = atoi(argv[8]);
-        infoElement.venueOptionPresent = atoi(argv[9]);
-        infoElement.venueGroup = atoi(argv[10]);
-        infoElement.venueType = atoi(argv[11]);
-        infoElement.hessOptionPresent = atoi(argv[12]);
-        if (argv[13] != NULL) {
-            strncpy(infoElement.hessid, argv[13], 18);
-        } else {
-            strncpy(infoElement.hessid, "", 18);
-        }
-        memcpy(apiInfo.api_data, &infoElement, sizeof(wifi_InterworkingElement_t));
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_setRadioTrafficStatsMeasure")) {
-        wifi_radioTrafficStatsMeasure_t stats;
-        stats.radio_RadioStatisticsMeasuringRate = atoi(argv[3]);
-        stats.radio_RadioStatisticsMeasuringInterval = atoi(argv[4]);
-        ret = wifi_setRadioTrafficStatsMeasure(index, &stats);
-    } else if (!strcmp(argv[1], "wifi_setRadioTrafficStatsRadioStatisticsEnable")) {
-        ret = wifi_setRadioTrafficStatsRadioStatisticsEnable(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getRadioStatsReceivedSignalLevel")) {
-        INT level = 0;
-        ret = wifi_getRadioStatsReceivedSignalLevel(index, atoi(argv[3]), &level);
-        printf("Signal level:%d\n", level);
-    } else if (!strcmp(argv[1], "wifi_getRadioWifiTrafficStats")) {
-        wifi_radioTrafficStats_t stats;
-        memset(&stats, 0, sizeof(stats));
-        ret = wifi_getRadioWifiTrafficStats(index, &stats);
-        printf("Errors Sent:%lu\n", stats.wifi_ErrorsSent);
-        printf("Errors Received:%lu\n", stats.wifi_ErrorsReceived);
-        printf("Discard Packets Sent:%lu\n", stats.wifi_DiscardPacketsSent);
-        printf("Discard Packets Received:%lu\n", stats.wifi_DiscardPacketsReceived);
-        printf("PCP Error Count:%lu\n", stats.wifi_PLCPErrorCount);
-        printf("FCS Error Count:%lu\n", stats.wifi_FCSErrorCount);
-        printf("Invalid MAC Count:%lu\n", stats.wifi_InvalidMACCount);
-        printf("Other Packets Received:%lu\n", stats.wifi_PacketsOtherReceived);
-        printf("Noise:%d\n", stats.wifi_Noise);
-    } else if (!strcmp(argv[1], "wifi_getSSIDTrafficStats")) {
-        wifi_ssidTrafficStats_t stats;
-        memset(&stats, 0, sizeof(stats));
-        ret = wifi_getSSIDTrafficStats(index, &stats);
-        printf("Retrans count:%lu\n", stats.wifi_RetransCount);
-        printf("Failed Retrans count:%lu\n", stats.wifi_FailedRetransCount);
-        printf("Retry count:%lu\n", stats.wifi_RetryCount);
-        printf("Multiple Retry count:%lu\n", stats.wifi_MultipleRetryCount);
-        printf("ACK Failure Count:%lu\n", stats.wifi_ACKFailureCount);
-        printf("Aggregated Packet Count:%lu\n", stats.wifi_AggregatedPacketCount);
-    } else if (!strcmp(argv[1], "wifi_setRadioStatsEnable")) {
-        ret = wifi_setRadioStatsEnable(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getRadioStatsEnable")) {
-        BOOL enable = FALSE;
-        ret = wifi_getRadioStatsEnable(index, &enable);
-        printf("%s\n", enable ? "TRUE" : "FALSE");
-    }
-    else if (!strcmp(argv[1], "wifi_startHostApd")) {
-        ret = wifi_startHostApd();
-    }
-    else if (!strcmp(argv[1], "wifi_stopHostApd")) {
-        ret = wifi_stopHostApd();
-    } else if (!strcmp(argv[1], "wifi_getApWmmEnable")) {
-        BOOL enable;
-        ret = wifi_getApWmmEnable(index, &enable);
-        printf("%s\n", enable? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_setLED")) {
-        ret = wifi_setLED(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getRadioAutoChannelRefreshPeriodSupported")) {
-        BOOL enable;
-        ret = wifi_getRadioAutoChannelRefreshPeriodSupported(index, &enable);
-        printf("%s\n", enable? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getRadioAutoChannelRefreshPeriod")) {
-        ULONG period;
-        ret = wifi_getRadioAutoChannelRefreshPeriod(index, &period);
-        printf("AutoChannelRefreshPeriod %lu\n", period);
-    } else if (!strcmp(argv[1], "wifi_setRadioMCS")) {
-        ret = wifi_setRadioMCS(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getRadioMCS")) {
-        int mcs;
-        ret = wifi_getRadioMCS(index, &mcs);
-        printf("Mcs index is %d\n", mcs);
-    } else if (!strcmp(argv[1], "wifi_getRadioIEEE80211hSupported")) {
-        BOOL enable;
-        ret = wifi_getRadioIEEE80211hSupported(index, &enable);
-        printf("%s\n", enable? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_getRadioIEEE80211hEnabled")) {
-        BOOL enable;
-        ret = wifi_getRadioIEEE80211hEnabled(index, &enable);
-        printf("%s\n", enable? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_setRadioIEEE80211hEnabled")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
-        snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3]));
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_getRadioBeaconPeriod")) {
-        uint period;
-        ret = wifi_getRadioBeaconPeriod(index, &period);
-        printf("Beacon Period: %d\n", period);
-    } else if (!strcmp(argv[1], "wifi_setRadioBeaconPeriod")) {
-        ret = wifi_setRadioBeaconPeriod(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getSSIDMACAddress")) {
-        char mac[18];
-        ret = wifi_getSSIDMACAddress(index, mac);
-        printf("SSIDMacAddress: %s\n", mac);
-    } else if (!strcmp(argv[1], "wifi_getApRtsThresholdSupported")) {
-        BOOL supported;
-        ret = wifi_getApRtsThresholdSupported(index, &supported);
-        printf("%s\n", supported ? "TRUE" : "FALSE");
-    } else if (!strcmp(argv[1], "wifi_kickApAclAssociatedDevices")) {
-        ret = wifi_kickApAclAssociatedDevices(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getApRetryLimit")) {
-        uint limit;
-        ret = wifi_getApRetryLimit(index, &limit);
-        printf("AP retry limit: %d\n", limit);
-    } else if (!strcmp(argv[1], "wifi_getApWMMCapability")) {
-        BOOL enable;
-        ret = wifi_getApWMMCapability(index, &enable);
-        printf("%s\n", enable ? "Enabled" : "Disabled");
-    } else if (!strcmp(argv[1], "wifi_getApUAPSDCapability")) {
-        BOOL enable;
-        ret = wifi_getApUAPSDCapability(index, &enable);
-        printf("%s\n", enable ? "Enabled" : "Disabled");
-    } else if (!strcmp(argv[1], "wifi_getApWmmUapsdEnable")) {
-        BOOL enable;
-        ret = wifi_getApWmmUapsdEnable(index, &enable);
-        printf("%s\n", enable ? "Enabled" : "Disabled");
-    } else if (!strcmp(argv[1], "wifi_getApMaxAssociatedDevices")) {
-        uint num;
-        ret = wifi_getApMaxAssociatedDevices(index, &num);
-        printf("Max Associated Devices: %d\n", num);
-    } else if (!strcmp(argv[1], "wifi_setApMaxAssociatedDevices")) {
-        wifi_api_info_t apiInfo;
-        strncpy(apiInfo.api_name, argv[1], 1024);
+
+	} else if (!strcmp(argv[1], "wifi_getApDeviceRSSI")) {
+		INT output_RSSI;
+		ret = wifi_getApDeviceRSSI(index, argv[3], &output_RSSI);
+		printf("%d\n", output_RSSI);
+	} else if (!strcmp(argv[1], "wifi_getApDeviceRxrate")) {
+		INT output_RxMb;
+		ret = wifi_getApDeviceRxrate(index, argv[3], &output_RxMb);
+		printf("%d\n", output_RxMb);
+	} else if (!strcmp(argv[1], "wifi_getApDeviceTxrate")) {
+		INT output_TxMb;
+		ret = wifi_getApDeviceTxrate(index, argv[3], &output_TxMb);
+		printf("%d\n", output_TxMb);
+	} else if (!strcmp(argv[1], "wifi_getRadioDcsChannelMetrics")) {
+		wifi_channelMetrics_t * ptr, channelMetrics_array_0[CHCOUNT2];
+		wifi_channelMetrics_t channelMetrics_array_1[CHCOUNT5];
+		int array_size, i, j, num_channels = 0;
+		char *ptr_bssid;
+
+		if (index == 0) {
+			ptr = channelMetrics_array_0;
+			memset(channelMetrics_array_0, 0, sizeof(channelMetrics_array_0));
+			array_size = CHCOUNT2;
+		} else {
+			ptr = channelMetrics_array_1;
+			memset(channelMetrics_array_1, 0, sizeof(channelMetrics_array_1));
+			array_size = CHCOUNT5;
+		}
+		for (i = 0, j = 3; (i < array_size) && argv[j]; i++, j++) {
+			ptr[i].channel_in_pool = TRUE;
+			ptr[i].channel_number = atoi(argv[j]);
+			++num_channels;
+		}
+		ret = wifi_getRadioDcsChannelMetrics(index, ptr, array_size);
+		for (i = 0; i < num_channels; i++, ptr++) {
+			printf("\n*** DcsChannelMetrics result for channel %d ***\n",
+				ptr->channel_number);
+			printf("Channel in pool		:%s\n",
+				((ptr->channel_in_pool) == 0) ? "FALSE" : "TRUE");
+			printf("Channel Noise		:%d\n", ptr->channel_noise);
+			printf("Channel Radar Noise	:%d\n", ptr->channel_radar_noise);
+			printf("Average non 802.11 Noise:%d\n", ptr->channel_non_80211_noise);
+			printf("Channel Utilization	:%d\n", ptr->channel_utilization);
+			printf("Channel Tx Power	:%d\n", ptr->channel_txpower);
+			printf("Rssi list of the Neighbouring AP on this channel\n");
+			for (j = 0; j < ptr->channel_rssi_count; j++) {
+				ptr_bssid = ptr->channel_rssi_list[j].ap_BSSID;
+				printf("\tIndex:%d BSSID:%02x:%02x:%02x:%02x:%02x:%02x Channel width:%d RSSI:%d\n",
+					j, (unsigned char)ptr_bssid[0], (unsigned char)ptr_bssid[1],
+					(unsigned char)ptr_bssid[2], (unsigned char)ptr_bssid[3],
+					(unsigned char)ptr_bssid[4], (unsigned char)ptr_bssid[5],
+					ptr->channel_rssi_list[j].ap_channelWidth,
+					ptr->channel_rssi_list[j].ap_rssi);
+			}
+			printf("Channel RSSI Count	:%d\n", ptr->channel_rssi_count);
+		}
+	}  else if (!strcmp(argv[1], "wifi_setApManagementFramePowerControl")) {
+		int power;
+		power = atoi(argv[3]);
+		ret = wifi_setApManagementFramePowerControl(index, power);
+	} else if (!strcmp(argv[1], "wifi_setApBeaconRate")) {
+		ret = wifi_setApBeaconRate(index, argv[3]);
+		printf("%s complete. returned %d\n", argv[1], ret);
+	} else if (!strcmp(argv[1], "wifi_setApBeaconType")) {
+		ret = wifi_setApBeaconType(index, argv[3]);
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedDeviceRxTxStatsResult")) {
+		wifi_associated_dev_rate_info_rx_stats_t *rx_stats_array;
+		wifi_associated_dev_rate_info_tx_stats_t *tx_stats_array;
+		ULLONG handle;
+		UINT output_array_size;
+		int i, k;
+		mac_address_t mac_address;
+		unsigned int macInt[6];
+		sscanf(argv[3], "%02x:%02x:%02x:%02x:%02x:%02x", &macInt[0], &macInt[1],
+			&macInt[2], &macInt[3], &macInt[4], &macInt[5]);
+		for (k = 0; k < 6; k++) {
+			mac_address[k] = (unsigned char)macInt[k];
+		}
+		ret = wifi_getApAssociatedDeviceRxStatsResult(index, &mac_address, &rx_stats_array,
+			&output_array_size, &handle);
+
+		printf("handle			:%llu \n", handle);
+		for (i = 0; i < output_array_size; ++i) {
+			printf("\n***Rx Stats %d***\n", i);
+			printf("NSS		:%d \n", rx_stats_array[i].nss);
+			printf("MCS		:%d \n", rx_stats_array[i].mcs);
+			printf("BW		:%d \n", rx_stats_array[i].bw);
+			printf("Flags		:%llu \n", rx_stats_array[i].flags);
+			printf("Bytes		:%llu \n", rx_stats_array[i].bytes);
+			printf("MSDUs		:%llu \n", rx_stats_array[i].msdus);
+			printf("MPDUs		:%llu \n", rx_stats_array[i].mpdus);
+			printf("PPDUs		:%llu \n", rx_stats_array[i].ppdus);
+			printf("Retries		:%llu \n", rx_stats_array[i].retries);
+			printf("RSSI Combined	:%d \n", rx_stats_array[i].rssi_combined);
+		}
+		ret = wifi_getApAssociatedDeviceTxStatsResult(index, &mac_address, &tx_stats_array,
+			&output_array_size, &handle);
+
+		printf("handle			:%llu \n", handle);
+		for (i = 0; i < output_array_size; ++i) {
+			printf("\n***Tx Stats %d***\n", i);
+			printf("NSS		:%d \n", tx_stats_array[i].nss);
+			printf("MCS		:%d \n", tx_stats_array[i].mcs);
+			printf("BW		:%d \n", tx_stats_array[i].bw);
+			printf("Flags		:%llu \n", tx_stats_array[i].flags);
+			printf("Bytes		:%llu \n", tx_stats_array[i].bytes);
+			printf("MSDUs		:%llu \n", tx_stats_array[i].msdus);
+			printf("MPDUs		:%llu \n", tx_stats_array[i].mpdus);
+			printf("PPDUs		:%llu \n", tx_stats_array[i].ppdus);
+			printf("Retries		:%llu \n", tx_stats_array[i].retries);
+			printf("Attempts	:%llu \n", tx_stats_array[i].attempts);
+		}
+		if (rx_stats_array) {
+			free(rx_stats_array);
+		}
+		if (tx_stats_array) {
+			free(tx_stats_array);
+		}
+	} else if (!strcmp(argv[1], "wifi_setApScanFilter")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		if (argv[4] != NULL) snprintf(apiInfo.api_data, 1024, "%d %s", atoi(argv[3]),
+			argv[4]);
+		else snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_setApCsaDeauth")) {
+		ret = wifi_setApCsaDeauth(index, atoi(argv[3]));
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_kickApAssociatedDevice")) {
+		ret = 0;
+		ret = wifi_kickApAssociatedDevice(index, argv[3]);
+		if (ret != 0) printf("Error\n");
+	} else if (!strcmp(argv[1], "wifi_setApWmmOgAckPolicy")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%d %d", atoi(argv[3]), atoi(argv[4]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_setRadioDCSScanTime")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%d %d", atoi(argv[3]), atoi(argv[4]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_setApSecuritySecondaryRadiusServer")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%s %d %s", argv[3], atoi(argv[4]), argv[5]);
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_setApSecurityRadiusServer")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%s %d %s", argv[3], atoi(argv[4]), argv[5]);
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_createAp")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%d %s %d", atoi(argv[3]), argv[4],
+			atoi(argv[5]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+		//printf("%s complete. returned %d\n", argv[1], ret);
+	} else if (!strcmp(argv[1], "wifi_pushRadioChannel2")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%d %d %d", atoi(argv[3]), atoi(argv[4]),
+			atoi(argv[5]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_setRadioChannelMode")) {
+		/* Deprecated from WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION  < 15 */
+		ret = -1;
+		if ((argv[3] != NULL) && (argv[4] != NULL) && (argv[5]!= NULL) &&
+			(argv[6]!= NULL)) {
+			wifi_api_info_t apiInfo;
+			strncpy(apiInfo.api_name, argv[1], 1024);
+			snprintf(apiInfo.api_data, 1024, "%s %d %d %d", argv[3], atoi(argv[4]),
+				atoi(argv[5]), atoi(argv[6]));
+			apiInfo.radioIndex = index;
+			ret = wifi_api_send_msg(&apiInfo);
+		}
+		if (ret != 0) {
+			printf("%s returned ERROR\n", argv[1]);
+		}
+	} else if (!strcmp(argv[1], "wifi_startNeighborScan")) {
+		unsigned int *list = NULL, num = 0, i = 0;
+		num = atoi(argv[5]);
+		list = (unsigned int *)malloc(num * sizeof(int));
+		for (i = 0; i < num; ++i) {
+			if (!argv[6 + i]) {
+				printf("Channel list arg[%d] is null\n", 6 + i);
+				return 0;
+			}
+			list[i] = atoi(argv[6 + i]);
+		}
+		ret = wifi_startNeighborScan(index, atoi(argv[3]), atoi(argv[4]), atoi(argv[5]),
+			list);
+	} else if (!strcmp(argv[1], "wifi_pushApInterworkingElement")) {
+		wifi_api_info_t apiInfo;
+		wifi_InterworkingElement_t infoElement;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		apiInfo.radioIndex = index;
+		infoElement.interworkingEnabled = atoi(argv[3]);
+		infoElement.accessNetworkType = atoi(argv[4]);
+		infoElement.internetAvailable = atoi(argv[5]);
+		infoElement.asra = atoi(argv[6]);
+		infoElement.esr = atoi(argv[7]);
+		infoElement.uesa = atoi(argv[8]);
+		infoElement.venueOptionPresent = atoi(argv[9]);
+		infoElement.venueGroup = atoi(argv[10]);
+		infoElement.venueType = atoi(argv[11]);
+		infoElement.hessOptionPresent = atoi(argv[12]);
+		if (argv[13] != NULL) {
+			strncpy(infoElement.hessid, argv[13], 18);
+		} else {
+			strncpy(infoElement.hessid, "", 18);
+		}
+		memcpy(apiInfo.api_data, &infoElement, sizeof(wifi_InterworkingElement_t));
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_setRadioTrafficStatsMeasure")) {
+		wifi_radioTrafficStatsMeasure_t stats;
+		stats.radio_RadioStatisticsMeasuringRate = atoi(argv[3]);
+		stats.radio_RadioStatisticsMeasuringInterval = atoi(argv[4]);
+		ret = wifi_setRadioTrafficStatsMeasure(index, &stats);
+	} else if (!strcmp(argv[1], "wifi_setRadioTrafficStatsRadioStatisticsEnable")) {
+		ret = wifi_setRadioTrafficStatsRadioStatisticsEnable(index, atoi(argv[3]));
+	} else if (!strcmp(argv[1], "wifi_getRadioStatsReceivedSignalLevel")) {
+		INT level = 0;
+		ret = wifi_getRadioStatsReceivedSignalLevel(index, atoi(argv[3]), &level);
+		printf("Signal level:%d\n", level);
+	} else if (!strcmp(argv[1], "wifi_getRadioWifiTrafficStats")) {
+		wifi_radioTrafficStats_t stats;
+		memset(&stats, 0, sizeof(stats));
+		ret = wifi_getRadioWifiTrafficStats(index, &stats);
+		printf("Errors Sent:%lu\n", stats.wifi_ErrorsSent);
+		printf("Errors Received:%lu\n", stats.wifi_ErrorsReceived);
+		printf("Discard Packets Sent:%lu\n", stats.wifi_DiscardPacketsSent);
+		printf("Discard Packets Received:%lu\n", stats.wifi_DiscardPacketsReceived);
+		printf("PCP Error Count:%lu\n", stats.wifi_PLCPErrorCount);
+		printf("FCS Error Count:%lu\n", stats.wifi_FCSErrorCount);
+		printf("Invalid MAC Count:%lu\n", stats.wifi_InvalidMACCount);
+		printf("Other Packets Received:%lu\n", stats.wifi_PacketsOtherReceived);
+		printf("Noise:%d\n", stats.wifi_Noise);
+	} else if (!strcmp(argv[1], "wifi_getSSIDTrafficStats")) {
+		wifi_ssidTrafficStats_t stats;
+		memset(&stats, 0, sizeof(stats));
+		ret = wifi_getSSIDTrafficStats(index, &stats);
+		printf("Retrans count:%lu\n", stats.wifi_RetransCount);
+		printf("Failed Retrans count:%lu\n", stats.wifi_FailedRetransCount);
+		printf("Retry count:%lu\n", stats.wifi_RetryCount);
+		printf("Multiple Retry count:%lu\n", stats.wifi_MultipleRetryCount);
+		printf("ACK Failure Count:%lu\n", stats.wifi_ACKFailureCount);
+		printf("Aggregated Packet Count:%lu\n", stats.wifi_AggregatedPacketCount);
+	} else if (!strcmp(argv[1], "wifi_setRadioStatsEnable")) {
+		ret = wifi_setRadioStatsEnable(index, atoi(argv[3]));
+	} else if (!strcmp(argv[1], "wifi_getRadioStatsEnable")) {
+		BOOL enable = FALSE;
+		ret = wifi_getRadioStatsEnable(index, &enable);
+		printf("%s\n", enable ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_startHostApd")) {
+		ret = wifi_startHostApd();
+	} else if (!strcmp(argv[1], "wifi_stopHostApd")) {
+		ret = wifi_stopHostApd();
+	} else if (!strcmp(argv[1], "wifi_getApWmmEnable")) {
+		BOOL enable;
+		ret = wifi_getApWmmEnable(index, &enable);
+		printf("%s\n", enable? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_setLED")) {
+		ret = wifi_setLED(index, atoi(argv[3]));
+	} else if (!strcmp(argv[1], "wifi_getRadioAutoChannelRefreshPeriodSupported")) {
+		BOOL enable;
+		ret = wifi_getRadioAutoChannelRefreshPeriodSupported(index, &enable);
+		printf("%s\n", enable? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getRadioAutoChannelRefreshPeriod")) {
+		ULONG period;
+		ret = wifi_getRadioAutoChannelRefreshPeriod(index, &period);
+		printf("AutoChannelRefreshPeriod %lu\n", period);
+	} else if (!strcmp(argv[1], "wifi_setRadioMCS")) {
+		ret = wifi_setRadioMCS(index, atoi(argv[3]));
+	} else if (!strcmp(argv[1], "wifi_getRadioMCS")) {
+		int mcs;
+		ret = wifi_getRadioMCS(index, &mcs);
+		printf("Mcs index is %d\n", mcs);
+	} else if (!strcmp(argv[1], "wifi_getRadioIEEE80211hSupported")) {
+		BOOL enable;
+		ret = wifi_getRadioIEEE80211hSupported(index, &enable);
+		printf("%s\n", enable? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_getRadioIEEE80211hEnabled")) {
+		BOOL enable;
+		ret = wifi_getRadioIEEE80211hEnabled(index, &enable);
+		printf("%s\n", enable? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_setRadioIEEE80211hEnabled")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_getRadioBeaconPeriod")) {
+		uint period;
+		ret = wifi_getRadioBeaconPeriod(index, &period);
+		printf("Beacon Period: %d\n", period);
+	} else if (!strcmp(argv[1], "wifi_setRadioBeaconPeriod")) {
+		ret = wifi_setRadioBeaconPeriod(index, atoi(argv[3]));
+	} else if (!strcmp(argv[1], "wifi_getSSIDMACAddress")) {
+		char mac[18];
+		ret = wifi_getSSIDMACAddress(index, mac);
+		printf("SSIDMacAddress: %s\n", mac);
+	} else if (!strcmp(argv[1], "wifi_getApRtsThresholdSupported")) {
+		BOOL supported;
+		ret = wifi_getApRtsThresholdSupported(index, &supported);
+		printf("%s\n", supported ? "TRUE" : "FALSE");
+	} else if (!strcmp(argv[1], "wifi_kickApAclAssociatedDevices")) {
+		ret = wifi_kickApAclAssociatedDevices(index, atoi(argv[3]));
+	} else if (!strcmp(argv[1], "wifi_getApRetryLimit")) {
+		uint limit;
+		ret = wifi_getApRetryLimit(index, &limit);
+		printf("AP retry limit: %d\n", limit);
+	} else if (!strcmp(argv[1], "wifi_getApWMMCapability")) {
+		BOOL enable;
+		ret = wifi_getApWMMCapability(index, &enable);
+		printf("%s\n", enable ? "Enabled" : "Disabled");
+	} else if (!strcmp(argv[1], "wifi_getApUAPSDCapability")) {
+		BOOL enable;
+		ret = wifi_getApUAPSDCapability(index, &enable);
+		printf("%s\n", enable ? "Enabled" : "Disabled");
+	} else if (!strcmp(argv[1], "wifi_getApWmmUapsdEnable")) {
+		BOOL enable;
+		ret = wifi_getApWmmUapsdEnable(index, &enable);
+		printf("%s\n", enable ? "Enabled" : "Disabled");
+	} else if (!strcmp(argv[1], "wifi_getApMaxAssociatedDevices")) {
+		uint num;
+		ret = wifi_getApMaxAssociatedDevices(index, &num);
+		printf("Max Associated Devices: %d\n", num);
+	} else if (!strcmp(argv[1], "wifi_setApMaxAssociatedDevices")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
 	strncpy(apiInfo.api_data, argv[3], 1024);
-       /* snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3])); */
-        apiInfo.radioIndex = index;
-        ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_setApBridgeInfo")) {
-        ret = wifi_setApBridgeInfo(index, argv[3], argv[4], argv[5]);
-    } else if (!strcmp(argv[1], "wifi_getIndexFromName")) {
-        int bss_idx;
-        ret = wifi_getIndexFromName(argv[2], &bss_idx);
-        printf("bssid index: %d\n", bss_idx);
-    } else if (!strcmp(argv[1], "wifi_initRadio")) {
-        ret = wifi_initRadio(index);
-    } else if (!strcmp(argv[1], "wifi_setApRtsThreshold")) {
-        wifi_api_info_t apiInfo;
-	strncpy(apiInfo.api_name, argv[1], 1024);
-	snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3]));
-	apiInfo.radioIndex = index;
-	ret = wifi_api_send_msg(&apiInfo);
-    } else if (!strcmp(argv[1], "wifi_getRadioDfsSupport")) {
-        BOOL enable;
-        ret = wifi_getRadioDfsSupport(index, &enable);
-        printf("%s\n", enable ? "Supported" : "Not supported");
-    } else if (!strcmp(argv[1], "wifi_getRadioDfsEnable")) {
-        BOOL enable;
-        ret = wifi_getRadioDfsEnable(index, &enable);
-        printf("%s\n", enable ? "Enabled" : "Disabled");
-    } else if (!strcmp(argv[1], "wifi_setApAssociatedDevicesHighWatermarkThreshold")) {
-        ret = wifi_setApAssociatedDevicesHighWatermarkThreshold(index, atoi(argv[3]));
-    } else if (!strcmp(argv[1], "wifi_getRadioDfsMoveBackEnable")) {
-        BOOL enable;
-        ret = wifi_getRadioDfsMoveBackEnable(index, &enable);
-        printf("%s\n", enable ? "Enabled" : "Disabled");
-    }
+	   /* snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3])); */
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_setApBridgeInfo")) {
+		ret = wifi_setApBridgeInfo(index, argv[3], argv[4], argv[5]);
+	} else if (!strcmp(argv[1], "wifi_getIndexFromName")) {
+		int bss_idx;
+		ret = wifi_getIndexFromName(argv[2], &bss_idx);
+		printf("bssid index: %d\n", bss_idx);
+	} else if (!strcmp(argv[1], "wifi_initRadio")) {
+		ret = wifi_initRadio(index);
+	} else if (!strcmp(argv[1], "wifi_setApRtsThreshold")) {
+		wifi_api_info_t apiInfo;
+		strncpy(apiInfo.api_name, argv[1], 1024);
+		snprintf(apiInfo.api_data, 1024, "%d", atoi(argv[3]));
+		apiInfo.radioIndex = index;
+		ret = wifi_api_send_msg(&apiInfo);
+	} else if (!strcmp(argv[1], "wifi_getRadioDfsSupport")) {
+		BOOL enable;
+		ret = wifi_getRadioDfsSupport(index, &enable);
+		printf("%s\n", enable ? "Supported" : "Not supported");
+	} else if (!strcmp(argv[1], "wifi_getRadioDfsEnable")) {
+		BOOL enable;
+		ret = wifi_getRadioDfsEnable(index, &enable);
+		printf("%s\n", enable ? "Enabled" : "Disabled");
+	} else if (!strcmp(argv[1], "wifi_setApAssociatedDevicesHighWatermarkThreshold")) {
+		ret = wifi_setApAssociatedDevicesHighWatermarkThreshold(index, atoi(argv[3]));
+#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
+	} else if (!strcmp(argv[1], "wifi_getRadioDfsMoveBackEnable")) {
+		BOOL enable;
+		ret = wifi_getRadioDfsMoveBackEnable(index, &enable);
+		printf("%s\n", enable ? "Enabled" : "Disabled");
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION  >= 17)
-    else if (!strcmp(argv[1], "wifi_getApAssociatedClientDiagnosticResult")) {
-        wifi_associated_dev3_t assocInfo, *pt = &assocInfo;
-        ret = wifi_getApAssociatedClientDiagnosticResult(index, argv[3], pt);
-        if (ret == RETURN_OK) {
-            printf("cli_MACAddress = %02x:%02x:%02x:%02x:%02x:%02x\n", pt->cli_MACAddress[0], pt->cli_MACAddress[1], pt->cli_MACAddress[2],
-                       pt->cli_MACAddress[3], pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
-            printf("cli_LastDataDownlinkRate = %d\n", pt->cli_LastDataDownlinkRate);
-            printf("cli_LastDataUplinkRate = %d\n", pt->cli_LastDataUplinkRate);
-            printf("cli_SignalStrength = %d\n", pt->cli_SignalStrength);
-            printf("cli_OperatingStandard = %s\n", pt->cli_OperatingStandard);
-            printf("cli_OperatingChannelBandwidth = %s\n", pt->cli_OperatingChannelBandwidth);
-            printf("cli_SNR = %d\n", pt->cli_SNR);
-            printf("cli_RSSI = %d\n", pt->cli_RSSI);
-            printf("cli_AuthenticationState = %d\n", pt->cli_AuthenticationState);
-            printf("cli_Retransmissions = %d\n", pt->cli_Retransmissions);
-            printf("cli_Disassociations = %d\n", pt->cli_Disassociations);
-            printf("cli_AuthenticationFailures = %d\n", pt->cli_AuthenticationFailures);
-            printf("cli_BytesSent = %lu\n", pt->cli_BytesSent);
-            printf("cli_BytesReceived = %lu\n", pt->cli_BytesReceived);
-            printf("cli_PacketsSent = %lu\n", pt->cli_PacketsSent);
-            printf("cli_PacketsReceived = %lu\n", pt->cli_PacketsReceived);
-            printf("cli_ErrorsSent = %lu\n", pt->cli_ErrorsSent);
-            printf("cli_RetransCount = %lu\n", pt->cli_RetransCount);
-            printf("cli_FailedRetransCount = %lu\n", pt->cli_FailedRetransCount);
-            printf("cli_RetryCount = %lu\n", pt->cli_RetryCount);
-            printf("cli_MultipleRetryCount = %lu\n", pt->cli_MultipleRetryCount);
-            printf("cli_MaxDownlinkRate = %d\n", pt->cli_MaxDownlinkRate);
-            printf("cli_MaxUplinkRate = %d\n", pt->cli_MaxUplinkRate);
-        } else {
-            printf("Unable to get the info\n");
-        }
-    }
+	} else if (!strcmp(argv[1], "wifi_getApAssociatedClientDiagnosticResult")) {
+		wifi_associated_dev3_t assocInfo, *pt = &assocInfo;
+		ret = wifi_getApAssociatedClientDiagnosticResult(index, argv[3], pt);
+		if (ret == RETURN_OK) {
+			printf("cli_MACAddress			:%02x:%02x:%02x:%02x:%02x:%02x\n",
+				pt->cli_MACAddress[0], pt->cli_MACAddress[1],
+				pt->cli_MACAddress[2], pt->cli_MACAddress[3],
+				pt->cli_MACAddress[4], pt->cli_MACAddress[5]);
+			printf("cli_LastDataDownlinkRate	:%d\n",
+				pt->cli_LastDataDownlinkRate);
+			printf("cli_LastDataUplinkRate		:%d\n",
+				pt->cli_LastDataUplinkRate);
+			printf("cli_SignalStrength		:%d\n", pt->cli_SignalStrength);
+			printf("cli_OperatingStandard		:%s\n", pt->cli_OperatingStandard);
+			printf("cli_OperatingChannelBandwidth	:%s\n",
+				pt->cli_OperatingChannelBandwidth);
+			printf("cli_SNR				:%d\n", pt->cli_SNR);
+			printf("cli_RSSI			:%d\n", pt->cli_RSSI);
+			printf("cli_AuthenticationState		:%d\n",
+				pt->cli_AuthenticationState);
+			printf("cli_Retransmissions		:%d\n", pt->cli_Retransmissions);
+			printf("cli_Disassociations		:%d\n", pt->cli_Disassociations);
+			printf("cli_AuthenticationFailures	:%d\n",
+				pt->cli_AuthenticationFailures);
+			printf("cli_BytesSent			:%lu\n", pt->cli_BytesSent);
+			printf("cli_BytesReceived		:%lu\n", pt->cli_BytesReceived);
+			printf("cli_PacketsSent			:%lu\n", pt->cli_PacketsSent);
+			printf("cli_PacketsReceived		:%lu\n", pt->cli_PacketsReceived);
+			printf("cli_ErrorsSent			:%lu\n", pt->cli_ErrorsSent);
+			printf("cli_RetransCount		:%lu\n", pt->cli_RetransCount);
+			printf("cli_FailedRetransCount		:%lu\n",
+				pt->cli_FailedRetransCount);
+			printf("cli_RetryCount			:%lu\n", pt->cli_RetryCount);
+			printf("cli_MultipleRetryCount		:%lu\n",
+				pt->cli_MultipleRetryCount);
+			printf("cli_MaxDownlinkRate		:%d\n", pt->cli_MaxDownlinkRate);
+			printf("cli_MaxUplinkRate		:%d\n", pt->cli_MaxUplinkRate);
+		} else {
+			printf("Unable to get the info\n");
+		}
 #endif /* #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION  >= 17) */
-    else if (!strcmp(argv[1], "wifi_setClientDetailedStatisticsEnable")) {
-        ret = wifi_setClientDetailedStatisticsEnable(index, atoi(argv[3]));
-    }
+	} else if (!strcmp(argv[1], "wifi_setClientDetailedStatisticsEnable")) {
+		ret = wifi_setClientDetailedStatisticsEnable(index, atoi(argv[3]));
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 16)
 #ifdef _XF3_PRODUCT_REQ_
-    else if (!strcmp(argv[1], "wifi_getVAPTelemetry")) {
-        wifi_VAPTelemetry_t telemetry;
-        ret = wifi_getVAPTelemetry(index, &telemetry);
-        if (ret == RETURN_OK) {
-            printf("%d\n", *(int *)&telemetry);
-        } else {
-            printf("Unable to get the info\n");
-        }
-    }
+	} else if (!strcmp(argv[1], "wifi_getVAPTelemetry")) {
+		wifi_VAPTelemetry_t telemetry;
+		ret = wifi_getVAPTelemetry(index, &telemetry);
+		if (ret == RETURN_OK) {
+			printf("%d\n", *(int *)&telemetry);
+		} else {
+			printf("Unable to get the info\n");
+		}
 #endif // endif
 #endif /* (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 16) */
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION  >= 18)
-    else if (!strcmp(argv[1], "wifi_getRadioPercentageTransmitPower")) {
-        unsigned long power;
-        ret = wifi_getRadioPercentageTransmitPower(index, &power);
-        if (ret == RETURN_OK) {
-            printf("%ld\n", power);
-        } else {
-            printf("Unable to get the info\n");
-        }
-    }
+	} else if (!strcmp(argv[1], "wifi_getRadioPercentageTransmitPower")) {
+		unsigned long power;
+		ret = wifi_getRadioPercentageTransmitPower(index, &power);
+		if (ret == RETURN_OK) {
+			printf("%ld\n", power);
+		} else {
+			printf("Unable to get the info\n");
+		}
 #endif /* (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 18) */
-    else if (!strcmp(argv[1], "wifi_getBandSteeringLog")) {
-        unsigned long steering_time;
-        char mac[MAC_STR_LEN];
-        int source, dest, reason;
-        ret = wifi_getBandSteeringLog(index, &steering_time, mac, &source, &dest, &reason);
-        if (ret == RETURN_OK) {
-            printf("Steering Time:%lu, MAC:%s Source SSID:%d Destination SSID:%d Reason:%d\n", steering_time, mac, source, dest, reason);
-        } else {
-            printf("Unable to get the info\n");
-        }
-    }
-	else if (!strcmp(argv[1], "wifi_getNeighboringWiFiDiagnosticResult2")) {
+	} else if (!strcmp(argv[1], "wifi_getBandSteeringLog")) {
+		unsigned long steering_time;
+		char mac[MAC_STR_LEN];
+		int source, dest, reason;
+		ret = wifi_getBandSteeringLog(index, &steering_time, mac, &source, &dest, &reason);
+		if (ret == RETURN_OK) {
+			printf("Steering Time:%lu, MAC:%s Source SSID:%d Destination SSID:%d Reason:%d\n",
+				steering_time, mac, source, dest, reason);
+		} else {
+			printf("Unable to get the info\n");
+		}
+	} else if (!strcmp(argv[1], "wifi_getNeighboringWiFiDiagnosticResult2")) {
 		wifi_neighbor_ap2_t *neighbor_ap_array = NULL,*pt = NULL;
 		UINT array_size = 0;
 		UINT i;
-		ret = wifi_getNeighboringWiFiDiagnosticResult2(index, &neighbor_ap_array, &array_size);
+		ret = wifi_getNeighboringWiFiDiagnosticResult2(index, &neighbor_ap_array,
+			&array_size);
 		if (ret != RETURN_ERR) {
 			printf("Total Scan Results:%d\n", array_size);
 			for (i = 0, pt = neighbor_ap_array; i < array_size; i++, pt++) {
-				printf("\nneighbor %d:\n", i+1);
-				printf("\tap_SSID	= %s\n", pt->ap_SSID);
-				printf("\tap_BSSID = %s\n", pt->ap_BSSID);
-				printf("\tap_Mode = %s\n", pt->ap_Mode);
-				printf("\tap_Channel = %d\n", pt->ap_Channel);
-				printf("\tap_SignalStrength = %d\n", pt->ap_SignalStrength);
-				printf("\tap_SecurityModeEnabled = %s\n", pt->ap_SecurityModeEnabled);
-				printf("\tap_EncryptionMode = %s\n", pt->ap_EncryptionMode);
-				printf("\tap_SupportedStandards = %s\n", pt->ap_SupportedStandards);
-				printf("\tap_OperatingStandards = %s\n", pt->ap_OperatingStandards);
-				printf("\tap_OperatingChannelBandwidth = %s\n", pt->ap_OperatingChannelBandwidth);
-				printf("\tap_SecurityModeEnabled = %s\n", pt->ap_SecurityModeEnabled);
-				printf("\tap_BeaconPeriod = %d\n", pt->ap_BeaconPeriod);
-				printf("\tap_Noise = %d\n", pt->ap_Noise);
-				printf("\tap_BasicDataTransferRates = %s\n", pt->ap_BasicDataTransferRates);
-				printf("\tap_SupportedDataTransferRates = %s\n", pt->ap_SupportedDataTransferRates);
-				printf("\tap_DTIMPeriod = %d\n", pt->ap_DTIMPeriod);
-				printf("\tap_ChannelUtilization = %d\n", pt->ap_ChannelUtilization);
+				printf("\nNeighbor :%d:\n", i + 1);
+				printf("\tap_SSID			:%s\n", pt->ap_SSID);
+				printf("\tap_BSSID			:%s\n", pt->ap_BSSID);
+				printf("\tap_Mode			:%s\n", pt->ap_Mode);
+				printf("\tap_Channel			:%d\n", pt->ap_Channel);
+				printf("\tap_SignalStrength		:%d\n",
+					pt->ap_SignalStrength);
+				printf("\tap_SecurityModeEnabled	:%s\n",
+					pt->ap_SecurityModeEnabled);
+				printf("\tap_EncryptionMode:%s\n", pt->ap_EncryptionMode);
+				printf("\tap_SupportedStandards		:%s\n",
+					pt->ap_SupportedStandards);
+				printf("\tap_OperatingStandards		:%s\n",
+					pt->ap_OperatingStandards);
+				printf("\tap_OperatingChannelBandwidth	:%s\n",
+					pt->ap_OperatingChannelBandwidth);
+				printf("\tap_SecurityModeEnabled	:%s\n",
+					pt->ap_SecurityModeEnabled);
+				printf("\tap_BeaconPeriod		:%d\n",pt->ap_BeaconPeriod);
+				printf("\tap_Noise			:%d\n",
+					pt->ap_Noise);
+				printf("\tap_BasicDataTransferRates	:%s\n",
+					pt->ap_BasicDataTransferRates);
+				printf("\tap_SupportedDataTransferRates	:%s\n",
+					pt->ap_SupportedDataTransferRates);
+				printf("\tap_DTIMPeriod			:%d\n", pt->ap_DTIMPeriod);
+				printf("\tap_ChannelUtilization		:%d\n",
+					pt->ap_ChannelUtilization);
 			}
 		} else {
 			printf("%s returned ERROR\n", argv[1]);
@@ -3269,8 +3503,7 @@
 			free(neighbor_ap_array);
 			neighbor_ap_array = NULL;
 		}
-	}
-	else if (!strcmp(argv[1], "wifi_getNeighboringWiFiStatus")) {
+	} else if (!strcmp(argv[1], "wifi_getNeighboringWiFiStatus")) {
 		wifi_neighbor_ap2_t *neighbor_ap_array = NULL,*pt = NULL;
 		UINT array_size = 0;
 		UINT i;
@@ -3278,24 +3511,36 @@
 		if (ret != RETURN_ERR) {
 			printf("Total Scan Results:%d\n", array_size);
 			for (i = 0, pt = neighbor_ap_array; i < array_size; i++, pt++) {
-				printf("\nneighbor %d:\n", i+1);
-				printf("\tap_SSID	= %s\n", pt->ap_SSID);
-				printf("\tap_BSSID = %s\n", pt->ap_BSSID);
-				printf("\tap_Mode = %s\n", pt->ap_Mode);
-				printf("\tap_Channel = %d\n", pt->ap_Channel);
-				printf("\tap_SignalStrength = %d\n", pt->ap_SignalStrength);
-				printf("\tap_SecurityModeEnabled = %s\n", pt->ap_SecurityModeEnabled);
-				printf("\tap_EncryptionMode = %s\n", pt->ap_EncryptionMode);
-				printf("\tap_SupportedStandards = %s\n", pt->ap_SupportedStandards);
-				printf("\tap_OperatingStandards = %s\n", pt->ap_OperatingStandards);
-				printf("\tap_OperatingChannelBandwidth = %s\n", pt->ap_OperatingChannelBandwidth);
-				printf("\tap_SecurityModeEnabled = %s\n", pt->ap_SecurityModeEnabled);
-				printf("\tap_BeaconPeriod = %d\n", pt->ap_BeaconPeriod);
-				printf("\tap_Noise = %d\n", pt->ap_Noise);
-				printf("\tap_BasicDataTransferRates = %s\n", pt->ap_BasicDataTransferRates);
-				printf("\tap_SupportedDataTransferRates = %s\n", pt->ap_SupportedDataTransferRates);
-				printf("\tap_DTIMPeriod = %d\n", pt->ap_DTIMPeriod);
-				printf("\tap_ChannelUtilization = %d\n", pt->ap_ChannelUtilization);
+				printf("\nNeighbor :%d:\n", i+1);
+				printf("\tap_SSID			:%s\n", pt->ap_SSID);
+				printf("\tap_BSSID			:%s\n", pt->ap_BSSID);
+				printf("\tap_Mode			:%s\n", pt->ap_Mode);
+				printf("\tap_Channel			:%d\n",
+					pt->ap_Channel);
+				printf("\tap_SignalStrength		:%d\n",
+					pt->ap_SignalStrength);
+				printf("\tap_SecurityModeEnabled	:%s\n",
+					pt->ap_SecurityModeEnabled);
+				printf("\tap_EncryptionMode		:%s\n",
+					pt->ap_EncryptionMode);
+				printf("\tap_SupportedStandards		:%s\n",
+					pt->ap_SupportedStandards);
+				printf("\tap_OperatingStandards		:%s\n",
+					pt->ap_OperatingStandards);
+				printf("\tap_OperatingChannelBandwidth	:%s\n",
+					pt->ap_OperatingChannelBandwidth);
+				printf("\tap_SecurityModeEnabled	:%s\n",
+					pt->ap_SecurityModeEnabled);
+				printf("\tap_BeaconPeriod		:%d\n",
+					pt->ap_BeaconPeriod);
+				printf("\tap_Noise			:%d\n", pt->ap_Noise);
+				printf("\tap_BasicDataTransferRates:	:%s\n",
+					pt->ap_BasicDataTransferRates);
+				printf("\tap_SupportedDataTransferRates	:%s\n",
+					pt->ap_SupportedDataTransferRates);
+				printf("\tap_DTIMPeriod			:%d\n", pt->ap_DTIMPeriod);
+				printf("\tap_ChannelUtilization		:%d\n",
+					pt->ap_ChannelUtilization);
 			}
 		} else {
 			printf("%s returned ERROR\n", argv[1]);
@@ -3304,6 +3549,6 @@
 			free(neighbor_ap_array);
 			neighbor_ap_array = NULL;
 		}
-    }
-    return ret;
+	}
+	return ret;
 }
diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_hal.c ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_hal.c
--- ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_hal.c	2021-04-17 01:01:07.170602206 +0300
+++ ./main/components/rdk/ccsp/hal/wifi/source/wifi/wifi_hal.c	2021-04-17 01:03:13.079117640 +0300
@@ -106,7 +106,9 @@
 #include "lattice/LatticeWiFiNeighboringDiagnosticsResult.h"
 
 #define STATUS_OK LATTICE_STATUS_OK
-
+#else
+#include "typedefs.h"
+#include "wldm_lib.h"
 #endif /* End of !RDKB_WLDM */
 
 #define HAL_WIFI_LOG_FILE	"/rdklogs/logs/wifi_vendor_hal.log"
@@ -152,9 +154,6 @@
 #include "wlcsm_lib_wifi.h"
 #endif // endif
 
-#include "typedefs.h"
-#include "wldm_lib.h"
-
 /* 802.11ax */
 #if WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15
 #pragma message "wifi_hal.h version is >= 2.15"
@@ -523,7 +522,7 @@
 
 static pthread_t wpsThread = (pthread_t) NULL;
 static int timeCount = 0;
-static bool WiFi_Ready_after_hal_started = FALSE;
+static BOOL WiFi_Ready_after_hal_started = FALSE;
 
 extern char *wlcsm_nvram_get(char *name);
 extern int wlcsm_nvram_set(char *name, char *value);
@@ -2599,6 +2598,7 @@
     return RETURN_OK;
 }
 
+#if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
 /* Extract AP entries from wlX_escanresults file
  * Assumes radioIndex is already validated.
  */
@@ -2672,7 +2672,8 @@
     //HAL_WIFI_DBG(("%s:%d, END \n", __FUNCTION__, __LINE__));
     return ret;
 }
-#endif /* End of !RDKB_WLDM */
+#endif /* !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_) */
+#endif /* !RDKB_WLDM */
 
 static void wifi_sort_scan_results(wifi_neighbor_ap2_t **neighbor, unsigned int idx, int *num, int num_ssid_match)
 {
@@ -2817,6 +2818,7 @@
 	free(wldm_neighbor_ptr);
 	return RETURN_OK;
 #else
+#if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
     HAL_WIFI_DBG(("%s radioIndex %d\n", __FUNCTION__, radioIndex));
 
     if ((radioIndex >= HAL_RADIO_NUM_RADIOS) || (radioIndex < 0)) {
@@ -2825,6 +2827,51 @@
     }
 
     return wifiGetNeighboringEscanresults(radioIndex, neighbor_ap_array, output_array_size);
+#else
+	char interface[6];
+	int ret = 0;
+
+	HAL_WIFI_DBG(("%s\n", __FUNCTION__));
+
+	if ((radioIndex >= HAL_RADIO_NUM_RADIOS) || (radioIndex < 0)) {
+		HAL_WIFI_ERR(("%s, INCORRECT radioIndex [%d] \n", __FUNCTION__, radioIndex));
+		return RETURN_ERR;
+	}
+	snprintf(interface, sizeof(interface), "wl%d", radioIndex);
+	errno = 0;
+	ret = wlcsm_mngr_scanresults_status(interface);
+
+	if (ret < 0) {
+		if (errno == EINVAL) {
+			/* BCME_NOTREADY (25) is converted to os EINVAL (22) by driver OSL_ERROR in
+				wl_ioctl */
+			HAL_WIFI_DBG(("%s, Scan in progress radioIndex [%d] \n", __FUNCTION__,
+				radioIndex));
+			errno = EAGAIN;
+		} else {
+			HAL_WIFI_ERR(("%s, Scan failed radioIndex [%d] \n", __FUNCTION__,
+				radioIndex));
+		}
+		HAL_WIFI_DBG(("%s : %d failed \n", __FUNCTION__, __LINE__));
+		return RETURN_ERR;
+	} else {
+		errno = 0;
+		if (LATTICE_STATUS_OK != WiFiRadioStatsDiagnosticsStateSet(
+			pWifiStatsContext[radioIndex], HAL_RADIO_IDX_TO_LATTICE(radioIndex), 2)) {
+			HAL_WIFI_ERR(("%s, WiFiRadioStatsDiagnosticsStateSet to 2 is failed\n",
+				__FUNCTION__));
+			return RETURN_ERR;
+		}
+
+		if (LATTICE_STATUS_OK != WiFiRadioStatsApplyContext(pWifiStatsContext[radioIndex],
+			HAL_RADIO_IDX_TO_LATTICE(radioIndex), FALSE)) {
+			HAL_WIFI_ERR(("%s, WiFiRadioStatsApplyContext  failed\n", __FUNCTION__));
+			return RETURN_ERR;
+		}
+		return wifi_neighboringWiFiScanResults(radioIndex, neighbor_ap_array,
+			output_array_size);
+	}
+#endif /* !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_) */
 #endif /* RDKB_WLDM */
 }
 
@@ -2874,6 +2921,7 @@
 	}
 	return ret;
 #else
+#if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
     int ret = RETURN_OK;
     INT radioIndex = HAL_AP_IDX_TO_HAL_RADIO(apIndex);
 
@@ -2902,9 +2950,47 @@
     errno = 0;
 
     return ret;
+#else
+	int ret = 0;
+	char interface[6];
+	HAL_WIFI_DBG(("%s\n", __FUNCTION__));
+	if ((apIndex >= HAL_WIFI_TOTAL_NO_OF_APS) || (apIndex < 0)) {
+		HAL_WIFI_ERR(("%s, INCORRECT apIndex [%d] \n", __FUNCTION__, apIndex));
+		return RETURN_ERR;
+	}
+	convert_apindex_to_interface(apIndex, interface, sizeof(interface));
+	errno = 0;
+	ret = wlcsm_mngr_scan_start(interface, scan_mode, dwell_time, chan_num, chan_list);
+
+	if (ret != 0) {
+		if (errno == EINVAL) {
+			HAL_WIFI_ERR(("%s, Failed Scan in progress apIndex [%d] \n", __FUNCTION__,
+				apIndex));
+			errno = EAGAIN;
+		}
+		return  RETURN_ERR;
+	}
+	errno = 0;
+
+	return RETURN_OK;
+#endif /* #if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_) */
 #endif /* RDKB_WLDM */
 }
 
+INT wifi_getApAssociatedDeviceTidStatsResult(
+        INT radioIndex,
+        mac_address_t *clientMacAddress,
+        wifi_associated_dev_tid_stats_t *tid_stats,
+        uint64_t *handle)
+{
+/* NOT IMPLEMENTED */
+	(void)radioIndex;
+	(void)clientMacAddress;
+	memset(tid_stats, 0, sizeof(*tid_stats));
+	*handle = 0;
+	return RETURN_OK;
+}
+
 /* wifi_reset() function */
 /**
 * Description: Resets the Wifi subsystem.  This includes reset of all AP varibles.
@@ -3673,13 +3759,14 @@
 #endif /* End of RDKB_WLDM */
 }
 
-//Get the Supported Radio Mode. eg: "b,g,n"; "n,ac"
-//The output_string is a max length 64 octet string that is allocated by the RDKB code.  Implementations must ensure that strings are not longer than this.
+/* Get the Supported Radio Mode. eg: "b,g,n"; "n,ac"
+/* The output_string is a max length 64 octet string that is allocated by the RDKB code.
+Implementations must ensure that strings are not longer than this. */
+
+#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15)
 INT wifi_getRadioSupportedStandards(INT radioIndex, CHAR *output_string) //Tr181
-#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
-	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
-#ifdef RDKB_WLDM
 {
+#ifdef RDKB_WLDM
 	int len, ret;
 
 	HAL_WIFI_DBG(("%s\n", __FUNCTION__));
@@ -3702,40 +3789,39 @@
 
 	HAL_WIFI_DBG(("%s radioIndex=%d SupportedStandards=%s\n", __FUNCTION__, radioIndex, output_string));
 	return RETURN_OK;
-}
 #else
-{
-    CHAR supportedStandards[OUTPUT_STRING_LENGTH_64];
-    LATTICE_STATUS latticeStatus;
+	CHAR supportedStandards[OUTPUT_STRING_LENGTH_64];
+	LATTICE_STATUS latticeStatus;
 
-    if (NULL == output_string)
-    {
-        HAL_WIFI_ERR(("%s, output_string parameter error!!!\n", __FUNCTION__));
-        return RETURN_ERR;
-    }
+	if (NULL == output_string) {
+		HAL_WIFI_ERR(("%s, output_string parameter error!!!\n", __FUNCTION__));
+		return RETURN_ERR;
+	}
 
-    if ((radioIndex >= HAL_RADIO_NUM_RADIOS) || (radioIndex < 0)) {
-        HAL_WIFI_ERR(("%s, INCORRECT radioIndex [%d] \n", __FUNCTION__, radioIndex));
-        return RETURN_ERR;
-    }
+	if ((radioIndex >= HAL_RADIO_NUM_RADIOS) || (radioIndex < 0)) {
+		HAL_WIFI_ERR(("%s, INCORRECT radioIndex [%d] \n", __FUNCTION__, radioIndex));
+		return RETURN_ERR;
+	}
 
-    latticeStatus = WiFiRadioSupportedStandardsGet(HAL_RADIO_IDX_TO_LATTICE(radioIndex), supportedStandards, OUTPUT_STRING_LENGTH_64);
-    if (latticeStatus != LATTICE_STATUS_OK)
-    {
-        HAL_WIFI_ERR(("%s, WiFiRadioSupportedStandardsGet fail, latticeStatus = %d\n", __FUNCTION__, latticeStatus));
-        return RETURN_ERR;
-    }
+	latticeStatus = WiFiRadioSupportedStandardsGet(HAL_RADIO_IDX_TO_LATTICE(radioIndex),
+		supportedStandards, OUTPUT_STRING_LENGTH_64);
+	if (latticeStatus != LATTICE_STATUS_OK) {
+		HAL_WIFI_ERR(("%s, WiFiRadioSupportedStandardsGet fail, latticeStatus = %d\n",
+			__FUNCTION__, latticeStatus));
+		return RETURN_ERR;
+	}
 
-    snprintf(output_string, OUTPUT_STRING_LENGTH_64, "%s", supportedStandards);
+	snprintf(output_string, OUTPUT_STRING_LENGTH_64, "%s", supportedStandards);
 
-    HAL_WIFI_DBG(("%s, radioIndex = %d, output_string = %s, supportedStandards = %s\n", __FUNCTION__, radioIndex, output_string, supportedStandards));
+	HAL_WIFI_DBG(("%s, radioIndex = %d, output_string = %s, supportedStandards = %s\n",
+		__FUNCTION__, radioIndex, output_string, supportedStandards));
 
-    return RETURN_OK;
-}
+	return RETURN_OK;
 #endif /* End of RDKB_WLDM */
-#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) &&
-	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
+}
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) */
 
+#ifdef RDKB_WLDM
 struct operStdPMode_info {
 	char		*operStd;
 	char		*pmodeStr;
@@ -3799,6 +3885,7 @@
 	}
 	return 0;
 }
+#endif /* RDKB_WLDM */
 
 /* Deprecated from WIFI_HAL_MAJOR_VERSION >= 2  && WIFI_HAL_MINOR_VERSION >= 15 - use wifi_getRadioMode */
 /* Get the radio operating mode, and pure mode flag. eg: "ac"
@@ -8239,6 +8326,7 @@
 	}
 	return wifi_getNeighboringWiFiStatus(radioIndex, neighbor_ap_array, output_array_size);
 #else
+#if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
     HAL_WIFI_DBG(("%s radioIndex %d\n", __FUNCTION__, radioIndex));
 
     if ((radioIndex >= HAL_RADIO_NUM_RADIOS) || (radioIndex < 0)) {
@@ -8258,6 +8346,56 @@
     errno = 0;
 
     return wifiGetNeighboringEscanresults(radioIndex, neighbor_ap_array, output_array_size);
+#else
+	CHAR scanfilter_ssid[OUTPUT_STRING_LENGTH_32 + 1];
+	BOOL scanfilter_ssid_match = 0;
+	UINT index = 0, idx = 0, j = 0, l = 0;
+	UINT32 scan_state = -1, scan_timeout = 20, numEntries = 0, startIndex = 0, i = 0;
+	LATTICE_WIFINEIGHBORINGDIAGNOSTICSRESULT neighbor_result;
+	wifi_neighbor_ap2_t *neighbor = NULL;
+
+	HAL_WIFI_DBG(("wifi_getNeighboringWiFiDiagnosticResult2 radioIndex %d\n", radioIndex));
+
+	if ((radioIndex >= HAL_RADIO_NUM_RADIOS) || (radioIndex < 0)) {
+		HAL_WIFI_ERR(("%s, INCORRECT radioIndex [%d] \n", __FUNCTION__, radioIndex));
+		return RETURN_ERR;
+	}
+
+	if (LATTICE_STATUS_OK != WiFiRadioStatsDiagnosticsStateSet(pWifiStatsContext[radioIndex],
+		HAL_RADIO_IDX_TO_LATTICE(radioIndex), 2)) {
+		HAL_WIFI_ERR(("%s, WiFiRadioStatsDiagnosticsStateSet to 2 is failed\n",
+			 __FUNCTION__));
+		return RETURN_ERR;
+	}
+
+	if (LATTICE_STATUS_OK != WiFiRadioStatsApplyContext(pWifiStatsContext[radioIndex],
+		HAL_RADIO_IDX_TO_LATTICE(radioIndex), TRUE)) {
+		HAL_WIFI_ERR(("%s, WiFiRadioStatsApplyContext failed\n", __FUNCTION__));
+		return RETURN_ERR;
+	}
+
+	/* Wait for the scan to finish */
+	while (scan_timeout <= 20) {
+		if (LATTICE_STATUS_OK != WiFiRadioStatsDiagnosticsStateGet(HAL_RADIO_IDX_TO_LATTICE
+			(radioIndex), &scan_state)) {
+			HAL_WIFI_ERR(("%s, WiFiRadioStatsDiagnosticsStateSet to 2 is failed\n",
+				__FUNCTION__));
+			return RETURN_ERR;
+		}
+		if (scan_state == 3) {
+			HAL_WIFI_DBG(("%s, scan is finished \n", __FUNCTION__));
+			break;
+		}
+		sleep(2);
+	}
+
+	if ((scan_timeout > 20) && (scan_state != 3)) {
+		HAL_WIFI_ERR(("%s, failed scan_timeout = %d , scan_state = %d\n", __FUNCTION__,
+			scan_timeout, scan_state));
+		return RETURN_ERR;
+	}
+	return wifi_neighboringWiFiScanResults(radioIndex, neighbor_ap_array, output_array_size);
+#endif /* !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_) */
 #endif /* RDKB_WLDM */
 }
 
@@ -8875,7 +9013,7 @@
 		return RETURN_ERR;
 	}
 	int len = sizeof(enable);
-	returnStatus = wldm_Radio_ObssCoexistenceEnable(CMD_SET_IOCTL, apIndex, &enable, &len, NULL, NULL);
+	returnStatus = wldm_Radio_ObssCoexistenceEnable(CMD_SET_IOCTL | CMD_SET_NVRAM, apIndex, &enable, &len, NULL, NULL);
 	if (returnStatus != RETURN_OK) {
 		HAL_WIFI_DBG(("%s wldm_Radio_ObssCoexistenceEnable Failed, Status = %d\n",
 			__FUNCTION__, returnStatus));
@@ -9829,7 +9967,8 @@
 // Outputs a 32 byte or less string indicating the beacon type as "None", "Basic", "WPA", "11i", "WPAand11i"
 INT wifi_getApBeaconType(INT apIndex, CHAR *output_string)
 {
-	CHAR auth_mode[OUTPUT_STRING_LENGTH_32] = { 0 };
+	CHAR auth_mode[OUTPUT_STRING_LENGTH_32+1] = { 0 };
+
 	HAL_WIFI_DBG(("%s: apIndex = %d\n", __FUNCTION__, apIndex));
 
 	if (NULL == output_string) {
@@ -11409,6 +11548,9 @@
     }
     HAL_WIFI_LOG(("%s, apIndex [%d] mac mode setting to [%d] \n", __FUNCTION__, apIndex, filterMode));
 
+#if defined(_CBR_PRODUCT_REQ_) || defined(_XF3_PRODUCT_REQ_)
+    wifi_getApMacAddressControlMode(apIndex, &curFilterMode);
+#else
     if (apIndex < HAL_RADIO_NUM_RADIOS)
     {
         snprintf(interface, sizeof(interface), "wl%d", apIndex);
@@ -11430,6 +11572,7 @@
     } else if (curFilterMode == 2) {
         curFilterMode = 1;
     }
+#endif /* defined(_CBR_PRODUCT_REQ_) || defined(_XF3_PRODUCT_REQ_) */
     if ( curFilterMode == filterMode )
     {
         HAL_WIFI_LOG(("%s, apIndex [%d] mac mode is already set to [%d] \n", __FUNCTION__, apIndex, filterMode));
@@ -11538,8 +11681,10 @@
 	return RETURN_OK;
 #else
     LATTICE_STATUS latticeStatus;
+#if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
     INT ret;
     CHAR interface[6]={0};
+#endif // endif
     HAL_WIFI_DBG(("wifi_getApMacAddressControlMode apIndex %d\n", apIndex));
 
     if (NULL == output_filterMode)
@@ -11553,6 +11698,7 @@
             HAL_WIFI_ERR(("%s, INCORRECT apIndex [%d] \n", __FUNCTION__, apIndex));
             return RETURN_ERR;
         }
+#if !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
         if (apIndex < HAL_RADIO_NUM_RADIOS)
         {
             snprintf(interface, sizeof(interface), "wl%d", apIndex);
@@ -11573,6 +11719,16 @@
                 return RETURN_ERR;
             }
         }
+#else
+	latticeStatus = WiFiAccessPointMacModeGet( HAL_AP_IDX_TO_LATTICE(apIndex),
+		output_filterMode);
+	if (latticeStatus != LATTICE_STATUS_OK) {
+		HAL_WIFI_ERR(("%s, WiFiAccessPointMacModeGet fail, latticeStatus = %d\n",
+			__FUNCTION__, latticeStatus));
+		return RETURN_ERR;
+	}
+#endif /* !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_) */
+
         // Driver and CCSP HAL have allow and deny interchanged.
         if (*output_filterMode == 1) {
             *output_filterMode = 2;
@@ -14743,7 +14899,7 @@
 	if (wldm_wfa_wps(&param) != 0) {
 		goto print_err;
 	}
-#else /* RDKB_WLDM */
+#elif !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)
 	LATTICE_STATUS latticeStatus;
 	INT latticeRadio;
 
@@ -14770,7 +14926,7 @@
 		HAL_WIFI_ERR(("%s, WiFiSystemRadioInit_priv fail [%d]\n", __FUNCTION__, latticeStatus));
 		goto print_err;
 	}
-#endif /* RDKB_WLDM */
+#endif /* !defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_) */
 
 	wifihealth_fp = fopen("/rdklogs/logs/wifihealth.txt", "a+");
 	print_time(buffer, sizeof(buffer));
@@ -18843,11 +18999,11 @@
 
 /* Add FD in enum and init in fds below for UDP socket connection between HAL and ECBD */
 /* unified: callback id is defined in wldm_lib_wifi.h */
-// enum { FD_STA_CONN, FD_AUTH_FAIL, FD_MESH, FD_RRM_BCNREP, FD_BSSTRANS, FD_DPP, NUM_FD };
+enum { FD_STA_CONN, FD_AUTH_FAIL, FD_MESH, FD_RRM_BCNREP, FD_BSSTRANS, FD_DPP, NUM_FD };
 
-static struct pollfd fds[NUM_FD] = {{.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}};
+static struct pollfd fds[NUM_FD] = {{.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}, {.fd = -1}};
 static nfds_t nfds = NUM_FD;
-#endif // endif
+#endif /* ifndef RDKB_WLDM */
 
 /* send message to ecbd */
 static int
@@ -19999,11 +20155,13 @@
                              wifi_BeaconRequest_t *in_request,
                              UCHAR *out_DialogToken)
 {
-	char logStr[128];
-	int radioIndex = HAL_AP_IDX_TO_HAL_RADIO(apIndex);
-	int reqlen, outlen, ret;
+#ifdef RDKB_WLDM
+	int reqlen, outlen;
 	wl_af_rrm_req_info_t wl_af_rrm_req;
 	wl_af_rrm_req_info_t *reqp;
+#endif /* RDKB_WLDM */
+	char logStr[128];
+	int radioIndex = HAL_AP_IDX_TO_HAL_RADIO(apIndex), ret;
 
 	HAL_WIFI_DBG(("%s apindex=%d MAC=%s\n", __FUNCTION__, apIndex, peer));
 	if ((apIndex >= HAL_WIFI_TOTAL_NO_OF_APS) || (apIndex < 0)) {
@@ -20305,6 +20463,7 @@
 #define	WL_CMD_BUF_LEN			256
 #define WL_MAX_FNAME_LEN		256
 #define ECBD_OUTPUT_FILE_STA_RMCAP_INFO "/tmp/ecbd.sta_rmcapinfo"
+#define DOT11_RRM_CAP_LEN               5       /* length of rrm cap bitmap */
 
 static int wifi_readRMCapFile(char *fname, unsigned char *out_Capabilities)
 {
@@ -20680,7 +20839,10 @@
 #if (WIFI_HAL_MAJOR_VERSION >= 2) && (WIFI_HAL_MINOR_VERSION >= 19)
 /* wifi_hal.h function rename RDKB-31351 */
 INT wifi_dpp_frame_received_callbacks_register(wifi_dppAuthResponse_callback_t dppAuthCallback,
-	wifi_dppConfigRequest_callback_t dppConfigCallback)
+		wifi_dppConfigRequest_callback_t dppConfigCallback,
+		wifi_dppConfigResult_callback_t dppConfigResultCallback,
+		wifi_dppReconfigAnnounce_callback_t dppReconfigAnnounceCallback,
+		wifi_dppReconfigAuthResponse_callback_t dppReconfigAuthRspCallback)
 {
 	/* obsolete, use dummy code to avoid error in case some app still call it */
 	return RETURN_OK;
@@ -21980,8 +22142,12 @@
                 wifi_setApWpsConfigMethodsEnabled(pApiInfo->radioIndex, pApiInfo->api_data);
             } else if (!strcmp(pApiInfo->api_name, "wifi_setRadioChannel")) {
                 wifi_setRadioChannel(pApiInfo->radioIndex, atoi(pApiInfo->api_data));
+#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
             } else if (!strcmp(pApiInfo->api_name, "wifi_setBSSColorEnabled")) {
                 wifi_setBSSColorEnabled(pApiInfo->radioIndex, atoi(pApiInfo->api_data));
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) &&
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
             } else if (!strcmp(pApiInfo->api_name, "wifi_setApRetryLimit")) {
 		wifi_setApRetryLimit(pApiInfo->radioIndex, atoi(pApiInfo->api_data));
             } else if (!strcmp(pApiInfo->api_name, "wifi_setRadioDCSEnable")) {
@@ -22145,9 +22311,13 @@
                 printf("TBD In %s wifi_getNeighborReportActivation\n", __FUNCTION__);
             } else if (!strcmp(pApiInfo->api_name, "wifi_deleteAp")) {
                 wifi_deleteAp(pApiInfo->radioIndex);
+#if (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) && \
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_))
             } else if (!strcmp(pApiInfo->api_name, "wifi_setRadioDfsMoveBackEnable")) {
 		BOOL enabled = atoi(pApiInfo->api_data);
 		wifi_setRadioDfsMoveBackEnable(pApiInfo->radioIndex, enabled);
+#endif /* (WIFI_HAL_MAJOR_VERSION >= 2 && WIFI_HAL_MINOR_VERSION  >= 15) &&
+	(!defined(_CBR_PRODUCT_REQ_) && !defined(_XF3_PRODUCT_REQ_)) */
             } else {
                 HAL_WIFI_DBG(("%s:%d wifi api set %s unsupported \n",__FUNCTION__,__LINE__,pApiInfo->api_name));
             }
@@ -22294,7 +22464,7 @@
     if (apIndex < HAL_RADIO_NUM_RADIOS) {
         snprintf(nvName, sizeof(nvName), "wl%d_%s", apIndex, var);
     } else {
-        snprintf(nvName, sizeof(nvName), "wl%d.%d_", HAL_AP_IDX_TO_HAL_RADIO(apIndex), HAL_AP_IDX_TO_SSID_IDX(apIndex), var);
+        snprintf(nvName, sizeof(nvName), "wl%d.%d_%s", HAL_AP_IDX_TO_HAL_RADIO(apIndex), HAL_AP_IDX_TO_SSID_IDX(apIndex), var);
     }
 
     /* save config in nvram */
diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/router/rc/Makefile ./main/components/router/rc/Makefile
--- ./main/components/router/rc/Makefile	2021-04-17 01:01:05.712549916 +0300
+++ ./main/components/router/rc/Makefile	2021-04-17 01:03:11.669067071 +0300
@@ -68,6 +68,9 @@
 ifeq ($(BCA_HND_EAP),y)
 CFLAGS += -DBCA_HND_EAP
 endif
+ifneq ($(RDK_BUILD),)
+CFLAGS += -DBCA_CPEROUTER_RDK
+endif
 
 CFLAGS += -I. -I$(TOP)/shared -I$(SRCBASE)/include ${WLAN_StdIncPathA} -I$(SRCBASE)/../components/shared -I$(SRCBASE)/../components/wlioctl/include -I$(SRCBASE)/../components/proto/include -I$(SRCBASE)/common/include -Wall -Werror
 else # 2.4
diff -Naur '--exclude=release' '--exclude=*.orig' '--exclude=*.log' '--exclude=installbin' '--exclude=*.tar.gz' ./main/components/router/rc/wps_pbcd.c ./main/components/router/rc/wps_pbcd.c
--- ./main/components/router/rc/wps_pbcd.c	2021-04-17 01:01:06.922593311 +0300
+++ ./main/components/router/rc/wps_pbcd.c	2021-04-17 01:03:13.215122518 +0300
@@ -2736,6 +2736,15 @@
 	return 0;
 }
 
+#if defined(BCA_CPEROUTER_RDK)
+static void
+wps_pbcd_usr_signal_handler(int signum)
+{
+	if (g_wps_pbcd_info_list)
+		bcm_usched_stop(g_wps_pbcd_info_list->usched_hdl);
+}
+#endif // endif
+
 // Function to free the pbcd_info object data
 static void
 wps_pbcd_free_info_object(wps_pbcd_info_t **p_pbcd_info)
@@ -3123,6 +3132,10 @@
 	signal(SIGHUP, wps_pbcd_exit_signal_handler);
 	signal(SIGINT, wps_pbcd_exit_signal_handler);
 	signal(SIGTERM, wps_pbcd_exit_signal_handler);
+#if defined(BCA_CPEROUTER_RDK)
+	signal(SIGUSR1, wps_pbcd_usr_signal_handler);
+	while (1) {
+#endif // endif
 		memset(&g_wps_data, 0, sizeof(g_wps_data));
 		g_wps_pbcd_info_list = (wps_pbcd_info_list_t *)calloc(1,
 			sizeof(*g_wps_pbcd_info_list));
@@ -3153,6 +3166,11 @@
 		wps_pbcd_add_timers(g_wps_pbcd_info_list->usched_hdl, NULL, PBCD_SEC_MICROSEC(5),
 			wps_pbcd_dpp_init_tm_cb, 0);
 		wps_pbcd_run(g_wps_pbcd_info_list->usched_hdl);
+#if defined(BCA_CPEROUTER_RDK)
+		PBCD_ERR("wps_pbcd reloaded\n");
+		wps_pbcd_free_info_objects_list(g_wps_pbcd_info_list);
+	}
+#endif // endif
 
 fail:
 	wps_pbcd_gpio_board_cleanup();
